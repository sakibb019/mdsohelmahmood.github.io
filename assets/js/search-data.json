{
  
    
        "post0": {
            "title": "FAMD on mixed data",
            "content": "import pandas as pd import seaborn as sns import numpy as np import matplotlib.pyplot as plt from sklearn.preprocessing import StandardScaler from sklearn.decomposition import PCA . url = &quot;https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data&quot; df = pd.read_csv(url, names=[&#39;sepal length&#39;,&#39;sepal width&#39;,&#39;petal length&#39;,&#39;petal width&#39;,&#39;target&#39;]) . df . sepal length sepal width petal length petal width target . 0 5.1 | 3.5 | 1.4 | 0.2 | Iris-setosa | . 1 4.9 | 3.0 | 1.4 | 0.2 | Iris-setosa | . 2 4.7 | 3.2 | 1.3 | 0.2 | Iris-setosa | . 3 4.6 | 3.1 | 1.5 | 0.2 | Iris-setosa | . 4 5.0 | 3.6 | 1.4 | 0.2 | Iris-setosa | . ... ... | ... | ... | ... | ... | . 145 6.7 | 3.0 | 5.2 | 2.3 | Iris-virginica | . 146 6.3 | 2.5 | 5.0 | 1.9 | Iris-virginica | . 147 6.5 | 3.0 | 5.2 | 2.0 | Iris-virginica | . 148 6.2 | 3.4 | 5.4 | 2.3 | Iris-virginica | . 149 5.9 | 3.0 | 5.1 | 1.8 | Iris-virginica | . 150 rows × 5 columns . features = [&#39;sepal length&#39;, &#39;sepal width&#39;, &#39;petal length&#39;, &#39;petal width&#39;] # Separating out the features x = df.loc[:, features].values # Separating out the target y = df.loc[:,[&#39;target&#39;]].values # Standardizing the features x = StandardScaler().fit_transform(x) . PCA . pca = PCA(n_components=2) principalComponents = pca.fit_transform(x) principalDf = pd.DataFrame(data = principalComponents , columns = [&#39;principal component 1&#39;, &#39;principal component 2&#39;]) . principalDf . principal component 1 principal component 2 . 0 -2.264542 | 0.505704 | . 1 -2.086426 | -0.655405 | . 2 -2.367950 | -0.318477 | . 3 -2.304197 | -0.575368 | . 4 -2.388777 | 0.674767 | . ... ... | ... | . 145 1.870522 | 0.382822 | . 146 1.558492 | -0.905314 | . 147 1.520845 | 0.266795 | . 148 1.376391 | 1.016362 | . 149 0.959299 | -0.022284 | . 150 rows × 2 columns . finalDf = pd.concat([principalDf, df[[&#39;target&#39;]]], axis = 1) finalDf . principal component 1 principal component 2 target . 0 -2.264542 | 0.505704 | Iris-setosa | . 1 -2.086426 | -0.655405 | Iris-setosa | . 2 -2.367950 | -0.318477 | Iris-setosa | . 3 -2.304197 | -0.575368 | Iris-setosa | . 4 -2.388777 | 0.674767 | Iris-setosa | . ... ... | ... | ... | . 145 1.870522 | 0.382822 | Iris-virginica | . 146 1.558492 | -0.905314 | Iris-virginica | . 147 1.520845 | 0.266795 | Iris-virginica | . 148 1.376391 | 1.016362 | Iris-virginica | . 149 0.959299 | -0.022284 | Iris-virginica | . 150 rows × 3 columns . fig = plt.figure(figsize = (8,8)) ax = fig.add_subplot(1,1,1) ax.set_xlabel(&#39;Principal Component 1&#39;, fontsize = 15) ax.set_ylabel(&#39;Principal Component 2&#39;, fontsize = 15) ax.set_title(&#39;2 component PCA&#39;, fontsize = 20) targets = [&#39;Iris-setosa&#39;, &#39;Iris-versicolor&#39;, &#39;Iris-virginica&#39;] colors = [&#39;r&#39;, &#39;g&#39;, &#39;b&#39;] for target, color in zip(targets,colors): indicesToKeep = finalDf[&#39;target&#39;] == target ax.scatter(finalDf.loc[indicesToKeep, &#39;principal component 1&#39;] , finalDf.loc[indicesToKeep, &#39;principal component 2&#39;] , c = color , s = 50) ax.legend(targets) ax.grid() . Factor Analysis . from sklearn.decomposition import FactorAnalysis transformer = FactorAnalysis(n_components=2, random_state=0) X_transformed = transformer.fit_transform(x) X_transformed.shape . (150, 2) . X_transformed = pd.DataFrame(X_transformed) X_transformed.columns = [&#39;Factor 1&#39;, &#39;Factor 2&#39;] X_transformed . Factor 1 Factor 2 . 0 -1.342095 | 0.505984 | . 1 -1.336775 | -0.689392 | . 2 -1.396478 | -0.278447 | . 3 -1.284444 | -0.503736 | . 4 -1.344103 | 0.717821 | . ... ... | ... | . 145 0.828609 | 0.314259 | . 146 0.714133 | -0.977816 | . 147 0.821956 | 0.251101 | . 148 0.931277 | 1.167611 | . 149 0.758687 | 0.105473 | . 150 rows × 2 columns . finalDf = pd.concat([X_transformed, df[[&#39;target&#39;]]], axis = 1) finalDf . Factor 1 Factor 2 target . 0 -1.342095 | 0.505984 | Iris-setosa | . 1 -1.336775 | -0.689392 | Iris-setosa | . 2 -1.396478 | -0.278447 | Iris-setosa | . 3 -1.284444 | -0.503736 | Iris-setosa | . 4 -1.344103 | 0.717821 | Iris-setosa | . ... ... | ... | ... | . 145 0.828609 | 0.314259 | Iris-virginica | . 146 0.714133 | -0.977816 | Iris-virginica | . 147 0.821956 | 0.251101 | Iris-virginica | . 148 0.931277 | 1.167611 | Iris-virginica | . 149 0.758687 | 0.105473 | Iris-virginica | . 150 rows × 3 columns . fig = plt.figure(figsize = (8,8)) ax = fig.add_subplot(1,1,1) ax.set_xlabel(&#39;Factor 1&#39;, fontsize = 15) ax.set_ylabel(&#39;Factor 2&#39;, fontsize = 15) ax.set_title(&#39;2 component Factor Analysis&#39;, fontsize = 20) targets = [&#39;Iris-setosa&#39;, &#39;Iris-versicolor&#39;, &#39;Iris-virginica&#39;] colors = [&#39;r&#39;, &#39;g&#39;, &#39;b&#39;] for target, color in zip(targets,colors): indicesToKeep = finalDf[&#39;target&#39;] == target ax.scatter(finalDf.loc[indicesToKeep, &#39;Factor 1&#39;] , finalDf.loc[indicesToKeep, &#39;Factor 2&#39;] , c = color , s = 50) ax.legend(targets) ax.grid() . ICA . from sklearn.decomposition import FastICA ica = FastICA(n_components=2) principalComponents = ica.fit_transform(x) principalDf = pd.DataFrame(data = principalComponents , columns = [&#39;Independent component 1&#39;, &#39;Independent component 2&#39;]) finalDf = pd.concat([principalDf, df[[&#39;target&#39;]]], axis = 1) . fig = plt.figure(figsize = (8,8)) ax = fig.add_subplot(1,1,1) ax.set_xlabel(&#39;Independent Component 1&#39;, fontsize = 15) ax.set_ylabel(&#39;Independent Component 2&#39;, fontsize = 15) ax.set_title(&#39;2 component ICA&#39;, fontsize = 20) targets = [&#39;Iris-setosa&#39;, &#39;Iris-versicolor&#39;, &#39;Iris-virginica&#39;] colors = [&#39;r&#39;, &#39;g&#39;, &#39;b&#39;] for target, color in zip(targets,colors): indicesToKeep = finalDf[&#39;target&#39;] == target ax.scatter(finalDf.loc[indicesToKeep, &#39;Independent component 1&#39;] , finalDf.loc[indicesToKeep, &#39;Independent component 2&#39;] , c = color , s = 50) ax.legend(targets) ax.grid() . PCA on categorical data (not recommended) . house_df = pd.read_csv(&#39;house_prices_dataset.csv&#39;) house_df.head() . Id MSSubClass MSZoning LotArea Street LotShape LandContour Utilities LotConfig LandSlope ... EnclosedPorch 3SsnPorch ScreenPorch PoolArea MiscVal MoSold YrSold SaleType SaleCondition SalePrice . 0 1 | 2-Story 1946 &amp; Newer | Residential Low Density | 8450 | Paved | Regular | Near Flat/Level | All public Utilities (E,G,W,&amp; S) | Inside lot | Gentle slope | ... | 0 | 0 | 0 | 0 | 0 | 2 | 2008 | Warranty Deed - Conventional | Normal Sale | 208500 | . 1 2 | 1-Story 1946 &amp; Newer All Styles | Residential Low Density | 9600 | Paved | Regular | Near Flat/Level | All public Utilities (E,G,W,&amp; S) | Frontage on 2 sides of property | Gentle slope | ... | 0 | 0 | 0 | 0 | 0 | 5 | 2007 | Warranty Deed - Conventional | Normal Sale | 181500 | . 2 3 | 2-Story 1946 &amp; Newer | Residential Low Density | 11250 | Paved | Slightly irregular | Near Flat/Level | All public Utilities (E,G,W,&amp; S) | Inside lot | Gentle slope | ... | 0 | 0 | 0 | 0 | 0 | 9 | 2008 | Warranty Deed - Conventional | Normal Sale | 223500 | . 3 4 | 2-Story 1945 &amp; Older | Residential Low Density | 9550 | Paved | Slightly irregular | Near Flat/Level | All public Utilities (E,G,W,&amp; S) | Corner lot | Gentle slope | ... | 272 | 0 | 0 | 0 | 0 | 2 | 2006 | Warranty Deed - Conventional | Abnormal Sale | 140000 | . 4 5 | 2-Story 1946 &amp; Newer | Residential Low Density | 14260 | Paved | Slightly irregular | Near Flat/Level | All public Utilities (E,G,W,&amp; S) | Frontage on 2 sides of property | Gentle slope | ... | 0 | 0 | 0 | 0 | 0 | 12 | 2008 | Warranty Deed - Conventional | Normal Sale | 250000 | . 5 rows × 74 columns . def label_price(row): if (row[&#39;SalePrice&#39;] &lt; 100000) : return &#39;Lower class&#39; if (row[&#39;SalePrice&#39;] &gt;= 100000) &amp; (row[&#39;SalePrice&#39;] &lt; 300000) : return &#39;Mid class&#39; if (row[&#39;SalePrice&#39;] &gt; 300000) &amp; (row[&#39;SalePrice&#39;] &lt; 500000) : return &#39;Upper-mid class&#39; if (row[&#39;SalePrice&#39;] &gt; 500000) : return &#39;Upper class&#39; hclass = pd.DataFrame(house_df.apply (lambda row: label_price(row), axis=1)) hclass.columns = [&#39;HouseClass&#39;] house_df = pd.concat([house_df,hclass], axis=1) . from category_encoders import OrdinalEncoder X_df = house_df[house_df.columns.difference([&#39;SalePrice&#39;, &#39;HouseClass&#39;])] categorical_features = [col for col in X_df.columns if X_df[col].dtype == &#39;object&#39;] encoder = OrdinalEncoder( cols=categorical_features, handle_unknown=&#39;ignore&#39;, return_df=True).fit(X_df) X_df = encoder.transform(X_df) . C: Users adnan anaconda3 lib site-packages category_encoders utils.py:21: FutureWarning: is_categorical is deprecated and will be removed in a future version. Use is_categorical_dtype instead elif pd.api.types.is_categorical(cols): . y = house_df.loc[:,[&#39;HouseClass&#39;]].values # Standardizing the features x = StandardScaler().fit_transform(np.array(X_df)) x.shape . (1460, 73) . n=3 pca = PCA(n_components=n) cols = [] for i in range(n): col_name = &#39;principal component {}&#39;.format(i+1) cols.append(col_name) principalComponents = pca.fit_transform(x) principalDf = pd.DataFrame(data = principalComponents, columns = cols) principalDf . principal component 1 principal component 2 principal component 3 . 0 3.073132 | -1.741716 | -1.611593 | . 1 0.637015 | -0.754668 | 1.109428 | . 2 3.537533 | -1.533371 | -1.084931 | . 3 -0.732658 | 0.832992 | -0.743792 | . 4 5.223102 | 0.462094 | -1.352737 | . ... ... | ... | ... | . 1455 1.570986 | -1.015652 | -2.278167 | . 1456 1.287533 | 1.894576 | 2.909454 | . 1457 -1.105946 | 3.390634 | -1.691706 | . 1458 -1.870465 | -1.075023 | 3.306829 | . 1459 -0.557420 | 0.085438 | 2.542536 | . 1460 rows × 3 columns . finalDf = pd.concat([principalDf, house_df[[&#39;HouseClass&#39;]]], axis = 1) finalDf . principal component 1 principal component 2 principal component 3 HouseClass . 0 3.073132 | -1.741716 | -1.611593 | Mid class | . 1 0.637015 | -0.754668 | 1.109428 | Mid class | . 2 3.537533 | -1.533371 | -1.084931 | Mid class | . 3 -0.732658 | 0.832992 | -0.743792 | Mid class | . 4 5.223102 | 0.462094 | -1.352737 | Mid class | . ... ... | ... | ... | ... | . 1455 1.570986 | -1.015652 | -2.278167 | Mid class | . 1456 1.287533 | 1.894576 | 2.909454 | Mid class | . 1457 -1.105946 | 3.390634 | -1.691706 | Mid class | . 1458 -1.870465 | -1.075023 | 3.306829 | Mid class | . 1459 -0.557420 | 0.085438 | 2.542536 | Mid class | . 1460 rows × 4 columns . fig = plt.figure(figsize = (8,8)) ax = fig.add_subplot(1,1,1) ax.set_xlabel(&#39;Principal Component 1&#39;, fontsize = 15) ax.set_ylabel(&#39;Principal Component 2&#39;, fontsize = 15) ax.set_title(&#39;2 component PCA&#39;, fontsize = 20) targets = list(finalDf.HouseClass.unique()) colors = [&#39;r&#39;, &#39;g&#39;, &#39;b&#39;,&#39;purple&#39;] for target, color in zip(targets,colors): indicesToKeep = finalDf[&#39;HouseClass&#39;] == target ax.scatter(finalDf.loc[indicesToKeep, &#39;principal component 1&#39;] , finalDf.loc[indicesToKeep, &#39;principal component 2&#39;] , c = color , s = 50) ax.legend(targets) ax.grid() . FAMD . house_df = pd.read_csv(&#39;house_prices_dataset.csv&#39;) house_df.head() . Id MSSubClass MSZoning LotArea Street LotShape LandContour Utilities LotConfig LandSlope ... EnclosedPorch 3SsnPorch ScreenPorch PoolArea MiscVal MoSold YrSold SaleType SaleCondition SalePrice . 0 1 | 2-Story 1946 &amp; Newer | Residential Low Density | 8450 | Paved | Regular | Near Flat/Level | All public Utilities (E,G,W,&amp; S) | Inside lot | Gentle slope | ... | 0 | 0 | 0 | 0 | 0 | 2 | 2008 | Warranty Deed - Conventional | Normal Sale | 208500 | . 1 2 | 1-Story 1946 &amp; Newer All Styles | Residential Low Density | 9600 | Paved | Regular | Near Flat/Level | All public Utilities (E,G,W,&amp; S) | Frontage on 2 sides of property | Gentle slope | ... | 0 | 0 | 0 | 0 | 0 | 5 | 2007 | Warranty Deed - Conventional | Normal Sale | 181500 | . 2 3 | 2-Story 1946 &amp; Newer | Residential Low Density | 11250 | Paved | Slightly irregular | Near Flat/Level | All public Utilities (E,G,W,&amp; S) | Inside lot | Gentle slope | ... | 0 | 0 | 0 | 0 | 0 | 9 | 2008 | Warranty Deed - Conventional | Normal Sale | 223500 | . 3 4 | 2-Story 1945 &amp; Older | Residential Low Density | 9550 | Paved | Slightly irregular | Near Flat/Level | All public Utilities (E,G,W,&amp; S) | Corner lot | Gentle slope | ... | 272 | 0 | 0 | 0 | 0 | 2 | 2006 | Warranty Deed - Conventional | Abnormal Sale | 140000 | . 4 5 | 2-Story 1946 &amp; Newer | Residential Low Density | 14260 | Paved | Slightly irregular | Near Flat/Level | All public Utilities (E,G,W,&amp; S) | Frontage on 2 sides of property | Gentle slope | ... | 0 | 0 | 0 | 0 | 0 | 12 | 2008 | Warranty Deed - Conventional | Normal Sale | 250000 | . 5 rows × 74 columns . from prince import FAMD famd = FAMD(n_components =2, n_iter = 3, random_state = 101) famd.fit(house_df) famd.transform(house_df) . 0 1 . 0 1.000142 | 0.115443 | . 1 -0.044716 | -0.618041 | . 2 1.122643 | 0.087214 | . 3 -0.599245 | 0.714000 | . 4 1.835504 | 0.645216 | . ... ... | ... | . 1455 0.487138 | 0.485856 | . 1456 0.556172 | -0.491389 | . 1457 0.424135 | 1.387044 | . 1458 -0.960389 | -0.971239 | . 1459 -0.308147 | -0.717912 | . 1460 rows × 2 columns . famd.plot_row_coordinates(house_df,figsize=(15, 10),color_labels=[&#39;House Style : {}&#39;.format(t) for t in house_df[&#39;HouseStyle&#39;]] ) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Row principal coordinates&#39;}, xlabel=&#39;Component 0 (8.63% inertia)&#39;, ylabel=&#39;Component 1 (3.74% inertia)&#39;&gt; . famd.plot_row_coordinates(house_df,figsize=(10, 10),color_labels=[&#39;Quality {}&#39;.format(t) for t in house_df[&#39;OverallQual&#39;]] ) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Row principal coordinates&#39;}, xlabel=&#39;Component 0 (8.63% inertia)&#39;, ylabel=&#39;Component 1 (3.74% inertia)&#39;&gt; . wine_df = pd.read_csv(&#39;wineR.csv&#39;) wine_df.head() . Label Soil Odor.Intensity.before.shaking Aroma.quality.before.shaking Fruity.before.shaking Flower.before.shaking Spice.before.shaking Visual.intensity Nuance Surface.feeling ... Acidity Astringency Alcohol Balance Smooth Bitterness Intensity Harmony Overall.quality Typical . 0 Saumur | Env1 | 3.074 | 3.000 | 2.714 | 2.280 | 1.960 | 4.321 | 4.000 | 3.269 | ... | 2.107 | 2.429 | 2.500 | 3.250 | 2.731 | 1.926 | 2.857 | 3.143 | 3.393 | 3.250 | . 1 Saumur | Env1 | 2.964 | 2.821 | 2.375 | 2.280 | 1.680 | 3.222 | 3.000 | 2.808 | ... | 2.107 | 2.179 | 2.654 | 2.926 | 2.500 | 1.926 | 2.893 | 2.964 | 3.214 | 3.036 | . 2 Bourgueuil | Env1 | 2.857 | 2.929 | 2.560 | 1.960 | 2.077 | 3.536 | 3.393 | 3.000 | ... | 2.179 | 2.250 | 2.643 | 3.321 | 2.679 | 2.000 | 3.074 | 3.143 | 3.536 | 3.179 | . 3 Chinon | Env2 | 2.808 | 2.593 | 2.417 | 1.913 | 2.160 | 2.893 | 2.786 | 2.538 | ... | 3.179 | 2.185 | 2.500 | 2.333 | 1.680 | 1.963 | 2.462 | 2.038 | 2.464 | 2.250 | . 4 Saumur | Reference | 3.607 | 3.429 | 3.154 | 2.154 | 2.040 | 4.393 | 4.036 | 3.385 | ... | 2.571 | 2.536 | 2.786 | 3.464 | 3.036 | 2.071 | 3.643 | 3.643 | 3.741 | 3.444 | . 5 rows × 31 columns . famd = FAMD(n_components =2, n_iter = 3, random_state = 101) famd.fit(wine_df) famd.transform(wine_df) . 0 1 . 0 0.160017 | -0.034395 | . 1 0.929485 | -0.196533 | . 2 0.719707 | -1.414777 | . 3 2.717576 | 0.378619 | . 4 -1.841413 | 0.207117 | . 5 -1.103472 | -1.175606 | . 6 -1.314148 | -1.147139 | . 7 0.101142 | 0.322169 | . 8 0.755156 | -0.589735 | . 9 0.682869 | 0.839846 | . 10 -0.137966 | 0.979713 | . 11 -0.242710 | 1.045524 | . 12 -1.618778 | 0.093008 | . 13 -1.585089 | 0.105350 | . 14 -0.125589 | -1.223309 | . 15 -0.819382 | -1.319773 | . 16 -0.774118 | -0.468279 | . 17 0.928040 | 0.174004 | . 18 2.490899 | -1.464626 | . 19 0.075707 | 2.430014 | . 20 0.002068 | 2.458810 | . famd.plot_row_coordinates(wine_df,figsize=(10, 10), color_labels=[&#39;Soil {}&#39;.format(t) for t in wine_df[&#39;Soil&#39;]] ) . &lt;AxesSubplot:title={&#39;center&#39;:&#39;Row principal coordinates&#39;}, xlabel=&#39;Component 0 (26.29% inertia)&#39;, ylabel=&#39;Component 1 (22.75% inertia)&#39;&gt; .",
            "url": "https://mdsohelmahmood.github.io/2021/07/11/Factor_Analysis_of_Mixed_Data.html",
            "relUrl": "/2021/07/11/Factor_Analysis_of_Mixed_Data.html",
            "date": " • Jul 11, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Allan Variance in Python",
            "content": "import numpy as np import matplotlib.pyplot as plt import allantools import pandas as pd from allantools import noise . def plotallan(plt, y, rate, taus, style): (t2, ad, ade, adn) = allantools.oadev(y, rate=rate, data_type=&quot;freq&quot;, taus=taus) plt.loglog(t2, ad, style) def plotallan_phase(plt, y, rate, taus, style): (t2, ad, ade, adn) = allantools.oadev(y, rate=rate, taus=taus) plt.loglog(t2, ad, style) def plotline(plt, alpha, taus, style): &quot;&quot;&quot; plot a line with the slope alpha &quot;&quot;&quot; y = [pow(tt, alpha) for tt in taus] plt.loglog(taus, y, style) . t = np.logspace(0, 3, 50) # tau values from 1 to 1000 N = 10000 # pink frequency noise =&gt; constant ADEV freq_pink = noise.pink(N) freq_pink . array([11.97103089, 11.72411358, 10.13384372, ..., 9.20744279, 8.32762594, 9.78518531]) . plotallan(plt, freq_pink, 1, t, &#39;c.&#39;) . Custom function from formula . . Generate AVAR raw data from R . R block starts . n = 1e5 data = rnorm(n, 0, 0.01) + cumsum(rnorm(n, 0, 3.162278e-05)) data = as.data.frame(data) library(&quot;writexl&quot;) write_xlsx(data,&quot;AVAR1.xlsx&quot;) n = 1e5 data = rnorm(n, 0, 0.01) + cumsum(rnorm(n, 0, 4.162278e-05)) data = as.data.frame(data) library(&quot;writexl&quot;) write_xlsx(data,&quot;AVAR2.xlsx&quot;) n = 1e5 data = rnorm(n, 0, 0.01) + cumsum(rnorm(n, 0, 5.162278e-05)) data = as.data.frame(data) library(&quot;writexl&quot;) write_xlsx(data,&quot;AVAR3.xlsx&quot;) . R block ends . fig = pyplot.figure(figsize=[12,8]) plt.plot(data1,) plt.plot(data2) plt.plot(data3) plt.xlabel(&#39;Time (msec)&#39;) plt.ylabel(&#39;Raw Sensor data&#39;) . Text(0, 0.5, &#39;Raw Sensor data&#39;) . data1 = pd.read_excel(&#39;AVAR1.xlsx&#39;) data1 = data1.values.tolist() data1 = [item for sublist in data1 for item in sublist] . data2 = pd.read_excel(&#39;AVAR2.xlsx&#39;) data2 = data2.values.tolist() data2 = [item for sublist in data2 for item in sublist] . data3 = pd.read_excel(&#39;AVAR3.xlsx&#39;) data3 = data3.values.tolist() data3 = [item for sublist in data3 for item in sublist] . from matplotlib import pyplot n = 3000 taus = np.linspace(1,n,n) (t2, ad1, ade, adn) = allantools.adev(data1, rate=1, data_type=&quot;freq&quot;, taus=taus) (t2, ad2, ade, adn) = allantools.adev(data2, rate=1, data_type=&quot;freq&quot;, taus=taus) (t2, ad3, ade, adn) = allantools.adev(data3, rate=1, data_type=&quot;freq&quot;, taus=taus) fig = pyplot.figure(figsize=[12,8]) plt.plot(t2,ad1) plt.plot(t2,ad2) plt.plot(t2,ad3) plt.xscale(&quot;log&quot;) plt.yscale(&quot;log&quot;) plt.xlabel(&#39;Time Cluster (sec)&#39;) plt.ylabel(&#39;Allan Deviation&#39;) plt.grid(True, which=&quot;both&quot;, ls=&quot;-&quot;) . from matplotlib import pyplot n = 3000 taus = np.linspace(1,n,n) (t2, ad1, ade, adn) = allantools.oadev(data1, rate=1, data_type=&quot;freq&quot;, taus=taus) (t2, ad2, ade, adn) = allantools.oadev(data2, rate=1, data_type=&quot;freq&quot;, taus=taus) (t2, ad3, ade, adn) = allantools.oadev(data3, rate=1, data_type=&quot;freq&quot;, taus=taus) fig = pyplot.figure(figsize=[12,8]) plt.plot(t2,ad1) plt.plot(t2,ad2) plt.plot(t2,ad3) plt.xscale(&quot;log&quot;) plt.yscale(&quot;log&quot;) plt.xlabel(&#39;Time Cluster (sec)&#39;) plt.ylabel(&#39;Allan Deviation&#39;) plt.grid(True, which=&quot;both&quot;, ls=&quot;-&quot;) . from matplotlib import pyplot n = 3000 taus = np.linspace(1,n,n) (t2, ad1, ade, adn) = allantools.hdev(data1, rate=1, data_type=&quot;freq&quot;, taus=taus) (t2, ad2, ade, adn) = allantools.hdev(data2, rate=1, data_type=&quot;freq&quot;, taus=taus) (t2, ad3, ade, adn) = allantools.hdev(data3, rate=1, data_type=&quot;freq&quot;, taus=taus) fig = pyplot.figure(figsize=[12,8]) plt.plot(t2,ad1) plt.plot(t2,ad2) plt.plot(t2,ad3) plt.xscale(&quot;log&quot;) plt.yscale(&quot;log&quot;) plt.xlabel(&#39;Time Cluster (sec)&#39;) plt.ylabel(&#39;Allan Deviation&#39;) plt.grid(True, which=&quot;both&quot;, ls=&quot;-&quot;) . from matplotlib import pyplot n = 3000 taus = np.linspace(1,n,n) (t2, ad1, ade, adn) = allantools.mdev(data1, rate=1, data_type=&quot;freq&quot;, taus=taus) (t2, ad2, ade, adn) = allantools.mdev(data2, rate=1, data_type=&quot;freq&quot;, taus=taus) (t2, ad3, ade, adn) = allantools.mdev(data3, rate=1, data_type=&quot;freq&quot;, taus=taus) fig = pyplot.figure(figsize=[12,8]) plt.plot(t2,ad1) plt.plot(t2,ad2) plt.plot(t2,ad3) plt.xscale(&quot;log&quot;) plt.yscale(&quot;log&quot;) plt.xlabel(&#39;Time Cluster (sec)&#39;) plt.ylabel(&#39;Allan Deviation&#39;) plt.grid(True, which=&quot;both&quot;, ls=&quot;-&quot;) . n = 3000 taus = np.linspace(1,n,n) (t2, ad, ade, adn) = allantools.oadev(data, rate=1, data_type=&quot;freq&quot;, taus=taus) plt.plot(t2,ad) plt.xscale(&quot;log&quot;) plt.yscale(&quot;log&quot;) plt.xlabel(&#39;Time Cluster (sec)&#39;) plt.ylabel(&#39;Allan Deviation&#39;) . Text(0, 0.5, &#39;Allan Deviation&#39;) . import numpy as np import math def cal_oadev(data,rate,tauArray): # n=2 tau0 = 1/rate #Calculate the sampling period dataLength = len(data) #Calculate N dev = np.array([]) #Create empty array to store the output. actualTau = np.array([]) for i in tauArray: n = math.floor(i/tau0) #Calculate n given a tau value. if n == 0: n = 1 #Use minimal n if tau is less than the sampling period. currentSum = 0 #Initialize the sum print(&quot;n =&quot;,n) for j in range(0,dataLength-2*n): # print(data[j+2*n]) # print(data[j+n]) # print(data[j]) currentSum = (data[j+2*n]-2*data[j+n]+data[j])**2+currentSum #Cumulate the sum squared print(currentSum) print(&quot;den = &quot;,(2*n**2*tau0**2*(dataLength-2*n)) ) devAtThisTau = currentSum/(2*n**2*tau0**2*(dataLength-2*n)) #Divide by the coefficient dev = np.append(dev,np.sqrt(devAtThisTau)) actualTau = np.append(actualTau,n*tau0) return actualTau, dev #Return the actual tau and overlapped Allan Deviation . t = np.linspace(1,3000,3000) r = 1 (t2phase, adphase) = cal_oadev(data, r, t) #Plot the results fig = plt.figure() ax1 = fig.add_subplot() ax1.set_label(&#39;Frequency (Hz)&#39;) ax1.set_title(&#39;Phase Allan Deviations&#39;) lin, = ax1.loglog(t2phase, adphase) plt.show() . n = 1 60.11151485075499 den = 199996.0 n = 2 59.38508328663315 den = 799968.0 n = 3 59.97684257747183 den = 1799892.0 n = 4 60.052472722054056 den = 3199744.0 n = 5 59.7418341552663 den = 4999500.0 n = 6 59.82331268468809 den = 7199136.0 n = 7 59.691047665908506 den = 9798628.0 n = 8 59.62332721544916 den = 12797952.0 n = 9 60.05466811617231 den = 16197084.0 n = 10 60.061236780519096 den = 19996000.0 n = 11 59.92752782461624 den = 24194676.0 n = 12 60.249174687689155 den = 28793088.0 n = 13 59.75274617932137 den = 33791212.0 n = 14 59.96447532394344 den = 39189024.0 n = 15 59.904520084280975 den = 44986500.0 n = 16 60.09494377560132 den = 51183616.0 n = 17 60.20890610223252 den = 57780348.0 n = 18 59.974326598861865 den = 64776672.0 n = 19 60.098812967214606 den = 72172564.0 n = 20 59.99391546982816 den = 79968000.0 n = 21 59.873251331282255 den = 88162956.0 n = 22 59.93705459867459 den = 96757408.0 n = 23 60.11724347297659 den = 105751332.0 n = 24 59.584886456759946 den = 115144704.0 n = 25 59.758900904968314 den = 124937500.0 n = 26 59.821649815109254 den = 135129696.0 n = 27 60.058994753158885 den = 145721268.0 n = 28 59.86654476613944 den = 156712192.0 n = 29 59.774724874885266 den = 168102444.0 n = 30 60.305609826104785 den = 179892000.0 n = 31 60.182962802117885 den = 192080836.0 n = 32 59.53178154290102 den = 204668928.0 n = 33 59.973770101756116 den = 217656252.0 n = 34 59.70990655227243 den = 231042784.0 n = 35 59.927930169342424 den = 244828500.0 n = 36 59.46153971361197 den = 259013376.0 n = 37 59.48615679351537 den = 273597388.0 n = 38 59.69456821950228 den = 288580512.0 n = 39 60.06823480621121 den = 303962724.0 n = 40 60.52100322873085 den = 319744000.0 n = 41 59.37999189077081 den = 335924316.0 n = 42 60.19206394548884 den = 352503648.0 n = 43 59.760485667109045 den = 369481972.0 n = 44 59.698226719608456 den = 386859264.0 n = 45 60.342193559832324 den = 404635500.0 n = 46 59.98733904362312 den = 422810656.0 n = 47 59.21697439099049 den = 441384708.0 n = 48 59.97606532774757 den = 460357632.0 n = 49 60.11889880235195 den = 479729404.0 n = 50 60.09695720075049 den = 499500000.0 n = 51 59.78295531269508 den = 519669396.0 n = 52 59.83396557020589 den = 540237568.0 n = 53 59.79040491947839 den = 561204492.0 n = 54 59.691430421276294 den = 582570144.0 n = 55 59.913747983049674 den = 604334500.0 n = 56 59.53276931882992 den = 626497536.0 n = 57 59.808234622730744 den = 649059228.0 n = 58 59.82498338579894 den = 672019552.0 n = 59 59.55979067616773 den = 695378484.0 n = 60 59.76185555504239 den = 719136000.0 n = 61 60.03596185615395 den = 743292076.0 n = 62 59.69075661421987 den = 767846688.0 n = 63 59.62153437149802 den = 792799812.0 n = 64 59.992341925865006 den = 818151424.0 n = 65 59.59894417762197 den = 843901500.0 n = 66 59.74820893063093 den = 870050016.0 n = 67 59.40581635315013 den = 896596948.0 n = 68 59.56930510857479 den = 923542272.0 n = 69 59.53456177150565 den = 950885964.0 n = 70 59.58866902410421 den = 978628000.0 n = 71 59.803087103835196 den = 1006768356.0 n = 72 59.791442745416234 den = 1035307008.0 n = 73 59.62439642394113 den = 1064243932.0 n = 74 59.84177231066974 den = 1093579104.0 n = 75 59.74209647889493 den = 1123312500.0 n = 76 60.469378648865884 den = 1153444096.0 n = 77 59.83170959936951 den = 1183973868.0 n = 78 59.700487700463015 den = 1214901792.0 n = 79 59.7318401695167 den = 1246227844.0 n = 80 59.793676913851186 den = 1277952000.0 n = 81 60.123807593673874 den = 1310074236.0 n = 82 60.17434178969918 den = 1342594528.0 n = 83 59.863100478525425 den = 1375512852.0 n = 84 59.995050808557416 den = 1408829184.0 n = 85 60.298858252294515 den = 1442543500.0 n = 86 59.68811861675595 den = 1476655776.0 n = 87 59.898935413048726 den = 1511165988.0 n = 88 59.54159859291547 den = 1546074112.0 n = 89 59.81718828333105 den = 1581380124.0 n = 90 60.12757898180269 den = 1617084000.0 n = 91 59.442233988408454 den = 1653185716.0 n = 92 59.584088252957834 den = 1689685248.0 n = 93 59.65754626107629 den = 1726582572.0 n = 94 59.967257915023474 den = 1763877664.0 n = 95 59.9876832883476 den = 1801570500.0 n = 96 59.613290120024736 den = 1839661056.0 n = 97 59.71824701322724 den = 1878149308.0 n = 98 59.66107915060324 den = 1917035232.0 n = 99 60.10099745175162 den = 1956318804.0 n = 100 59.87470812780786 den = 1996000000.0 n = 101 59.97670488118535 den = 2036078796.0 n = 102 59.850263388900224 den = 2076555168.0 n = 103 59.88087049956763 den = 2117429092.0 n = 104 59.84002015096148 den = 2158700544.0 n = 105 60.055446187327156 den = 2200369500.0 n = 106 59.351142095591506 den = 2242435936.0 n = 107 59.894103294919084 den = 2284899828.0 n = 108 59.88338728414633 den = 2327761152.0 n = 109 59.378090328143934 den = 2371019884.0 n = 110 59.639059647211184 den = 2414676000.0 n = 111 60.00971350089021 den = 2458729476.0 n = 112 59.617394685633045 den = 2503180288.0 n = 113 59.65170784465581 den = 2548028412.0 n = 114 59.98968647743835 den = 2593273824.0 n = 115 59.63879377661142 den = 2638916500.0 n = 116 59.86883169084188 den = 2684956416.0 n = 117 59.80228352099082 den = 2731393548.0 n = 118 59.95715919161001 den = 2778227872.0 n = 119 59.27593588848538 den = 2825459364.0 n = 120 59.249499492226946 den = 2873088000.0 n = 121 59.65836841115985 den = 2921113756.0 n = 122 59.75638326181231 den = 2969536608.0 n = 123 59.911807036779784 den = 3018356532.0 n = 124 59.76581867621449 den = 3067573504.0 n = 125 60.2255988321744 den = 3117187500.0 n = 126 60.069151934602765 den = 3167198496.0 n = 127 60.14904611069081 den = 3217606468.0 n = 128 59.62189365452739 den = 3268411392.0 n = 129 60.04065696522503 den = 3319613244.0 n = 130 59.962320381099154 den = 3371212000.0 n = 131 60.00390421458275 den = 3423207636.0 n = 132 59.16505477142208 den = 3475600128.0 n = 133 59.16122464917507 den = 3528389452.0 n = 134 59.91806498314006 den = 3581575584.0 n = 135 59.93243856628877 den = 3635158500.0 n = 136 59.82272183816642 den = 3689138176.0 n = 137 59.64792282897279 den = 3743514588.0 n = 138 59.61173812961998 den = 3798287712.0 n = 139 59.73483581821071 den = 3853457524.0 n = 140 60.35779155188432 den = 3909024000.0 n = 141 59.72227289778866 den = 3964987116.0 n = 142 60.096018596955155 den = 4021346848.0 n = 143 59.72153217606548 den = 4078103172.0 n = 144 59.96319177267328 den = 4135256064.0 n = 145 59.57714959870561 den = 4192805500.0 n = 146 59.80235514717965 den = 4250751456.0 n = 147 59.91651481198241 den = 4309093908.0 n = 148 60.04350758730489 den = 4367832832.0 n = 149 59.622228408634484 den = 4426968204.0 n = 150 59.6734890257072 den = 4486500000.0 n = 151 59.98319368854617 den = 4546428196.0 n = 152 59.49790776772778 den = 4606752768.0 n = 153 59.85972879244703 den = 4667473692.0 n = 154 59.54550712305245 den = 4728590944.0 n = 155 60.25887801001523 den = 4790104500.0 n = 156 59.61325143741226 den = 4852014336.0 n = 157 59.72308350961684 den = 4914320428.0 n = 158 60.16840305232139 den = 4977022752.0 n = 159 59.852750549428364 den = 5040121284.0 n = 160 59.647856202736804 den = 5103616000.0 n = 161 59.49047499814769 den = 5167506876.0 n = 162 59.66682768895821 den = 5231793888.0 n = 163 59.52179892970557 den = 5296477012.0 n = 164 59.391782224397076 den = 5361556224.0 n = 165 59.63688180863861 den = 5427031500.0 n = 166 59.89392941541036 den = 5492902816.0 n = 167 59.94475784750677 den = 5559170148.0 n = 168 59.30081376824415 den = 5625833472.0 n = 169 59.93237090390022 den = 5692892764.0 n = 170 59.79712158027903 den = 5760348000.0 n = 171 59.97786864779697 den = 5828199156.0 n = 172 59.721314908105015 den = 5896446208.0 n = 173 59.9272359645512 den = 5965089132.0 n = 174 59.7637522985047 den = 6034127904.0 n = 175 59.79480688348011 den = 6103562500.0 n = 176 59.46650595712773 den = 6173392896.0 n = 177 60.16303742152987 den = 6243619068.0 n = 178 59.95127507826038 den = 6314240992.0 n = 179 59.76691087108063 den = 6385258644.0 n = 180 59.845892879392906 den = 6456672000.0 n = 181 60.236514039072276 den = 6528481036.0 n = 182 59.763437112279526 den = 6600685728.0 n = 183 60.01703978956253 den = 6673286052.0 n = 184 59.872225759862715 den = 6746281984.0 n = 185 59.759342851331155 den = 6819673500.0 n = 186 59.833359020706695 den = 6893460576.0 n = 187 59.64420457678194 den = 6967643188.0 n = 188 59.42220986443029 den = 7042221312.0 n = 189 60.077115073371836 den = 7117194924.0 n = 190 59.35465271559302 den = 7192564000.0 n = 191 59.74595429504762 den = 7268328516.0 n = 192 59.603137339843165 den = 7344488448.0 n = 193 59.53516888277753 den = 7421043772.0 n = 194 59.8626189802101 den = 7497994464.0 n = 195 59.74705817992668 den = 7575340500.0 n = 196 59.737596630766866 den = 7653081856.0 n = 197 59.31391705129616 den = 7731218508.0 n = 198 59.256907799078256 den = 7809750432.0 n = 199 59.402759246454835 den = 7888677604.0 n = 200 59.733750860967746 den = 7968000000.0 n = 201 59.94843659255821 den = 8047717596.0 n = 202 59.70531714404622 den = 8127830368.0 n = 203 59.60655460155327 den = 8208338292.0 n = 204 59.215304476638686 den = 8289241344.0 n = 205 59.81021134901281 den = 8370539500.0 n = 206 59.55624594994634 den = 8452232736.0 n = 207 59.47448208330997 den = 8534321028.0 n = 208 59.617106920591304 den = 8616804352.0 n = 209 59.8100254422037 den = 8699682684.0 n = 210 59.53138043928985 den = 8782956000.0 n = 211 59.94140319535721 den = 8866624276.0 n = 212 59.884991249920404 den = 8950687488.0 n = 213 59.687257711989226 den = 9035145612.0 n = 214 59.52806413273749 den = 9119998624.0 n = 215 59.308268837599066 den = 9205246500.0 n = 216 59.9205881289463 den = 9290889216.0 n = 217 59.44061553085411 den = 9376926748.0 n = 218 59.87911922272698 den = 9463359072.0 n = 219 59.39858138823397 den = 9550186164.0 n = 220 60.093741922033765 den = 9637408000.0 n = 221 60.12998888263557 den = 9725024556.0 n = 222 59.52775416431255 den = 9813035808.0 n = 223 60.01060349607477 den = 9901441732.0 n = 224 59.710764043877006 den = 9990242304.0 n = 225 59.46215357585543 den = 10079437500.0 n = 226 59.52427916556128 den = 10169027296.0 n = 227 59.67224318396122 den = 10259011668.0 n = 228 59.73717452653672 den = 10349390592.0 n = 229 59.92177943989107 den = 10440164044.0 n = 230 59.65011472195907 den = 10531332000.0 n = 231 59.396336678128414 den = 10622894436.0 n = 232 59.63313879545703 den = 10714851328.0 n = 233 59.8176751000662 den = 10807202652.0 n = 234 59.66183353524589 den = 10899948384.0 n = 235 59.923910348239396 den = 10993088500.0 n = 236 59.64333457602334 den = 11086622976.0 n = 237 59.38042003340541 den = 11180551788.0 n = 238 60.18716429169165 den = 11274874912.0 n = 239 60.02646821360741 den = 11369592324.0 n = 240 60.36575276648426 den = 11464704000.0 n = 241 60.20136386994267 den = 11560209916.0 n = 242 59.81853844498064 den = 11656110048.0 n = 243 59.984985976086435 den = 11752404372.0 n = 244 59.87928403815451 den = 11849092864.0 n = 245 59.51929495779066 den = 11946175500.0 n = 246 59.75034367006719 den = 12043652256.0 n = 247 59.777882417899846 den = 12141523108.0 n = 248 60.04860390213605 den = 12239788032.0 n = 249 60.06975445106561 den = 12338447004.0 n = 250 59.32087137438131 den = 12437500000.0 n = 251 60.04404465973438 den = 12536946996.0 n = 252 59.69271963907255 den = 12636787968.0 n = 253 59.42404124891262 den = 12737022892.0 n = 254 59.41897788688908 den = 12837651744.0 n = 255 59.925411750861564 den = 12938674500.0 n = 256 59.704689934960804 den = 13040091136.0 n = 257 59.57831388489763 den = 13141901628.0 n = 258 59.295524762219365 den = 13244105952.0 n = 259 59.59109122331078 den = 13346704084.0 n = 260 59.231137482041994 den = 13449696000.0 n = 261 59.360273629100206 den = 13553081676.0 n = 262 59.81780645086106 den = 13656861088.0 n = 263 59.673232604809456 den = 13761034212.0 n = 264 59.77874383009788 den = 13865601024.0 n = 265 59.33698722904694 den = 13970561500.0 n = 266 60.08234352984147 den = 14075915616.0 n = 267 59.66423498191323 den = 14181663348.0 n = 268 59.6849681390039 den = 14287804672.0 n = 269 59.52574166760721 den = 14394339564.0 n = 270 59.81929665590939 den = 14501268000.0 n = 271 59.67025482232091 den = 14608589956.0 n = 272 59.499702397887084 den = 14716305408.0 n = 273 59.39081885801216 den = 14824414332.0 n = 274 59.47774073242886 den = 14932916704.0 n = 275 59.634698885810394 den = 15041812500.0 n = 276 60.03788584518529 den = 15151101696.0 n = 277 60.310883030370924 den = 15260784268.0 n = 278 59.785348790748095 den = 15370860192.0 n = 279 59.56473115461033 den = 15481329444.0 n = 280 59.377963663996454 den = 15592192000.0 n = 281 59.89128589897048 den = 15703447836.0 n = 282 59.61676489472023 den = 15815096928.0 n = 283 59.908229190740165 den = 15927139252.0 n = 284 59.62976333969278 den = 16039574784.0 n = 285 59.56168037569847 den = 16152403500.0 n = 286 59.20140431756517 den = 16265625376.0 n = 287 59.4629099101685 den = 16379240388.0 n = 288 59.65635796632801 den = 16493248512.0 n = 289 59.85111272188509 den = 16607649724.0 n = 290 59.767635978634885 den = 16722444000.0 n = 291 59.43908562870262 den = 16837631316.0 n = 292 59.881869759937864 den = 16953211648.0 n = 293 59.67891926970616 den = 17069184972.0 n = 294 60.02615122907432 den = 17185551264.0 n = 295 59.64976809756533 den = 17302310500.0 n = 296 59.93057569223279 den = 17419462656.0 n = 297 59.88507534414236 den = 17537007708.0 n = 298 59.759410463674854 den = 17654945632.0 n = 299 59.227619763895895 den = 17773276404.0 n = 300 60.200902932986956 den = 17892000000.0 n = 301 59.58529318382666 den = 18011116396.0 n = 302 59.17393674539699 den = 18130625568.0 n = 303 59.793903416668996 den = 18250527492.0 n = 304 59.41517942542694 den = 18370822144.0 n = 305 60.068412756192465 den = 18491509500.0 n = 306 59.64242385686638 den = 18612589536.0 n = 307 59.69176097396088 den = 18734062228.0 n = 308 59.79146204220896 den = 18855927552.0 n = 309 59.53242790082318 den = 18978185484.0 n = 310 59.53090066784534 den = 19100836000.0 n = 311 59.42141422833526 den = 19223879076.0 n = 312 59.24977383744276 den = 19347314688.0 n = 313 59.49433152353506 den = 19471142812.0 n = 314 59.703079700574115 den = 19595363424.0 n = 315 59.56157692977803 den = 19719976500.0 n = 316 59.450552297804265 den = 19844982016.0 n = 317 58.765507795686595 den = 19970379948.0 n = 318 59.97926137681204 den = 20096170272.0 n = 319 59.4295167733406 den = 20222352964.0 n = 320 59.252432464384476 den = 20348928000.0 n = 321 59.43466078591219 den = 20475895356.0 n = 322 59.630971790041364 den = 20603255008.0 n = 323 59.67032726008915 den = 20731006932.0 n = 324 59.52064364499244 den = 20859151104.0 n = 325 59.12281093950879 den = 20987687500.0 n = 326 59.95516827094824 den = 21116616096.0 n = 327 59.425863921253956 den = 21245936868.0 n = 328 60.09633750883616 den = 21375649792.0 n = 329 59.82375808759777 den = 21505754844.0 n = 330 59.389510600168855 den = 21636252000.0 n = 331 59.53571011587549 den = 21767141236.0 n = 332 59.64460863911008 den = 21898422528.0 n = 333 59.61803291045748 den = 22030095852.0 n = 334 59.24926376539256 den = 22162161184.0 n = 335 59.713065565769845 den = 22294618500.0 n = 336 59.672435795841885 den = 22427467776.0 n = 337 59.27199807070166 den = 22560708988.0 n = 338 59.771798735797844 den = 22694342112.0 n = 339 59.4239516797055 den = 22828367124.0 n = 340 59.496401094455756 den = 22962784000.0 n = 341 59.34238724995804 den = 23097592716.0 n = 342 59.41661759238873 den = 23232793248.0 n = 343 59.43685799970734 den = 23368385572.0 n = 344 59.23029228792854 den = 23504369664.0 n = 345 59.6212224626349 den = 23640745500.0 n = 346 59.35807337172105 den = 23777513056.0 n = 347 59.77556991881534 den = 23914672308.0 n = 348 59.372929710950494 den = 24052223232.0 n = 349 59.53725065141704 den = 24190165804.0 n = 350 59.59375055002127 den = 24328500000.0 n = 351 59.5906331876661 den = 24467225796.0 n = 352 59.5148815611514 den = 24606343168.0 n = 353 59.57762375123866 den = 24745852092.0 n = 354 59.18805330504292 den = 24885752544.0 n = 355 59.72703902027215 den = 25026044500.0 n = 356 59.4578838973985 den = 25166727936.0 n = 357 59.760263792283716 den = 25307802828.0 n = 358 59.462716012861314 den = 25449269152.0 n = 359 59.71640998330645 den = 25591126884.0 n = 360 59.54690188759347 den = 25733376000.0 n = 361 59.87367473428174 den = 25876016476.0 n = 362 59.483622249146784 den = 26019048288.0 n = 363 59.66719221067723 den = 26162471412.0 n = 364 59.86214496288328 den = 26306285824.0 n = 365 59.831268557809324 den = 26450491500.0 n = 366 59.334598774888924 den = 26595088416.0 n = 367 59.8593086366392 den = 26740076548.0 n = 368 59.177862094572674 den = 26885455872.0 n = 369 59.42613225282433 den = 27031226364.0 n = 370 59.46162676857694 den = 27177388000.0 n = 371 59.11328404852631 den = 27323940756.0 n = 372 59.855004346285476 den = 27470884608.0 n = 373 59.180372531858296 den = 27618219532.0 n = 374 59.75768622319158 den = 27765945504.0 n = 375 59.80189059270543 den = 27914062500.0 n = 376 60.029347791781 den = 28062570496.0 n = 377 60.20155683655093 den = 28211469468.0 n = 378 58.8609628298419 den = 28360759392.0 n = 379 59.11627616305437 den = 28510440244.0 n = 380 59.812714952825246 den = 28660512000.0 n = 381 59.88539910152563 den = 28810974636.0 n = 382 59.35065979337504 den = 28961828128.0 n = 383 59.7399530901995 den = 29113072452.0 n = 384 59.55443882081457 den = 29264707584.0 n = 385 59.58789403661886 den = 29416733500.0 n = 386 59.898787845723525 den = 29569150176.0 n = 387 59.76050854871707 den = 29721957588.0 n = 388 59.634490983795985 den = 29875155712.0 n = 389 59.176433598627334 den = 30028744524.0 n = 390 59.644550333277074 den = 30182724000.0 n = 391 59.97887931451967 den = 30337094116.0 n = 392 59.65655002827193 den = 30491854848.0 n = 393 59.012662409716164 den = 30647006172.0 n = 394 59.702531627225234 den = 30802548064.0 n = 395 59.75191363989917 den = 30958480500.0 n = 396 59.728824024087686 den = 31114803456.0 n = 397 59.18111362041201 den = 31271516908.0 n = 398 59.29602192587235 den = 31428620832.0 n = 399 60.00465085063959 den = 31586115204.0 n = 400 59.61295594400783 den = 31744000000.0 n = 401 59.77701938527479 den = 31902275196.0 n = 402 59.60382530363614 den = 32060940768.0 n = 403 59.506694605213895 den = 32219996692.0 n = 404 59.53995801078681 den = 32379442944.0 n = 405 59.49370954743223 den = 32539279500.0 n = 406 59.456986856759386 den = 32699506336.0 n = 407 59.34949662883454 den = 32860123428.0 n = 408 59.73666736536252 den = 33021130752.0 n = 409 59.46824897103982 den = 33182528284.0 n = 410 59.781170825645944 den = 33344316000.0 n = 411 59.60517720137196 den = 33506493876.0 n = 412 60.07727141665936 den = 33669061888.0 n = 413 59.83437913697288 den = 33832020012.0 n = 414 59.63280095350534 den = 33995368224.0 n = 415 59.65089965621559 den = 34159106500.0 n = 416 59.4593474710006 den = 34323234816.0 n = 417 59.288541961316874 den = 34487753148.0 n = 418 59.3365244113309 den = 34652661472.0 n = 419 59.46120917349536 den = 34817959764.0 n = 420 59.140998987548606 den = 34983648000.0 n = 421 59.238146546391775 den = 35149726156.0 n = 422 59.28458300157441 den = 35316194208.0 n = 423 59.454881054023105 den = 35483052132.0 n = 424 59.85973799779052 den = 35650299904.0 n = 425 59.38062406793108 den = 35817937500.0 n = 426 59.47553973282732 den = 35985964896.0 n = 427 59.38694915588592 den = 36154382068.0 n = 428 59.3068255210787 den = 36323188992.0 n = 429 60.35968820132445 den = 36492385644.0 n = 430 59.62068093213026 den = 36661972000.0 n = 431 59.55252849885423 den = 36831948036.0 n = 432 59.484011746534385 den = 37002313728.0 n = 433 59.55617293383471 den = 37173069052.0 n = 434 59.099504941588364 den = 37344213984.0 n = 435 59.3725686353104 den = 37515748500.0 n = 436 59.30570647354505 den = 37687672576.0 n = 437 59.74358541156494 den = 37859986188.0 n = 438 59.786108511995046 den = 38032689312.0 n = 439 59.44906739300355 den = 38205781924.0 n = 440 59.35971217468514 den = 38379264000.0 n = 441 59.85992849994434 den = 38553135516.0 n = 442 59.30321487851687 den = 38727396448.0 n = 443 59.17104970219289 den = 38902046772.0 n = 444 59.520763147731955 den = 39077086464.0 n = 445 59.25473550651948 den = 39252515500.0 n = 446 59.78690905466861 den = 39428333856.0 n = 447 59.25730317563791 den = 39604541508.0 n = 448 59.32205230798782 den = 39781138432.0 n = 449 59.51043857387663 den = 39958124604.0 n = 450 59.3880809352717 den = 40135500000.0 n = 451 59.14246770716059 den = 40313264596.0 n = 452 58.627100151181864 den = 40491418368.0 n = 453 59.555529466460634 den = 40669961292.0 n = 454 59.62241766265189 den = 40848893344.0 n = 455 59.20702132355473 den = 41028214500.0 n = 456 59.80037110481938 den = 41207924736.0 n = 457 59.755640906504446 den = 41388024028.0 n = 458 59.47574402371651 den = 41568512352.0 n = 459 59.30238769765317 den = 41749389684.0 n = 460 59.32261260201031 den = 41930656000.0 n = 461 59.64291276701652 den = 42112311276.0 n = 462 59.73598400289343 den = 42294355488.0 n = 463 59.33463249616426 den = 42476788612.0 n = 464 59.092361674237566 den = 42659610624.0 n = 465 59.349405473273535 den = 42842821500.0 n = 466 59.308099842810755 den = 43026421216.0 n = 467 59.32126028912397 den = 43210409748.0 n = 468 59.15904355689941 den = 43394787072.0 n = 469 59.762657088356136 den = 43579553164.0 n = 470 59.570997060687375 den = 43764708000.0 n = 471 59.41501202825217 den = 43950251556.0 n = 472 59.68782038644443 den = 44136183808.0 n = 473 59.46671972498769 den = 44322504732.0 n = 474 59.544954232411904 den = 44509214304.0 n = 475 59.56625888339236 den = 44696312500.0 n = 476 59.392149992827456 den = 44883799296.0 n = 477 59.632600410685214 den = 45071674668.0 n = 478 59.709631168151724 den = 45259938592.0 n = 479 59.013265489478854 den = 45448591044.0 n = 480 59.77631008794547 den = 45637632000.0 n = 481 60.01905497429787 den = 45827061436.0 n = 482 59.0231584302389 den = 46016879328.0 n = 483 59.58396756969456 den = 46207085652.0 n = 484 59.303142789526675 den = 46397680384.0 n = 485 59.51915278247644 den = 46588663500.0 n = 486 59.44843098746196 den = 46780034976.0 n = 487 59.69156766596332 den = 46971794788.0 n = 488 59.41026649425778 den = 47163942912.0 n = 489 59.18637524647303 den = 47356479324.0 n = 490 59.48610354301897 den = 47549404000.0 n = 491 59.31218931271432 den = 47742716916.0 n = 492 59.794399207759405 den = 47936418048.0 n = 493 59.681071857028215 den = 48130507372.0 n = 494 59.493109810756636 den = 48324984864.0 n = 495 59.841780274098035 den = 48519850500.0 n = 496 59.679947867816765 den = 48715104256.0 n = 497 59.74734944884725 den = 48910746108.0 n = 498 59.610948374601215 den = 49106776032.0 n = 499 59.79887506055991 den = 49303194004.0 n = 500 59.50941647199659 den = 49500000000.0 n = 501 59.77182492547774 den = 49697193996.0 n = 502 59.60954846544749 den = 49894775968.0 n = 503 59.578641564338454 den = 50092745892.0 n = 504 59.77060496295441 den = 50291103744.0 n = 505 59.843541039745276 den = 50489849500.0 n = 506 59.7729344189375 den = 50688983136.0 n = 507 59.494895682039676 den = 50888504628.0 n = 508 59.75088361760843 den = 51088413952.0 n = 509 59.54063020758177 den = 51288711084.0 n = 510 59.934330746775224 den = 51489396000.0 n = 511 59.607687808984835 den = 51690468676.0 n = 512 59.23437069254792 den = 51891929088.0 n = 513 58.81438370730407 den = 52093777212.0 n = 514 59.37179060680024 den = 52296013024.0 n = 515 59.473232090279495 den = 52498636500.0 n = 516 59.81868265428711 den = 52701647616.0 n = 517 59.23359213887333 den = 52905046348.0 n = 518 59.15302686646171 den = 53108832672.0 n = 519 59.19375444188339 den = 53313006564.0 n = 520 59.5002620269339 den = 53517568000.0 n = 521 59.38537475233795 den = 53722516956.0 n = 522 59.675048160811734 den = 53927853408.0 n = 523 59.295178489320385 den = 54133577332.0 n = 524 59.2102319504413 den = 54339688704.0 n = 525 59.84151441170369 den = 54546187500.0 n = 526 59.55164619185599 den = 54753073696.0 n = 527 59.5594606573832 den = 54960347268.0 n = 528 59.6382962223744 den = 55168008192.0 n = 529 59.257579732754095 den = 55376056444.0 n = 530 59.53055966279733 den = 55584492000.0 n = 531 59.15925470106745 den = 55793314836.0 n = 532 59.125905206270986 den = 56002524928.0 n = 533 59.85928520212993 den = 56212122252.0 n = 534 59.36116234247698 den = 56422106784.0 n = 535 59.417049141477136 den = 56632478500.0 n = 536 59.54011454674564 den = 56843237376.0 n = 537 59.706095041935654 den = 57054383388.0 n = 538 59.69622516232029 den = 57265916512.0 n = 539 59.51018219727077 den = 57477836724.0 n = 540 59.617599939778955 den = 57690144000.0 n = 541 59.52160314091448 den = 57902838316.0 n = 542 59.140033033564094 den = 58115919648.0 n = 543 59.45152201316553 den = 58329387972.0 n = 544 59.41277786422522 den = 58543243264.0 n = 545 58.93841861645616 den = 58757485500.0 n = 546 59.16606534149947 den = 58972114656.0 n = 547 59.63388929283407 den = 59187130708.0 n = 548 59.89335780433238 den = 59402533632.0 n = 549 59.03977494531979 den = 59618323404.0 n = 550 59.63539337695128 den = 59834500000.0 n = 551 59.46384680598508 den = 60051063396.0 n = 552 59.45195346202419 den = 60268013568.0 n = 553 59.54067345884568 den = 60485350492.0 n = 554 58.94181093418232 den = 60703074144.0 n = 555 59.3297501877692 den = 60921184500.0 n = 556 59.50405845896987 den = 61139681536.0 n = 557 59.62791506980507 den = 61358565228.0 n = 558 59.32871601851031 den = 61577835552.0 n = 559 59.327960360292835 den = 61797492484.0 n = 560 59.83570052001579 den = 62017536000.0 n = 561 58.98284884421372 den = 62237966076.0 n = 562 59.11028293140504 den = 62458782688.0 n = 563 59.45094580043815 den = 62679985812.0 n = 564 59.322946542293145 den = 62901575424.0 n = 565 59.857911076495945 den = 63123551500.0 n = 566 59.70610478372443 den = 63345914016.0 n = 567 59.394409355893416 den = 63568662948.0 n = 568 59.09076654403943 den = 63791798272.0 n = 569 59.297572557389245 den = 64015319964.0 n = 570 59.24301537616067 den = 64239228000.0 n = 571 59.330815800140016 den = 64463522356.0 n = 572 59.113864569571035 den = 64688203008.0 n = 573 59.6072262779959 den = 64913269932.0 n = 574 59.57779848854395 den = 65138723104.0 n = 575 59.56709937068225 den = 65364562500.0 n = 576 58.91282414462633 den = 65590788096.0 n = 577 59.46648058541786 den = 65817399868.0 n = 578 59.670832898346 den = 66044397792.0 n = 579 59.376177670900375 den = 66271781844.0 n = 580 59.74576187958353 den = 66499552000.0 n = 581 59.43973271838748 den = 66727708236.0 n = 582 59.240715445708105 den = 66956250528.0 n = 583 59.14844890816732 den = 67185178852.0 n = 584 59.44154955914805 den = 67414493184.0 n = 585 59.303045724053135 den = 67644193500.0 n = 586 59.41884168290993 den = 67874279776.0 n = 587 60.01882008543169 den = 68104751988.0 n = 588 59.79392203258613 den = 68335610112.0 n = 589 59.44148528148566 den = 68566854124.0 n = 590 59.16987557738094 den = 68798484000.0 n = 591 59.56391982174949 den = 69030499716.0 n = 592 59.31648950452021 den = 69262901248.0 n = 593 59.593905685345796 den = 69495688572.0 n = 594 59.45604040511191 den = 69728861664.0 n = 595 59.29707659485652 den = 69962420500.0 n = 596 59.173792339216156 den = 70196365056.0 n = 597 59.12506972009244 den = 70430695308.0 n = 598 59.77889635142006 den = 70665411232.0 n = 599 59.41466371465625 den = 70900512804.0 n = 600 59.581427996756034 den = 71136000000.0 n = 601 59.71331079424458 den = 71371872796.0 n = 602 59.80073893870087 den = 71608131168.0 n = 603 59.421647753589184 den = 71844775092.0 n = 604 59.50096828024172 den = 72081804544.0 n = 605 59.52877601096157 den = 72319219500.0 n = 606 59.23997771100655 den = 72557019936.0 n = 607 59.017824909749685 den = 72795205828.0 n = 608 59.38366643382242 den = 73033777152.0 n = 609 59.03478235333089 den = 73272733884.0 n = 610 59.669685150463586 den = 73512076000.0 n = 611 58.74138887984092 den = 73751803476.0 n = 612 58.871663445219575 den = 73991916288.0 n = 613 58.72685962942203 den = 74232414412.0 n = 614 59.381478622759246 den = 74473297824.0 n = 615 59.36725882650946 den = 74714566500.0 n = 616 59.22496791852993 den = 74956220416.0 n = 617 59.25565394979758 den = 75198259548.0 n = 618 59.96723477963254 den = 75440683872.0 n = 619 59.39504328492934 den = 75683493364.0 n = 620 59.33804033426946 den = 75926688000.0 n = 621 59.46936086323095 den = 76170267756.0 n = 622 59.624684984969896 den = 76414232608.0 n = 623 59.209834977312795 den = 76658582532.0 n = 624 59.6858440522051 den = 76903317504.0 n = 625 59.12772162843695 den = 77148437500.0 n = 626 59.2486169229797 den = 77393942496.0 n = 627 59.250385498197694 den = 77639832468.0 n = 628 59.19245538210578 den = 77886107392.0 n = 629 59.43723859888044 den = 78132767244.0 n = 630 59.43172731689728 den = 78379812000.0 n = 631 59.627811599076686 den = 78627241636.0 n = 632 59.68643004053034 den = 78875056128.0 n = 633 59.27697136933319 den = 79123255452.0 n = 634 59.43273610286726 den = 79371839584.0 n = 635 59.54825155891538 den = 79620808500.0 n = 636 58.70515901440635 den = 79870162176.0 n = 637 59.60986841046796 den = 80119900588.0 n = 638 59.1776589772862 den = 80370023712.0 n = 639 59.96393107141207 den = 80620531524.0 n = 640 59.72234098695688 den = 80871424000.0 n = 641 59.268769330935214 den = 81122701116.0 n = 642 59.49610342378172 den = 81374362848.0 n = 643 59.550267195851085 den = 81626409172.0 n = 644 59.56816622607841 den = 81878840064.0 n = 645 59.11419745073835 den = 82131655500.0 n = 646 59.304936800295685 den = 82384855456.0 n = 647 59.322298083920785 den = 82638439908.0 n = 648 59.22093395250833 den = 82892408832.0 n = 649 59.5787736907179 den = 83146762204.0 n = 650 59.37014313531039 den = 83401500000.0 n = 651 58.54160611026061 den = 83656622196.0 n = 652 59.12031563524941 den = 83912128768.0 n = 653 59.23584089067398 den = 84168019692.0 n = 654 59.332114206076184 den = 84424294944.0 n = 655 59.27495497699969 den = 84680954500.0 n = 656 58.77995965372541 den = 84937998336.0 n = 657 59.10725840940689 den = 85195426428.0 n = 658 59.29386829316236 den = 85453238752.0 n = 659 59.531382950425716 den = 85711435284.0 n = 660 59.46331160332666 den = 85970016000.0 n = 661 59.204371660686334 den = 86228980876.0 n = 662 59.29096842894954 den = 86488329888.0 n = 663 59.321210158689915 den = 86748063012.0 n = 664 59.38593884832099 den = 87008180224.0 n = 665 59.56503902814815 den = 87268681500.0 n = 666 58.540581751411246 den = 87529566816.0 n = 667 59.41843879264767 den = 87790836148.0 n = 668 59.63925843532519 den = 88052489472.0 n = 669 58.87080978898335 den = 88314526764.0 n = 670 59.40455839872579 den = 88576948000.0 n = 671 59.05395176216349 den = 88839753156.0 n = 672 59.47865774735011 den = 89102942208.0 n = 673 59.49426001915109 den = 89366515132.0 n = 674 59.60674037640323 den = 89630471904.0 n = 675 59.08177022125088 den = 89894812500.0 n = 676 59.25454015848502 den = 90159536896.0 n = 677 59.48547035831716 den = 90424645068.0 n = 678 59.151317304064996 den = 90690136992.0 n = 679 59.04950720885191 den = 90956012644.0 n = 680 58.894917440423406 den = 91222272000.0 n = 681 59.18241751361194 den = 91488915036.0 n = 682 59.328610768687945 den = 91755941728.0 n = 683 59.69394865475526 den = 92023352052.0 n = 684 59.40179013121953 den = 92291145984.0 n = 685 59.41575198651834 den = 92559323500.0 n = 686 59.303412753138616 den = 92827884576.0 n = 687 59.35272704136586 den = 93096829188.0 n = 688 59.13960135823535 den = 93366157312.0 n = 689 59.51377476137666 den = 93635868924.0 n = 690 59.58410332260665 den = 93905964000.0 n = 691 59.292101136938335 den = 94176442516.0 n = 692 58.984685261891705 den = 94447304448.0 n = 693 59.26805947828233 den = 94718549772.0 n = 694 59.22137663393886 den = 94990178464.0 n = 695 58.792003701437935 den = 95262190500.0 n = 696 59.448212733068736 den = 95534585856.0 n = 697 58.94572437053467 den = 95807364508.0 n = 698 59.37620661385087 den = 96080526432.0 n = 699 59.00525844928167 den = 96354071604.0 n = 700 59.22085195787795 den = 96628000000.0 n = 701 59.155820356136665 den = 96902311596.0 n = 702 58.93301055088468 den = 97177006368.0 n = 703 59.44206395375361 den = 97452084292.0 n = 704 59.01830420315887 den = 97727545344.0 n = 705 59.45264821584197 den = 98003389500.0 n = 706 59.360634895016766 den = 98279616736.0 n = 707 59.24457825956735 den = 98556227028.0 n = 708 59.43363409070192 den = 98833220352.0 n = 709 59.26186695278975 den = 99110596684.0 n = 710 59.52335960290915 den = 99388356000.0 n = 711 59.307180071278395 den = 99666498276.0 n = 712 59.30856911102276 den = 99945023488.0 n = 713 59.079830707259546 den = 100223931612.0 n = 714 59.03822222545429 den = 100503222624.0 n = 715 58.95970019111895 den = 100782896500.0 n = 716 58.77991777228066 den = 101062953216.0 n = 717 59.06919507810468 den = 101343392748.0 n = 718 58.70675334387289 den = 101624215072.0 n = 719 59.227985670660466 den = 101905420164.0 n = 720 59.11812213124949 den = 102187008000.0 n = 721 59.44877132101386 den = 102468978556.0 n = 722 58.74873479940291 den = 102751331808.0 n = 723 59.235847599205556 den = 103034067732.0 n = 724 58.751131024713416 den = 103317186304.0 n = 725 59.38173952661383 den = 103600687500.0 n = 726 59.3489986145526 den = 103884571296.0 n = 727 59.21190461476454 den = 104168837668.0 n = 728 59.062989754578375 den = 104453486592.0 n = 729 59.299241661231534 den = 104738518044.0 n = 730 58.894164311954576 den = 105023932000.0 n = 731 59.06312822194791 den = 105309728436.0 n = 732 59.384840162101945 den = 105595907328.0 n = 733 58.996467000098505 den = 105882468652.0 n = 734 59.09089892613895 den = 106169412384.0 n = 735 58.63702782131629 den = 106456738500.0 n = 736 59.037094786301935 den = 106744446976.0 n = 737 59.331885698386216 den = 107032537788.0 n = 738 59.21975540390378 den = 107321010912.0 n = 739 59.461535356600095 den = 107609866324.0 n = 740 59.54166830269121 den = 107899104000.0 n = 741 59.235815021508216 den = 108188723916.0 n = 742 58.998977702663886 den = 108478726048.0 n = 743 58.7755931280772 den = 108769110372.0 n = 744 59.02659094097395 den = 109059876864.0 n = 745 58.897774437265156 den = 109351025500.0 n = 746 59.357333711270805 den = 109642556256.0 n = 747 58.93288047840782 den = 109934469108.0 n = 748 58.93930575191264 den = 110226764032.0 n = 749 58.89325465203596 den = 110519441004.0 n = 750 59.58868395590585 den = 110812500000.0 n = 751 59.28831399508496 den = 111105940996.0 n = 752 59.093636528111865 den = 111399763968.0 n = 753 59.12845739829286 den = 111693968892.0 n = 754 58.82715848376614 den = 111988555744.0 n = 755 59.61384459196122 den = 112283524500.0 n = 756 59.215811826840195 den = 112578875136.0 n = 757 59.27044856308963 den = 112874607628.0 n = 758 59.60434916463293 den = 113170721952.0 n = 759 59.08789579970477 den = 113467218084.0 n = 760 58.775580538657195 den = 113764096000.0 n = 761 58.71081386430949 den = 114061355676.0 n = 762 59.27818887733418 den = 114358997088.0 n = 763 58.64509106735608 den = 114657020212.0 n = 764 58.93884682281018 den = 114955425024.0 n = 765 59.459290194856194 den = 115254211500.0 n = 766 59.45393312016637 den = 115553379616.0 n = 767 59.043482559719564 den = 115852929348.0 n = 768 59.21252501180525 den = 116152860672.0 n = 769 58.77054398896875 den = 116453173564.0 n = 770 59.32975875078022 den = 116753868000.0 n = 771 59.30848720515668 den = 117054943956.0 n = 772 59.13782052806062 den = 117356401408.0 n = 773 58.721916377611045 den = 117658240332.0 n = 774 58.762681370730526 den = 117960460704.0 n = 775 58.94689174881156 den = 118263062500.0 n = 776 58.96528885112337 den = 118566045696.0 n = 777 58.95074002818904 den = 118869410268.0 n = 778 59.45998068674641 den = 119173156192.0 n = 779 58.98598831639374 den = 119477283444.0 n = 780 59.053748398289834 den = 119781792000.0 n = 781 59.00193659254107 den = 120086681836.0 n = 782 58.72992724154996 den = 120391952928.0 n = 783 58.751533759556374 den = 120697605252.0 n = 784 59.20043831853055 den = 121003638784.0 n = 785 58.9561622923673 den = 121310053500.0 n = 786 59.27516697164727 den = 121616849376.0 n = 787 58.832709260402346 den = 121924026388.0 n = 788 59.135239902031856 den = 122231584512.0 n = 789 58.73592888333237 den = 122539523724.0 n = 790 59.158131359955014 den = 122847844000.0 n = 791 59.06320549752725 den = 123156545316.0 n = 792 58.96685427849814 den = 123465627648.0 n = 793 59.248230547325385 den = 123775090972.0 n = 794 59.43827452870678 den = 124084935264.0 n = 795 58.86901425563968 den = 124395160500.0 n = 796 59.433735038035984 den = 124705766656.0 n = 797 59.00502945310778 den = 125016753708.0 n = 798 59.30173882792655 den = 125328121632.0 n = 799 59.08888387717647 den = 125639870404.0 n = 800 58.84813007111779 den = 125952000000.0 n = 801 59.50380835906436 den = 126264510396.0 n = 802 58.61279180108503 den = 126577401568.0 n = 803 59.261969489593376 den = 126890673492.0 n = 804 59.50179332961014 den = 127204326144.0 n = 805 58.878754114838834 den = 127518359500.0 n = 806 59.178510479952934 den = 127832773536.0 n = 807 59.35195624977467 den = 128147568228.0 n = 808 59.18237883361081 den = 128462743552.0 n = 809 58.73569175393746 den = 128778299484.0 n = 810 58.827348304257654 den = 129094236000.0 n = 811 59.03498326049209 den = 129410553076.0 n = 812 58.75109702343735 den = 129727250688.0 n = 813 59.44078303504572 den = 130044328812.0 n = 814 59.126373615571836 den = 130361787424.0 n = 815 59.25722552058232 den = 130679626500.0 n = 816 58.64091193648939 den = 130997846016.0 n = 817 58.94882484584071 den = 131316445948.0 n = 818 58.91940576515825 den = 131635426272.0 n = 819 58.769951255484884 den = 131954786964.0 n = 820 58.77204089665337 den = 132274528000.0 n = 821 58.868319589443665 den = 132594649356.0 n = 822 58.937389217572154 den = 132915151008.0 n = 823 58.62473483012095 den = 133236032932.0 n = 824 58.90089721692188 den = 133557295104.0 n = 825 59.19701002033576 den = 133878937500.0 n = 826 59.21163186740445 den = 134200960096.0 n = 827 59.169600307365855 den = 134523362868.0 n = 828 59.36620741807709 den = 134846145792.0 n = 829 59.05036497872243 den = 135169308844.0 n = 830 59.15974691209729 den = 135492852000.0 n = 831 58.943099294110674 den = 135816775236.0 n = 832 59.427412360437565 den = 136141078528.0 n = 833 59.049094420292086 den = 136465761852.0 n = 834 58.93245580776196 den = 136790825184.0 n = 835 58.84455557145907 den = 137116268500.0 n = 836 58.90340761460885 den = 137442091776.0 n = 837 59.19931171418731 den = 137768294988.0 n = 838 59.06586498997724 den = 138094878112.0 n = 839 59.420412415310366 den = 138421841124.0 n = 840 58.79933365243644 den = 138749184000.0 n = 841 59.359365954311116 den = 139076906716.0 n = 842 59.50672206897991 den = 139405009248.0 n = 843 59.43984378968857 den = 139733491572.0 n = 844 59.32934677476284 den = 140062353664.0 n = 845 58.68431311258543 den = 140391595500.0 n = 846 59.0090211383866 den = 140721217056.0 n = 847 59.38171389380872 den = 141051218308.0 n = 848 59.094702743579 den = 141381599232.0 n = 849 59.24792033779905 den = 141712359804.0 n = 850 58.87993864802687 den = 142043500000.0 n = 851 59.179679555819355 den = 142375019796.0 n = 852 59.517617414930626 den = 142706919168.0 n = 853 58.799892971047704 den = 143039198092.0 n = 854 59.66014788049176 den = 143371856544.0 n = 855 58.970933448321354 den = 143704894500.0 n = 856 58.722464737119985 den = 144038311936.0 n = 857 59.36174166528934 den = 144372108828.0 n = 858 59.010559346902795 den = 144706285152.0 n = 859 58.96375205808746 den = 145040840884.0 n = 860 59.209626156571176 den = 145375776000.0 n = 861 58.951227694251266 den = 145711090476.0 n = 862 59.225868080831155 den = 146046784288.0 n = 863 59.09852474379663 den = 146382857412.0 n = 864 59.012910158928605 den = 146719309824.0 n = 865 59.06001860976011 den = 147056141500.0 n = 866 58.85849098042638 den = 147393352416.0 n = 867 58.72143020512576 den = 147730942548.0 n = 868 59.212996636546656 den = 148068911872.0 n = 869 59.060464642449965 den = 148407260364.0 n = 870 59.50440650212437 den = 148745988000.0 n = 871 58.844741612875794 den = 149085094756.0 n = 872 59.333375277699936 den = 149424580608.0 n = 873 58.74191816026202 den = 149764445532.0 n = 874 59.298365521315574 den = 150104689504.0 n = 875 59.127564992286125 den = 150445312500.0 n = 876 59.1538327639142 den = 150786314496.0 n = 877 59.1373879849712 den = 151127695468.0 n = 878 59.1570268944201 den = 151469455392.0 n = 879 58.77668011494768 den = 151811594244.0 n = 880 59.39835002659453 den = 152154112000.0 n = 881 59.499969996073624 den = 152497008636.0 n = 882 59.06997604192035 den = 152840284128.0 n = 883 58.651898709176436 den = 153183938452.0 n = 884 58.56081251457526 den = 153527971584.0 n = 885 59.058421127037526 den = 153872383500.0 n = 886 59.029236024459415 den = 154217174176.0 n = 887 58.69335163395373 den = 154562343588.0 n = 888 59.11277549026351 den = 154907891712.0 n = 889 58.82258709425991 den = 155253818524.0 n = 890 58.88992494767675 den = 155600124000.0 n = 891 59.21712128324549 den = 155946808116.0 n = 892 59.11801703389252 den = 156293870848.0 n = 893 58.71988401928613 den = 156641312172.0 n = 894 59.122342051840505 den = 156989132064.0 n = 895 58.948689199584656 den = 157337330500.0 n = 896 58.879774880404966 den = 157685907456.0 n = 897 59.2729880664818 den = 158034862908.0 n = 898 59.27806907184555 den = 158384196832.0 n = 899 59.62410375805507 den = 158733909204.0 n = 900 59.110829843804176 den = 159084000000.0 n = 901 59.040645437533776 den = 159434469196.0 n = 902 58.729908074510995 den = 159785316768.0 n = 903 58.71152651317322 den = 160136542692.0 n = 904 58.88914261217316 den = 160488146944.0 n = 905 59.356040825322 den = 160840129500.0 n = 906 58.77622211975618 den = 161192490336.0 n = 907 59.45402942927619 den = 161545229428.0 n = 908 59.0785097933353 den = 161898346752.0 n = 909 59.46041910243825 den = 162251842284.0 n = 910 59.07820586534766 den = 162605716000.0 n = 911 59.05203403098814 den = 162959967876.0 n = 912 58.915591943801296 den = 163314597888.0 n = 913 59.156970534732075 den = 163669606012.0 n = 914 59.28366093990798 den = 164024992224.0 n = 915 58.913662215301784 den = 164380756500.0 n = 916 59.22313880157011 den = 164736898816.0 n = 917 59.22109736240597 den = 165093419148.0 n = 918 59.074672513085666 den = 165450317472.0 n = 919 58.703864516523474 den = 165807593764.0 n = 920 59.09016890659942 den = 166165248000.0 n = 921 58.984427885568145 den = 166523280156.0 n = 922 59.029935609628296 den = 166881690208.0 n = 923 58.959174334231434 den = 167240478132.0 n = 924 59.192098692843786 den = 167599643904.0 n = 925 58.94234861027314 den = 167959187500.0 n = 926 58.88473926976248 den = 168319108896.0 n = 927 59.22074520410241 den = 168679408068.0 n = 928 59.42367101097533 den = 169040084992.0 n = 929 59.71823597362475 den = 169401139644.0 n = 930 59.422229384176234 den = 169762572000.0 n = 931 58.9342786185817 den = 170124382036.0 n = 932 58.73067270823937 den = 170486569728.0 n = 933 58.86184750855036 den = 170849135052.0 n = 934 59.14646943012081 den = 171212077984.0 n = 935 58.88716555033321 den = 171575398500.0 n = 936 59.12020124915753 den = 171939096576.0 n = 937 59.19131358346887 den = 172303172188.0 n = 938 59.03775275988765 den = 172667625312.0 n = 939 58.84936120977108 den = 173032455924.0 n = 940 58.822521766459175 den = 173397664000.0 n = 941 58.509734154590404 den = 173763249516.0 n = 942 59.12644132220286 den = 174129212448.0 n = 943 58.99166189083839 den = 174495552772.0 n = 944 59.06199143305264 den = 174862270464.0 n = 945 58.93638909548824 den = 175229365500.0 n = 946 59.30135532002292 den = 175596837856.0 n = 947 58.98483622734241 den = 175964687508.0 n = 948 59.03333519855839 den = 176332914432.0 n = 949 59.14709843795966 den = 176701518604.0 n = 950 58.99396886440936 den = 177070500000.0 n = 951 58.51676066381626 den = 177439858596.0 n = 952 59.19809084104507 den = 177809594368.0 n = 953 59.15941128692583 den = 178179707292.0 n = 954 59.221746613101516 den = 178550197344.0 n = 955 59.22007806597797 den = 178921064500.0 n = 956 58.60696534666364 den = 179292308736.0 n = 957 59.20552637695273 den = 179663930028.0 n = 958 59.35093872319165 den = 180035928352.0 n = 959 58.86621695237088 den = 180408303684.0 n = 960 59.01579836209181 den = 180781056000.0 n = 961 58.818786946922806 den = 181154185276.0 n = 962 59.03256933907608 den = 181527691488.0 n = 963 58.90623117495654 den = 181901574612.0 n = 964 59.30367839654183 den = 182275834624.0 n = 965 59.00305578774152 den = 182650471500.0 n = 966 58.880302516855764 den = 183025485216.0 n = 967 58.84883260473687 den = 183400875748.0 n = 968 58.781997072061436 den = 183776643072.0 n = 969 58.95068391847448 den = 184152787164.0 n = 970 59.02650229453474 den = 184529308000.0 n = 971 59.71960165149488 den = 184906205556.0 n = 972 59.15783432947543 den = 185283479808.0 n = 973 58.8492361609694 den = 185661130732.0 n = 974 59.21800024229112 den = 186039158304.0 n = 975 58.702269786349696 den = 186417562500.0 n = 976 58.93914087835524 den = 186796343296.0 n = 977 58.550664764232394 den = 187175500668.0 n = 978 58.962981276772645 den = 187555034592.0 n = 979 58.93725797237875 den = 187934945044.0 n = 980 59.251685458870945 den = 188315232000.0 n = 981 58.72407629496243 den = 188695895436.0 n = 982 58.902510524895725 den = 189076935328.0 n = 983 59.342077260336254 den = 189458351652.0 n = 984 58.85953894718217 den = 189840144384.0 n = 985 58.47697448863026 den = 190222313500.0 n = 986 59.06740830919895 den = 190604858976.0 n = 987 59.113781528588746 den = 190987780788.0 n = 988 58.833489420622065 den = 191371078912.0 n = 989 59.328128720160954 den = 191754753324.0 n = 990 58.924207002254036 den = 192138804000.0 n = 991 58.98417860425183 den = 192523230916.0 n = 992 58.725433655560686 den = 192908034048.0 n = 993 59.06432892945117 den = 193293213372.0 n = 994 58.47577127882975 den = 193678768864.0 n = 995 59.0183956974048 den = 194064700500.0 n = 996 59.01885668947513 den = 194451008256.0 n = 997 58.78658243257912 den = 194837692108.0 n = 998 59.06446150712608 den = 195224752032.0 n = 999 58.495006726528715 den = 195612188004.0 n = 1000 59.25473212968218 den = 196000000000.0 n = 1001 59.132594505306876 den = 196388187996.0 n = 1002 59.202935786401746 den = 196776751968.0 n = 1003 59.220424520339506 den = 197165691892.0 n = 1004 58.86847033796526 den = 197555007744.0 n = 1005 58.96610426294535 den = 197944699500.0 n = 1006 59.00027440479407 den = 198334767136.0 n = 1007 59.13561072068078 den = 198725210628.0 n = 1008 59.004826302943776 den = 199116029952.0 n = 1009 59.069507606606734 den = 199507225084.0 n = 1010 59.054532407593506 den = 199898796000.0 n = 1011 58.85287424668039 den = 200290742676.0 n = 1012 58.86659438082937 den = 200683065088.0 n = 1013 59.112126676273725 den = 201075763212.0 n = 1014 58.813938337653035 den = 201468837024.0 n = 1015 58.65771633393121 den = 201862286500.0 n = 1016 58.88287055092588 den = 202256111616.0 n = 1017 58.96548212576047 den = 202650312348.0 n = 1018 59.094934413319535 den = 203044888672.0 n = 1019 58.94036920808355 den = 203439840564.0 n = 1020 57.93995091833662 den = 203835168000.0 n = 1021 58.70883758524954 den = 204230870956.0 n = 1022 58.650066723239135 den = 204626949408.0 n = 1023 58.622754234709404 den = 205023403332.0 n = 1024 58.75635633560646 den = 205420232704.0 n = 1025 59.141521533873025 den = 205817437500.0 n = 1026 59.41808412348788 den = 206215017696.0 n = 1027 59.06882576091844 den = 206612973268.0 n = 1028 59.0881706089214 den = 207011304192.0 n = 1029 58.61213631876682 den = 207410010444.0 n = 1030 58.9611553036225 den = 207809092000.0 n = 1031 59.07947441505237 den = 208208548836.0 n = 1032 59.02093269611551 den = 208608380928.0 n = 1033 58.47265972979148 den = 209008588252.0 n = 1034 58.800026204285935 den = 209409170784.0 n = 1035 58.83983395377903 den = 209810128500.0 n = 1036 58.99685648058684 den = 210211461376.0 n = 1037 58.8927933640413 den = 210613169388.0 n = 1038 59.20847986415166 den = 211015252512.0 n = 1039 58.76476314891015 den = 211417710724.0 n = 1040 59.38542139384103 den = 211820544000.0 n = 1041 58.86294930816975 den = 212223752316.0 n = 1042 58.63980178150174 den = 212627335648.0 n = 1043 59.23950549173817 den = 213031293972.0 n = 1044 58.77302481735312 den = 213435627264.0 n = 1045 58.84657515832714 den = 213840335500.0 n = 1046 59.025131828432784 den = 214245418656.0 n = 1047 58.97244251593069 den = 214650876708.0 n = 1048 58.738055884713596 den = 215056709632.0 n = 1049 59.14423714183497 den = 215462917404.0 n = 1050 59.46129447148609 den = 215869500000.0 n = 1051 58.73223771278481 den = 216276457396.0 n = 1052 59.059592241095835 den = 216683789568.0 n = 1053 59.13845689847292 den = 217091496492.0 n = 1054 58.68298236479126 den = 217499578144.0 n = 1055 58.685475646063125 den = 217908034500.0 n = 1056 59.211310478965665 den = 218316865536.0 n = 1057 58.730127593429565 den = 218726071228.0 n = 1058 59.02930102882023 den = 219135651552.0 n = 1059 58.583144896673396 den = 219545606484.0 n = 1060 58.99315458588185 den = 219955936000.0 n = 1061 58.74052236376473 den = 220366640076.0 n = 1062 58.66279077185874 den = 220777718688.0 n = 1063 58.55943825480276 den = 221189171812.0 n = 1064 58.875588993186945 den = 221600999424.0 n = 1065 58.815773516870905 den = 222013201500.0 n = 1066 58.941672961240286 den = 222425778016.0 n = 1067 59.25677756304668 den = 222838728948.0 n = 1068 59.358131334307025 den = 223252054272.0 n = 1069 58.82766654166426 den = 223665753964.0 n = 1070 58.97330978981478 den = 224079828000.0 n = 1071 58.950006864447005 den = 224494276356.0 n = 1072 58.93276059363728 den = 224909099008.0 n = 1073 59.00666414680578 den = 225324295932.0 n = 1074 59.00400383192984 den = 225739867104.0 n = 1075 58.88249641264087 den = 226155812500.0 n = 1076 59.16522905312268 den = 226572132096.0 n = 1077 58.845877982309474 den = 226988825868.0 n = 1078 59.182147971883346 den = 227405893792.0 n = 1079 59.231842707628495 den = 227823335844.0 n = 1080 58.76320082563842 den = 228241152000.0 n = 1081 58.44656314495689 den = 228659342236.0 n = 1082 58.94071831881802 den = 229077906528.0 n = 1083 59.097281511300224 den = 229496844852.0 n = 1084 58.85370646392076 den = 229916157184.0 n = 1085 58.58087058830443 den = 230335843500.0 n = 1086 58.904650217752994 den = 230755903776.0 n = 1087 58.699655985700375 den = 231176337988.0 n = 1088 58.94178826217919 den = 231597146112.0 n = 1089 58.613942951834915 den = 232018328124.0 n = 1090 59.272980732756665 den = 232439884000.0 n = 1091 58.74133596058573 den = 232861813716.0 n = 1092 59.161707449447555 den = 233284117248.0 n = 1093 58.79897118243516 den = 233706794572.0 n = 1094 59.16843761871507 den = 234129845664.0 n = 1095 58.88311120790028 den = 234553270500.0 n = 1096 58.68588637476638 den = 234977069056.0 n = 1097 59.11534094135749 den = 235401241308.0 n = 1098 58.694410636015085 den = 235825787232.0 n = 1099 58.93809299315276 den = 236250706804.0 n = 1100 58.89878014661781 den = 236676000000.0 n = 1101 59.11730058962527 den = 237101666796.0 n = 1102 58.58482744818667 den = 237527707168.0 n = 1103 58.91736910138416 den = 237954121092.0 n = 1104 58.514865833118265 den = 238380908544.0 n = 1105 58.878611867474774 den = 238808069500.0 n = 1106 58.690474865898814 den = 239235603936.0 n = 1107 58.736783835431744 den = 239663511828.0 n = 1108 59.15211280490872 den = 240091793152.0 n = 1109 58.74390691273986 den = 240520447884.0 n = 1110 58.89511172996654 den = 240949476000.0 n = 1111 59.10370835596047 den = 241378877476.0 n = 1112 58.729742970133046 den = 241808652288.0 n = 1113 58.45542037242297 den = 242238800412.0 n = 1114 58.46719046480673 den = 242669321824.0 n = 1115 59.28825268932474 den = 243100216500.0 n = 1116 59.321602745383544 den = 243531484416.0 n = 1117 59.08207261458009 den = 243963125548.0 n = 1118 58.68595060209052 den = 244395139872.0 n = 1119 59.0836523369576 den = 244827527364.0 n = 1120 58.6587133997431 den = 245260288000.0 n = 1121 59.03119373236047 den = 245693421756.0 n = 1122 58.68188888642063 den = 246126928608.0 n = 1123 58.855998125536956 den = 246560808532.0 n = 1124 59.32979463187475 den = 246995061504.0 n = 1125 58.82074909529497 den = 247429687500.0 n = 1126 59.03049638392643 den = 247864686496.0 n = 1127 58.68110835999129 den = 248300058468.0 n = 1128 58.91952719407536 den = 248735803392.0 n = 1129 58.614839112054014 den = 249171921244.0 n = 1130 58.65607421190605 den = 249608412000.0 n = 1131 58.83698940364952 den = 250045275636.0 n = 1132 58.20475059338239 den = 250482512128.0 n = 1133 59.13020145267404 den = 250920121452.0 n = 1134 59.2681911391237 den = 251358103584.0 n = 1135 58.58595101997885 den = 251796458500.0 n = 1136 58.66566441697494 den = 252235186176.0 n = 1137 58.52750123105885 den = 252674286588.0 n = 1138 59.402519007727996 den = 253113759712.0 n = 1139 58.98330460644126 den = 253553605524.0 n = 1140 58.94313809376339 den = 253993824000.0 n = 1141 58.83689186463293 den = 254434415116.0 n = 1142 58.974075485556945 den = 254875378848.0 n = 1143 58.87313814726365 den = 255316715172.0 n = 1144 58.923385993211106 den = 255758424064.0 n = 1145 58.89339124741358 den = 256200505500.0 n = 1146 59.0126160386819 den = 256642959456.0 n = 1147 58.72692605512579 den = 257085785908.0 n = 1148 58.63092319857426 den = 257528984832.0 n = 1149 58.504901896919165 den = 257972556204.0 n = 1150 58.88308738355523 den = 258416500000.0 n = 1151 58.44572664483303 den = 258860816196.0 n = 1152 58.73487183269992 den = 259305504768.0 n = 1153 59.08224621574011 den = 259750565692.0 n = 1154 58.87045903310943 den = 260195998944.0 n = 1155 58.4890104549525 den = 260641804500.0 n = 1156 58.7741482264919 den = 261087982336.0 n = 1157 58.97829856994902 den = 261534532428.0 n = 1158 58.54986007333375 den = 261981454752.0 n = 1159 58.81638531679679 den = 262428749284.0 n = 1160 59.15188280328857 den = 262876416000.0 n = 1161 58.754610091731365 den = 263324454876.0 n = 1162 59.10332741585414 den = 263772865888.0 n = 1163 58.9278133858095 den = 264221649012.0 n = 1164 58.931284587100336 den = 264670804224.0 n = 1165 58.743367062125394 den = 265120331500.0 n = 1166 58.49513932525094 den = 265570230816.0 n = 1167 58.6756915482647 den = 266020502148.0 n = 1168 58.72988434644792 den = 266471145472.0 n = 1169 58.38668330448238 den = 266922160764.0 n = 1170 58.56291969768243 den = 267373548000.0 n = 1171 58.880997744530205 den = 267825307156.0 n = 1172 58.60752577193024 den = 268277438208.0 n = 1173 58.57503028875095 den = 268729941132.0 n = 1174 58.78779305087166 den = 269182815904.0 n = 1175 58.73548529878952 den = 269636062500.0 n = 1176 58.682621440723025 den = 270089680896.0 n = 1177 58.48680099922969 den = 270543671068.0 n = 1178 58.726340437462106 den = 270998032992.0 n = 1179 58.67801755405839 den = 271452766644.0 n = 1180 58.6677552441637 den = 271907872000.0 n = 1181 58.65351959714486 den = 272363349036.0 n = 1182 58.83188167125282 den = 272819197728.0 n = 1183 58.43247726361285 den = 273275418052.0 n = 1184 58.91422023119714 den = 273732009984.0 n = 1185 58.4502523411136 den = 274188973500.0 n = 1186 58.60672243294579 den = 274646308576.0 n = 1187 58.628760998113854 den = 275104015188.0 n = 1188 58.59279408727768 den = 275562093312.0 n = 1189 58.821881856856045 den = 276020542924.0 n = 1190 58.76889179076043 den = 276479364000.0 n = 1191 58.86336308347792 den = 276938556516.0 n = 1192 58.95885998791359 den = 277398120448.0 n = 1193 58.9668115655306 den = 277858055772.0 n = 1194 58.80777250411199 den = 278318362464.0 n = 1195 58.94180476562098 den = 278779040500.0 n = 1196 59.02095091370009 den = 279240089856.0 n = 1197 59.299955063731836 den = 279701510508.0 n = 1198 59.10330854504965 den = 280163302432.0 n = 1199 58.74964473628417 den = 280625465604.0 n = 1200 58.997920108258356 den = 281088000000.0 n = 1201 59.159085172216216 den = 281550905596.0 n = 1202 58.8303236602801 den = 282014182368.0 n = 1203 58.60263926019633 den = 282477830292.0 n = 1204 58.47030663240199 den = 282941849344.0 n = 1205 58.42819980602016 den = 283406239500.0 n = 1206 58.58393895033997 den = 283871000736.0 n = 1207 58.58478072842434 den = 284336133028.0 n = 1208 58.831029994416554 den = 284801636352.0 n = 1209 58.570114506196 den = 285267510684.0 n = 1210 59.07082594460043 den = 285733756000.0 n = 1211 59.12078816817315 den = 286200372276.0 n = 1212 58.59073049722487 den = 286667359488.0 n = 1213 58.93806552294412 den = 287134717612.0 n = 1214 58.84609052841508 den = 287602446624.0 n = 1215 58.821379764043265 den = 288070546500.0 n = 1216 58.65242617102012 den = 288539017216.0 n = 1217 58.983946405289096 den = 289007858748.0 n = 1218 59.27741940303654 den = 289477071072.0 n = 1219 58.52342899603907 den = 289946654164.0 n = 1220 58.10997249318593 den = 290416608000.0 n = 1221 57.90977499983195 den = 290886932556.0 n = 1222 58.76574985285447 den = 291357627808.0 n = 1223 58.78354561496302 den = 291828693732.0 n = 1224 58.51159255708287 den = 292300130304.0 n = 1225 59.17174273442166 den = 292771937500.0 n = 1226 58.83942527224179 den = 293244115296.0 n = 1227 58.653983064796954 den = 293716663668.0 n = 1228 58.33469197048424 den = 294189582592.0 n = 1229 58.725767725419566 den = 294662872044.0 n = 1230 58.47475473442578 den = 295136532000.0 n = 1231 58.72979552400119 den = 295610562436.0 n = 1232 58.73117852801395 den = 296084963328.0 n = 1233 58.43753358948787 den = 296559734652.0 n = 1234 58.624836991416714 den = 297034876384.0 n = 1235 58.73148537619798 den = 297510388500.0 n = 1236 58.78662527605009 den = 297986270976.0 n = 1237 58.59920864231651 den = 298462523788.0 n = 1238 58.630475642979036 den = 298939146912.0 n = 1239 58.48053319670315 den = 299416140324.0 n = 1240 58.55733404111943 den = 299893504000.0 n = 1241 58.91804431998238 den = 300371237916.0 n = 1242 58.92129948694159 den = 300849342048.0 n = 1243 58.97659970640156 den = 301327816372.0 n = 1244 59.043190966257114 den = 301806660864.0 n = 1245 58.99392060182028 den = 302285875500.0 n = 1246 58.86435056801448 den = 302765460256.0 n = 1247 58.824395758255626 den = 303245415108.0 n = 1248 59.04429150772573 den = 303725740032.0 n = 1249 58.6443457370928 den = 304206435004.0 n = 1250 58.625978596128554 den = 304687500000.0 n = 1251 58.601335351237815 den = 305168934996.0 n = 1252 58.88668007949172 den = 305650739968.0 n = 1253 59.246810127087706 den = 306132914892.0 n = 1254 58.727571872964994 den = 306615459744.0 n = 1255 58.60630979971653 den = 307098374500.0 n = 1256 58.29927647081522 den = 307581659136.0 n = 1257 58.43909985854006 den = 308065313628.0 n = 1258 58.3681445429252 den = 308549337952.0 n = 1259 58.90760218777439 den = 309033732084.0 n = 1260 58.60514754717282 den = 309518496000.0 n = 1261 59.06044006700522 den = 310003629676.0 n = 1262 58.543710530376984 den = 310489133088.0 n = 1263 58.612509933034985 den = 310975006212.0 n = 1264 58.39573925271111 den = 311461249024.0 n = 1265 58.933861247411436 den = 311947861500.0 n = 1266 58.856420624117135 den = 312434843616.0 n = 1267 59.307230436591915 den = 312922195348.0 n = 1268 58.65290570817536 den = 313409916672.0 n = 1269 58.99600843065044 den = 313898007564.0 n = 1270 58.824644537310505 den = 314386468000.0 n = 1271 58.88774695303326 den = 314875297956.0 n = 1272 58.81507983069114 den = 315364497408.0 n = 1273 58.926864562793654 den = 315854066332.0 n = 1274 58.623603905529095 den = 316344004704.0 n = 1275 58.79872111451409 den = 316834312500.0 n = 1276 59.27765354972912 den = 317324989696.0 n = 1277 58.85729540948992 den = 317816036268.0 n = 1278 58.46758704174374 den = 318307452192.0 n = 1279 58.8732995066179 den = 318799237444.0 n = 1280 58.9163213514318 den = 319291392000.0 n = 1281 58.95483758803576 den = 319783915836.0 n = 1282 58.79370415372097 den = 320276808928.0 n = 1283 59.031478241216504 den = 320770071252.0 n = 1284 58.78496920282682 den = 321263702784.0 n = 1285 58.768242810871975 den = 321757703500.0 n = 1286 59.02301759450678 den = 322252073376.0 n = 1287 58.4271316234083 den = 322746812388.0 n = 1288 58.711953663148506 den = 323241920512.0 n = 1289 58.64161482342603 den = 323737397724.0 n = 1290 58.86050593403385 den = 324233244000.0 n = 1291 58.46877125537441 den = 324729459316.0 n = 1292 58.22729097805466 den = 325226043648.0 n = 1293 57.686862658819855 den = 325722996972.0 n = 1294 58.53387697253457 den = 326220319264.0 n = 1295 58.447912294982935 den = 326718010500.0 n = 1296 58.761374739360676 den = 327216070656.0 n = 1297 58.35560322482845 den = 327714499708.0 n = 1298 58.89567733457935 den = 328213297632.0 n = 1299 58.525340851659706 den = 328712464404.0 n = 1300 58.69116917751565 den = 329212000000.0 n = 1301 58.544484531871575 den = 329711904396.0 n = 1302 58.659610119976634 den = 330212177568.0 n = 1303 58.47622928035983 den = 330712819492.0 n = 1304 58.80038460301748 den = 331213830144.0 n = 1305 58.678189233693416 den = 331715209500.0 n = 1306 58.747092254900814 den = 332216957536.0 n = 1307 58.543890119571415 den = 332719074228.0 n = 1308 58.031575039603396 den = 333221559552.0 n = 1309 58.47151146991034 den = 333724413484.0 n = 1310 58.6062340699381 den = 334227636000.0 n = 1311 58.81220594089722 den = 334731227076.0 n = 1312 58.899923106199985 den = 335235186688.0 n = 1313 58.48353023332736 den = 335739514812.0 n = 1314 58.63129581877753 den = 336244211424.0 n = 1315 58.48206651734653 den = 336749276500.0 n = 1316 58.917365331848494 den = 337254710016.0 n = 1317 58.55960389310131 den = 337760511948.0 n = 1318 58.529399983094024 den = 338266682272.0 n = 1319 58.73873049481238 den = 338773220964.0 n = 1320 58.82666609121312 den = 339280128000.0 n = 1321 58.66568772850807 den = 339787403356.0 n = 1322 58.42169288239754 den = 340295047008.0 n = 1323 58.49800599084749 den = 340803058932.0 n = 1324 58.47319042321601 den = 341311439104.0 n = 1325 58.90722313041889 den = 341820187500.0 n = 1326 58.76393748597767 den = 342329304096.0 n = 1327 58.68509559798419 den = 342838788868.0 n = 1328 58.51817651919745 den = 343348641792.0 n = 1329 58.845929813045 den = 343858862844.0 n = 1330 58.394280975329735 den = 344369452000.0 n = 1331 58.9107949227774 den = 344880409236.0 n = 1332 58.4151060105134 den = 345391734528.0 n = 1333 58.53353869970899 den = 345903427852.0 n = 1334 58.55997123093075 den = 346415489184.0 n = 1335 58.69232261292305 den = 346927918500.0 n = 1336 58.017744938564384 den = 347440715776.0 n = 1337 58.656990974678585 den = 347953880988.0 n = 1338 58.72407926356601 den = 348467414112.0 n = 1339 58.85706200837144 den = 348981315124.0 n = 1340 57.9619662898786 den = 349495584000.0 n = 1341 58.40797847697689 den = 350010220716.0 n = 1342 58.74400911970911 den = 350525225248.0 n = 1343 58.61770039992881 den = 351040597572.0 n = 1344 58.67843145564254 den = 351556337664.0 n = 1345 58.638254318657864 den = 352072445500.0 n = 1346 58.49798602092497 den = 352588921056.0 n = 1347 58.53553057373384 den = 353105764308.0 n = 1348 58.366336125239854 den = 353622975232.0 n = 1349 58.37628675525767 den = 354140553804.0 n = 1350 58.2846154049673 den = 354658500000.0 n = 1351 58.50196694810516 den = 355176813796.0 n = 1352 58.572092902529015 den = 355695495168.0 n = 1353 58.6449176923729 den = 356214544092.0 n = 1354 58.87858324481216 den = 356733960544.0 n = 1355 58.63127740736859 den = 357253744500.0 n = 1356 58.89493350928757 den = 357773895936.0 n = 1357 58.7171050872606 den = 358294414828.0 n = 1358 58.862270794320146 den = 358815301152.0 n = 1359 58.66041874568152 den = 359336554884.0 n = 1360 59.032332733624216 den = 359858176000.0 n = 1361 58.74057247225651 den = 360380164476.0 n = 1362 58.886018355142745 den = 360902520288.0 n = 1363 58.32011199617401 den = 361425243412.0 n = 1364 58.60228486053671 den = 361948333824.0 n = 1365 58.723127697035245 den = 362471791500.0 n = 1366 58.38211566852862 den = 362995616416.0 n = 1367 58.30353854468386 den = 363519808548.0 n = 1368 58.37858515930636 den = 364044367872.0 n = 1369 58.471045424969596 den = 364569294364.0 n = 1370 58.81923606890344 den = 365094588000.0 n = 1371 58.02174119755139 den = 365620248756.0 n = 1372 58.16624925461374 den = 366146276608.0 n = 1373 58.618157307818635 den = 366672671532.0 n = 1374 58.323029595336656 den = 367199433504.0 n = 1375 58.44617327485416 den = 367726562500.0 n = 1376 59.055655499759254 den = 368254058496.0 n = 1377 59.001922570916065 den = 368781921468.0 n = 1378 58.40922977058849 den = 369310151392.0 n = 1379 58.533203139388306 den = 369838748244.0 n = 1380 58.46623947753962 den = 370367712000.0 n = 1381 58.5292884609983 den = 370897042636.0 n = 1382 58.56603245612568 den = 371426740128.0 n = 1383 58.27015763603122 den = 371956804452.0 n = 1384 58.91730957219516 den = 372487235584.0 n = 1385 58.59379138721822 den = 373018033500.0 n = 1386 58.622296779487115 den = 373549198176.0 n = 1387 58.65326594598383 den = 374080729588.0 n = 1388 58.254237992221825 den = 374612627712.0 n = 1389 58.55199037172472 den = 375144892524.0 n = 1390 58.6073730572939 den = 375677524000.0 n = 1391 58.35986345991977 den = 376210522116.0 n = 1392 58.324359776699 den = 376743886848.0 n = 1393 58.391820986040045 den = 377277618172.0 n = 1394 58.84131347272765 den = 377811716064.0 n = 1395 58.68509643085241 den = 378346180500.0 n = 1396 58.48547509985374 den = 378881011456.0 n = 1397 58.80504339286597 den = 379416208908.0 n = 1398 59.06134111973546 den = 379951772832.0 n = 1399 58.79261906906247 den = 380487703204.0 n = 1400 58.76067704457514 den = 381024000000.0 n = 1401 58.81426437832086 den = 381560663196.0 n = 1402 58.91391325971813 den = 382097692768.0 n = 1403 58.729648745488234 den = 382635088692.0 n = 1404 58.864073828084 den = 383172850944.0 n = 1405 58.3809340225711 den = 383710979500.0 n = 1406 58.200443127511704 den = 384249474336.0 n = 1407 58.657600202322776 den = 384788335428.0 n = 1408 58.2173271699897 den = 385327562752.0 n = 1409 58.518368693895596 den = 385867156284.0 n = 1410 58.53250006944928 den = 386407116000.0 n = 1411 58.52758260781134 den = 386947441876.0 n = 1412 58.43974635524544 den = 387488133888.0 n = 1413 58.629401021647986 den = 388029192012.0 n = 1414 58.44669901689607 den = 388570616224.0 n = 1415 58.52705271113353 den = 389112406500.0 n = 1416 58.87434540433804 den = 389654562816.0 n = 1417 58.353290672796604 den = 390197085148.0 n = 1418 58.51707333678905 den = 390739973472.0 n = 1419 58.615365637481865 den = 391283227764.0 n = 1420 58.13154467112901 den = 391826848000.0 n = 1421 58.31663806723291 den = 392370834156.0 n = 1422 58.70642736210095 den = 392915186208.0 n = 1423 58.60482085383879 den = 393459904132.0 n = 1424 58.248789279423534 den = 394004987904.0 n = 1425 58.282971932693165 den = 394550437500.0 n = 1426 58.60133919248794 den = 395096252896.0 n = 1427 58.62216708913392 den = 395642434068.0 n = 1428 58.31918886359223 den = 396188980992.0 n = 1429 58.42989583538222 den = 396735893644.0 n = 1430 58.23173662279933 den = 397283172000.0 n = 1431 58.40114333243702 den = 397830816036.0 n = 1432 58.64718363813523 den = 398378825728.0 n = 1433 58.44937635684156 den = 398927201052.0 n = 1434 58.40832761089722 den = 399475941984.0 n = 1435 58.16530737006434 den = 400025048500.0 n = 1436 58.690777192206795 den = 400574520576.0 n = 1437 58.561741656632044 den = 401124358188.0 n = 1438 58.3133755349996 den = 401674561312.0 n = 1439 58.57371314807018 den = 402225129924.0 n = 1440 58.52651547461479 den = 402776064000.0 n = 1441 58.56614067895841 den = 403327363516.0 n = 1442 58.0708333606395 den = 403879028448.0 n = 1443 58.030036134645684 den = 404431058772.0 n = 1444 58.465175470722315 den = 404983454464.0 n = 1445 58.534060305844115 den = 405536215500.0 n = 1446 58.2101920377338 den = 406089341856.0 n = 1447 58.673795333559 den = 406642833508.0 n = 1448 58.2645993622215 den = 407196690432.0 n = 1449 58.162976556920505 den = 407750912604.0 n = 1450 58.74745422895274 den = 408305500000.0 n = 1451 58.26637723795254 den = 408860452596.0 n = 1452 58.412948000750156 den = 409415770368.0 n = 1453 58.256241304159204 den = 409971453292.0 n = 1454 58.19739796512473 den = 410527501344.0 n = 1455 58.107925547277716 den = 411083914500.0 n = 1456 58.55319207839439 den = 411640692736.0 n = 1457 58.67179145860094 den = 412197836028.0 n = 1458 58.57518202359254 den = 412755344352.0 n = 1459 58.35291129236365 den = 413313217684.0 n = 1460 58.695158007543895 den = 413871456000.0 n = 1461 57.77620511970443 den = 414430059276.0 n = 1462 57.92984569235354 den = 414989027488.0 n = 1463 58.57545205936489 den = 415548360612.0 n = 1464 58.23375739987635 den = 416108058624.0 n = 1465 58.72102560545524 den = 416668121500.0 n = 1466 58.51712512235549 den = 417228549216.0 n = 1467 59.08984901745341 den = 417789341748.0 n = 1468 58.24152216944672 den = 418350499072.0 n = 1469 58.02063104605072 den = 418912021164.0 n = 1470 58.8454286228126 den = 419473908000.0 n = 1471 58.50705681337575 den = 420036159556.0 n = 1472 58.796632008592894 den = 420598775808.0 n = 1473 58.189128103757035 den = 421161756732.0 n = 1474 58.561753165120486 den = 421725102304.0 n = 1475 57.54248281756786 den = 422288812500.0 n = 1476 58.93382391304833 den = 422852887296.0 n = 1477 58.361688880608405 den = 423417326668.0 n = 1478 58.57656552930017 den = 423982130592.0 n = 1479 58.56893752757438 den = 424547299044.0 n = 1480 58.04344462454653 den = 425112832000.0 n = 1481 58.323400814621344 den = 425678729436.0 n = 1482 58.45238824525415 den = 426244991328.0 n = 1483 58.563983215189474 den = 426811617652.0 n = 1484 58.685326658221946 den = 427378608384.0 n = 1485 58.57965489498403 den = 427945963500.0 n = 1486 58.46702849335829 den = 428513682976.0 n = 1487 58.55912283288566 den = 429081766788.0 n = 1488 58.30699119530984 den = 429650214912.0 n = 1489 58.66777385730644 den = 430219027324.0 n = 1490 58.47595984457786 den = 430788204000.0 n = 1491 58.17110544135891 den = 431357744916.0 n = 1492 58.407666955996625 den = 431927650048.0 n = 1493 58.03748130535421 den = 432497919372.0 n = 1494 58.56533100511144 den = 433068552864.0 n = 1495 58.47051526081041 den = 433639550500.0 n = 1496 58.717087826962704 den = 434210912256.0 n = 1497 58.05654631127179 den = 434782638108.0 n = 1498 58.94292403055235 den = 435354728032.0 n = 1499 58.346413753492435 den = 435927182004.0 n = 1500 58.469919326543184 den = 436500000000.0 n = 1501 58.35045807826426 den = 437073181996.0 n = 1502 58.07277601176525 den = 437646727968.0 n = 1503 58.642007127775976 den = 438220637892.0 n = 1504 58.4660790628241 den = 438794911744.0 n = 1505 57.86585679525528 den = 439369549500.0 n = 1506 58.200556132323044 den = 439944551136.0 n = 1507 58.243728566441526 den = 440519916628.0 n = 1508 58.50597228769555 den = 441095645952.0 n = 1509 57.88263550397369 den = 441671739084.0 n = 1510 58.88893726283343 den = 442248196000.0 n = 1511 58.22412221432537 den = 442825016676.0 n = 1512 58.63403632375956 den = 443402201088.0 n = 1513 58.426472338624436 den = 443979749212.0 n = 1514 58.20579271334699 den = 444557661024.0 n = 1515 58.5496089240311 den = 445135936500.0 n = 1516 58.41605613612743 den = 445714575616.0 n = 1517 58.4046848671176 den = 446293578348.0 n = 1518 58.45616214390226 den = 446872944672.0 n = 1519 59.00511158468045 den = 447452674564.0 n = 1520 59.10888891770123 den = 448032768000.0 n = 1521 58.18127065305638 den = 448613224956.0 n = 1522 58.61035490308355 den = 449194045408.0 n = 1523 58.26670838377913 den = 449775229332.0 n = 1524 58.686249692632806 den = 450356776704.0 n = 1525 58.419662746287145 den = 450938687500.0 n = 1526 58.6557096526726 den = 451520961696.0 n = 1527 58.17922252777477 den = 452103599268.0 n = 1528 58.33687456197434 den = 452686600192.0 n = 1529 58.32302774176095 den = 453269964444.0 n = 1530 58.31431936236821 den = 453853692000.0 n = 1531 58.48670290783621 den = 454437782836.0 n = 1532 58.25482315199203 den = 455022236928.0 n = 1533 58.07166160353472 den = 455607054252.0 n = 1534 58.47626047086436 den = 456192234784.0 n = 1535 58.69752615021647 den = 456777778500.0 n = 1536 58.39490908882238 den = 457363685376.0 n = 1537 57.90785139682966 den = 457949955388.0 n = 1538 58.4794859942914 den = 458536588512.0 n = 1539 58.79956584388679 den = 459123584724.0 n = 1540 58.12119089375904 den = 459710944000.0 n = 1541 58.43878017817299 den = 460298666316.0 n = 1542 58.39358526809142 den = 460886751648.0 n = 1543 58.62164697175751 den = 461475199972.0 n = 1544 59.088260396254874 den = 462064011264.0 n = 1545 58.32596285033015 den = 462653185500.0 n = 1546 58.02774714638288 den = 463242722656.0 n = 1547 58.268465680365104 den = 463832622708.0 n = 1548 58.75531252734307 den = 464422885632.0 n = 1549 58.234511044493985 den = 465013511404.0 n = 1550 58.03052575797934 den = 465604500000.0 n = 1551 58.411978243497636 den = 466195851396.0 n = 1552 58.12461060029461 den = 466787565568.0 n = 1553 58.37311513119797 den = 467379642492.0 n = 1554 58.45017224583855 den = 467972082144.0 n = 1555 58.68406329591442 den = 468564884500.0 n = 1556 58.045305349551036 den = 469158049536.0 n = 1557 58.620221651699666 den = 469751577228.0 n = 1558 58.57053221052759 den = 470345467552.0 n = 1559 58.92622513356088 den = 470939720484.0 n = 1560 58.39957607809862 den = 471534336000.0 n = 1561 58.61388256642179 den = 472129314076.0 n = 1562 58.245676859749146 den = 472724654688.0 n = 1563 58.02237117058914 den = 473320357812.0 n = 1564 58.38779436746877 den = 473916423424.0 n = 1565 58.54564449713541 den = 474512851500.0 n = 1566 57.88750703759948 den = 475109642016.0 n = 1567 58.47998729720212 den = 475706794948.0 n = 1568 58.14468550521127 den = 476304310272.0 n = 1569 57.98176809078706 den = 476902187964.0 n = 1570 58.31701675593605 den = 477500428000.0 n = 1571 58.501927204714484 den = 478099030356.0 n = 1572 58.593926012386866 den = 478697995008.0 n = 1573 58.230291904698205 den = 479297321932.0 n = 1574 58.41056607636171 den = 479897011104.0 n = 1575 58.371231491877346 den = 480497062500.0 n = 1576 58.66155957360824 den = 481097476096.0 n = 1577 58.339909261683516 den = 481698251868.0 n = 1578 58.45805169555658 den = 482299389792.0 n = 1579 58.304594149071335 den = 482900889844.0 n = 1580 58.39192810583034 den = 483502752000.0 n = 1581 58.56076907956747 den = 484104976236.0 n = 1582 58.22854237586154 den = 484707562528.0 n = 1583 58.258678404191635 den = 485310510852.0 n = 1584 58.56509642871626 den = 485913821184.0 n = 1585 58.72844998634976 den = 486517493500.0 n = 1586 58.23545023644136 den = 487121527776.0 n = 1587 58.27262778708052 den = 487725923988.0 n = 1588 58.2826739197271 den = 488330682112.0 n = 1589 58.288036118781015 den = 488935802124.0 n = 1590 57.98142243660916 den = 489541284000.0 n = 1591 58.48074108847967 den = 490147127716.0 n = 1592 58.09792810906984 den = 490753333248.0 n = 1593 58.450126388465605 den = 491359900572.0 n = 1594 58.28403032045553 den = 491966829664.0 n = 1595 58.012263989770034 den = 492574120500.0 n = 1596 58.15516686833316 den = 493181773056.0 n = 1597 58.528797100978 den = 493789787308.0 n = 1598 58.59176097200632 den = 494398163232.0 n = 1599 58.53849673250809 den = 495006900804.0 n = 1600 58.37346932315663 den = 495616000000.0 n = 1601 58.78253174530013 den = 496225460796.0 n = 1602 58.73932100996332 den = 496835283168.0 n = 1603 58.776965882207264 den = 497445467092.0 n = 1604 58.46566550600979 den = 498056012544.0 n = 1605 58.4106999858629 den = 498666919500.0 n = 1606 58.13544745395358 den = 499278187936.0 n = 1607 58.561356370253456 den = 499889817828.0 n = 1608 58.39156609324898 den = 500501809152.0 n = 1609 58.32487923874876 den = 501114161884.0 n = 1610 58.51782185477399 den = 501726876000.0 n = 1611 58.016887627224065 den = 502339951476.0 n = 1612 58.261029827224036 den = 502953388288.0 n = 1613 58.66884544555034 den = 503567186412.0 n = 1614 58.465361144537965 den = 504181345824.0 n = 1615 58.235815929477994 den = 504795866500.0 n = 1616 58.28224218786633 den = 505410748416.0 n = 1617 58.79372591387212 den = 506025991548.0 n = 1618 58.25808561928282 den = 506641595872.0 n = 1619 58.793074393288414 den = 507257561364.0 n = 1620 58.088977840833635 den = 507873888000.0 n = 1621 58.334733799645164 den = 508490575756.0 n = 1622 58.17000800080721 den = 509107624608.0 n = 1623 58.52995907449417 den = 509725034532.0 n = 1624 58.181453049155714 den = 510342805504.0 n = 1625 58.23538368028663 den = 510960937500.0 n = 1626 58.57754252889126 den = 511579430496.0 n = 1627 58.42737076065107 den = 512198284468.0 n = 1628 58.33103441693962 den = 512817499392.0 n = 1629 58.437715548691955 den = 513437075244.0 n = 1630 58.3262417404965 den = 514057012000.0 n = 1631 58.67299109591663 den = 514677309636.0 n = 1632 58.266417663026374 den = 515297968128.0 n = 1633 58.75311332095889 den = 515918987452.0 n = 1634 57.89944691737166 den = 516540367584.0 n = 1635 58.24862626604361 den = 517162108500.0 n = 1636 58.21010321891205 den = 517784210176.0 n = 1637 58.47935171241827 den = 518406672588.0 n = 1638 58.20583938362406 den = 519029495712.0 n = 1639 58.34072850197065 den = 519652679524.0 n = 1640 58.44031311084478 den = 520276224000.0 n = 1641 57.94935200123228 den = 520900129116.0 n = 1642 58.18702812534966 den = 521524394848.0 n = 1643 58.07438489632678 den = 522149021172.0 n = 1644 58.07128117081944 den = 522774008064.0 n = 1645 58.41178587979565 den = 523399355500.0 n = 1646 58.40048668556094 den = 524025063456.0 n = 1647 58.37102632455363 den = 524651131908.0 n = 1648 58.4780534207295 den = 525277560832.0 n = 1649 57.92622294217703 den = 525904350204.0 n = 1650 58.28397729994861 den = 526531500000.0 n = 1651 58.381793734886244 den = 527159010196.0 n = 1652 58.197250782898585 den = 527786880768.0 n = 1653 58.077307582382105 den = 528415111692.0 n = 1654 57.82335240665007 den = 529043702944.0 n = 1655 58.30797433935546 den = 529672654500.0 n = 1656 58.39312777025028 den = 530301966336.0 n = 1657 58.24828789632905 den = 530931638428.0 n = 1658 58.39741246486398 den = 531561670752.0 n = 1659 58.13062009828214 den = 532192063284.0 n = 1660 58.11498179288321 den = 532822816000.0 n = 1661 57.83904213180616 den = 533453928876.0 n = 1662 58.47904526882362 den = 534085401888.0 n = 1663 58.21916964320575 den = 534717235012.0 n = 1664 58.778137658521864 den = 535349428224.0 n = 1665 57.957136862132145 den = 535981981500.0 n = 1666 58.292758235192736 den = 536614894816.0 n = 1667 57.571999347045875 den = 537248168148.0 n = 1668 57.868791716677165 den = 537881801472.0 n = 1669 58.02191116882576 den = 538515794764.0 n = 1670 58.59623076818938 den = 539150148000.0 n = 1671 58.02963702175491 den = 539784861156.0 n = 1672 58.36116368517023 den = 540419934208.0 n = 1673 58.01629744965073 den = 541055367132.0 n = 1674 57.58161372366994 den = 541691159904.0 n = 1675 58.75832866284221 den = 542327312500.0 n = 1676 58.12013785905673 den = 542963824896.0 n = 1677 57.57805048874875 den = 543600697068.0 n = 1678 57.38702777675413 den = 544237928992.0 n = 1679 58.01019132160126 den = 544875520644.0 n = 1680 58.47559923329799 den = 545513472000.0 n = 1681 58.42666138246861 den = 546151783036.0 n = 1682 58.05448856963182 den = 546790453728.0 n = 1683 58.66959846966476 den = 547429484052.0 n = 1684 57.86393282515944 den = 548068873984.0 n = 1685 58.33939575904566 den = 548708623500.0 n = 1686 57.93834722094388 den = 549348732576.0 n = 1687 58.79242298774514 den = 549989201188.0 n = 1688 58.04501075949074 den = 550630029312.0 n = 1689 58.457587427707125 den = 551271216924.0 n = 1690 58.41205729445116 den = 551912764000.0 n = 1691 58.217319645597634 den = 552554670516.0 n = 1692 58.39411793250597 den = 553196936448.0 n = 1693 58.04699024098999 den = 553839561772.0 n = 1694 58.28211201142306 den = 554482546464.0 n = 1695 58.62405089987626 den = 555125890500.0 n = 1696 58.17089384426097 den = 555769593856.0 n = 1697 58.54265850350171 den = 556413656508.0 n = 1698 58.30368082498663 den = 557058078432.0 n = 1699 58.124280436692835 den = 557702859604.0 n = 1700 58.0792634402605 den = 558348000000.0 n = 1701 58.196862589943244 den = 558993499596.0 n = 1702 58.114407170007354 den = 559639358368.0 n = 1703 58.01506627251979 den = 560285576292.0 n = 1704 58.05689403080195 den = 560932153344.0 n = 1705 58.214033821547154 den = 561579089500.0 n = 1706 58.2415062002587 den = 562226384736.0 n = 1707 58.27334319392587 den = 562874039028.0 n = 1708 58.068033347069225 den = 563522052352.0 n = 1709 58.50163277310805 den = 564170424684.0 n = 1710 58.6249260785596 den = 564819156000.0 n = 1711 58.07533745188954 den = 565468246276.0 n = 1712 58.507753976508255 den = 566117695488.0 n = 1713 58.51164455272489 den = 566767503612.0 n = 1714 57.80497634424608 den = 567417670624.0 n = 1715 58.155450724036456 den = 568068196500.0 n = 1716 58.066052779501504 den = 568719081216.0 n = 1717 58.33358781334618 den = 569370324748.0 n = 1718 58.20279717187875 den = 570021927072.0 n = 1719 58.41286339901971 den = 570673888164.0 n = 1720 58.34086494764596 den = 571326208000.0 n = 1721 58.69215528040336 den = 571978886556.0 n = 1722 58.20517793265224 den = 572631923808.0 n = 1723 58.35559772174093 den = 573285319732.0 n = 1724 58.02307683200513 den = 573939074304.0 n = 1725 58.19987050494917 den = 574593187500.0 n = 1726 58.10994830079155 den = 575247659296.0 n = 1727 58.36743607700527 den = 575902489668.0 n = 1728 58.14583184859651 den = 576557678592.0 n = 1729 58.30989280799048 den = 577213226044.0 n = 1730 58.15889902242665 den = 577869132000.0 n = 1731 58.79379182631078 den = 578525396436.0 n = 1732 58.169364787675335 den = 579182019328.0 n = 1733 58.16289381594056 den = 579839000652.0 n = 1734 58.351293141274816 den = 580496340384.0 n = 1735 58.58761378039318 den = 581154038500.0 n = 1736 58.3458115548608 den = 581812094976.0 n = 1737 57.786401907979766 den = 582470509788.0 n = 1738 58.30476702468932 den = 583129282912.0 n = 1739 57.706971303039914 den = 583788414324.0 n = 1740 57.87787736986764 den = 584447904000.0 n = 1741 58.3163124076132 den = 585107751916.0 n = 1742 58.546735125323025 den = 585767958048.0 n = 1743 58.3804192784024 den = 586428522372.0 n = 1744 58.234196386431435 den = 587089444864.0 n = 1745 58.10509084248095 den = 587750725500.0 n = 1746 58.16913981511696 den = 588412364256.0 n = 1747 57.92800309103612 den = 589074361108.0 n = 1748 58.1035697571862 den = 589736716032.0 n = 1749 58.041124371785955 den = 590399429004.0 n = 1750 57.89856003027734 den = 591062500000.0 n = 1751 57.88855383724734 den = 591725928996.0 n = 1752 58.19197271739539 den = 592389715968.0 n = 1753 58.36128583519702 den = 593053860892.0 n = 1754 58.2201555811594 den = 593718363744.0 n = 1755 58.20010302866502 den = 594383224500.0 n = 1756 58.03483971927271 den = 595048443136.0 n = 1757 57.951338646445 den = 595714019628.0 n = 1758 58.22568151340301 den = 596379953952.0 n = 1759 58.41569862682709 den = 597046246084.0 n = 1760 58.490623049017515 den = 597712896000.0 n = 1761 58.299536467276404 den = 598379903676.0 n = 1762 58.089633425155284 den = 599047269088.0 n = 1763 57.96071746877239 den = 599714992212.0 n = 1764 58.23820706339493 den = 600383073024.0 n = 1765 58.26395123209267 den = 601051511500.0 n = 1766 57.93055999725318 den = 601720307616.0 n = 1767 58.357679451117846 den = 602389461348.0 n = 1768 58.335951001829976 den = 603058972672.0 n = 1769 57.89712223346919 den = 603728841564.0 n = 1770 58.01182915054413 den = 604399068000.0 n = 1771 58.51622431201934 den = 605069651956.0 n = 1772 58.240774386642656 den = 605740593408.0 n = 1773 58.08160263822101 den = 606411892332.0 n = 1774 57.829038828701414 den = 607083548704.0 n = 1775 57.78009752300937 den = 607755562500.0 n = 1776 57.99114754527272 den = 608427933696.0 n = 1777 58.359155869600805 den = 609100662268.0 n = 1778 58.17743520690182 den = 609773748192.0 n = 1779 58.11482833406751 den = 610447191444.0 n = 1780 58.01206404963299 den = 611120992000.0 n = 1781 57.51586827916432 den = 611795149836.0 n = 1782 57.76878404929045 den = 612469664928.0 n = 1783 58.193097488564575 den = 613144537252.0 n = 1784 58.15566348831276 den = 613819766784.0 n = 1785 58.463187161963376 den = 614495353500.0 n = 1786 58.50316081998626 den = 615171297376.0 n = 1787 57.713269328248366 den = 615847598388.0 n = 1788 58.096355967423825 den = 616524256512.0 n = 1789 57.93809724270777 den = 617201271724.0 n = 1790 58.11653256777222 den = 617878644000.0 n = 1791 58.10624232147928 den = 618556373316.0 n = 1792 58.293293581454634 den = 619234459648.0 n = 1793 57.720202330527975 den = 619912902972.0 n = 1794 58.07031195917782 den = 620591703264.0 n = 1795 58.02219494091443 den = 621270860500.0 n = 1796 57.45847556171727 den = 621950374656.0 n = 1797 57.98579656371122 den = 622630245708.0 n = 1798 58.10045434750115 den = 623310473632.0 n = 1799 57.533675584950316 den = 623991058404.0 n = 1800 58.13038969338638 den = 624672000000.0 n = 1801 57.88756605226084 den = 625353298396.0 n = 1802 57.55207637230401 den = 626034953568.0 n = 1803 58.035198694306864 den = 626716965492.0 n = 1804 58.01614727710388 den = 627399334144.0 n = 1805 58.06424769966567 den = 628082059500.0 n = 1806 58.35827863885823 den = 628765141536.0 n = 1807 58.127757933448166 den = 629448580228.0 n = 1808 58.2211878645322 den = 630132375552.0 n = 1809 58.133959854078824 den = 630816527484.0 n = 1810 57.966117847578786 den = 631501036000.0 n = 1811 57.94494983736468 den = 632185901076.0 n = 1812 58.31759291305925 den = 632871122688.0 n = 1813 58.46070433174484 den = 633556700812.0 n = 1814 58.16472308222288 den = 634242635424.0 n = 1815 58.092353000857564 den = 634928926500.0 n = 1816 57.81109761208751 den = 635615574016.0 n = 1817 58.152471776583894 den = 636302577948.0 n = 1818 57.710309288214965 den = 636989938272.0 n = 1819 58.17398416885694 den = 637677654964.0 n = 1820 57.881400063522904 den = 638365728000.0 n = 1821 58.12765844729396 den = 639054157356.0 n = 1822 58.61318001179246 den = 639742943008.0 n = 1823 58.092352351098484 den = 640432084932.0 n = 1824 58.36107683562152 den = 641121583104.0 n = 1825 58.096477252217625 den = 641811437500.0 n = 1826 57.67597153908187 den = 642501648096.0 n = 1827 58.12881838481545 den = 643192214868.0 n = 1828 58.00896458465546 den = 643883137792.0 n = 1829 57.89820805656982 den = 644574416844.0 n = 1830 57.90455253738938 den = 645266052000.0 n = 1831 58.30207702578787 den = 645958043236.0 n = 1832 57.85385688865894 den = 646650390528.0 n = 1833 57.89409150970573 den = 647343093852.0 n = 1834 57.3256017824509 den = 648036153184.0 n = 1835 58.238483537683244 den = 648729568500.0 n = 1836 58.026232223141065 den = 649423339776.0 n = 1837 58.159427369701845 den = 650117466988.0 n = 1838 58.287943330205 den = 650811950112.0 n = 1839 57.929558130112675 den = 651506789124.0 n = 1840 57.945844605065965 den = 652201984000.0 n = 1841 58.052551667896594 den = 652897534716.0 n = 1842 58.11162470574139 den = 653593441248.0 n = 1843 58.22183628225378 den = 654289703572.0 n = 1844 57.85633402423188 den = 654986321664.0 n = 1845 57.85685736894022 den = 655683295500.0 n = 1846 58.18245582938533 den = 656380625056.0 n = 1847 58.29969270750058 den = 657078310308.0 n = 1848 58.15906359309302 den = 657776351232.0 n = 1849 58.48740263181035 den = 658474747804.0 n = 1850 58.39361584431297 den = 659173500000.0 n = 1851 57.83211491289679 den = 659872607796.0 n = 1852 58.22139639511266 den = 660572071168.0 n = 1853 58.101011230163834 den = 661271890092.0 n = 1854 57.807158739353966 den = 661972064544.0 n = 1855 57.904426181691036 den = 662672594500.0 n = 1856 58.35447600227681 den = 663373479936.0 n = 1857 57.698194083595496 den = 664074720828.0 n = 1858 57.622356045970456 den = 664776317152.0 n = 1859 57.92540684271306 den = 665478268884.0 n = 1860 57.96621610285391 den = 666180576000.0 n = 1861 58.10570152178401 den = 666883238476.0 n = 1862 58.05426340433422 den = 667586256288.0 n = 1863 57.912185990101115 den = 668289629412.0 n = 1864 58.413028366484774 den = 668993357824.0 n = 1865 58.3256174721437 den = 669697441500.0 n = 1866 58.38150300104338 den = 670401880416.0 n = 1867 57.4230231995905 den = 671106674548.0 n = 1868 57.94311933267951 den = 671811823872.0 n = 1869 57.983371909906964 den = 672517328364.0 n = 1870 58.0786487791904 den = 673223188000.0 n = 1871 58.020352204320275 den = 673929402756.0 n = 1872 57.841891564049796 den = 674635972608.0 n = 1873 57.728953435972166 den = 675342897532.0 n = 1874 58.025514115202476 den = 676050177504.0 n = 1875 58.07796052233396 den = 676757812500.0 n = 1876 57.55128510412825 den = 677465802496.0 n = 1877 57.92263690036218 den = 678174147468.0 n = 1878 57.82198559694403 den = 678882847392.0 n = 1879 57.72821814163502 den = 679591902244.0 n = 1880 57.906070354520594 den = 680301312000.0 n = 1881 58.27295963953276 den = 681011076636.0 n = 1882 58.38850454606039 den = 681721196128.0 n = 1883 58.160129206857725 den = 682431670452.0 n = 1884 58.152271948739966 den = 683142499584.0 n = 1885 58.25952022213231 den = 683853683500.0 n = 1886 58.049074339380674 den = 684565222176.0 n = 1887 58.00042755964614 den = 685277115588.0 n = 1888 58.193903819659766 den = 685989363712.0 n = 1889 57.890418306787524 den = 686701966524.0 n = 1890 58.262455008630575 den = 687414924000.0 n = 1891 57.583262835609254 den = 688128236116.0 n = 1892 57.80726152535521 den = 688841902848.0 n = 1893 57.828704982357245 den = 689555924172.0 n = 1894 57.8711489842797 den = 690270300064.0 n = 1895 57.754674253969974 den = 690985030500.0 n = 1896 58.087747592012185 den = 691700115456.0 n = 1897 58.282351375485476 den = 692415554908.0 n = 1898 57.91085171489948 den = 693131348832.0 n = 1899 57.5494903925603 den = 693847497204.0 n = 1900 57.984242679213935 den = 694564000000.0 n = 1901 57.98144699055954 den = 695280857196.0 n = 1902 58.0968441846056 den = 695998068768.0 n = 1903 58.20913054057477 den = 696715634692.0 n = 1904 57.633095452709156 den = 697433554944.0 n = 1905 57.979650647008086 den = 698151829500.0 n = 1906 57.97932699796359 den = 698870458336.0 n = 1907 58.023995577764715 den = 699589441428.0 n = 1908 57.808628099370786 den = 700308778752.0 n = 1909 57.77582897493435 den = 701028470284.0 n = 1910 57.5226177306291 den = 701748516000.0 n = 1911 58.21436913273817 den = 702468915876.0 n = 1912 57.714647197184796 den = 703189669888.0 n = 1913 57.810798013680476 den = 703910778012.0 n = 1914 57.801653295177886 den = 704632240224.0 n = 1915 57.81246397532707 den = 705354056500.0 n = 1916 57.5203836769332 den = 706076226816.0 n = 1917 58.34765593687406 den = 706798751148.0 n = 1918 58.26156659949312 den = 707521629472.0 n = 1919 57.888153639783596 den = 708244861764.0 n = 1920 57.9573363670222 den = 708968448000.0 n = 1921 58.03731927560724 den = 709692388156.0 n = 1922 58.266707169290406 den = 710416682208.0 n = 1923 57.97904485456119 den = 711141330132.0 n = 1924 58.14179144504225 den = 711866331904.0 n = 1925 57.887607228580684 den = 712591687500.0 n = 1926 57.78994183456677 den = 713317396896.0 n = 1927 58.31899339343163 den = 714043460068.0 n = 1928 58.15978812045416 den = 714769876992.0 n = 1929 58.329464072995115 den = 715496647644.0 n = 1930 57.86008683994833 den = 716223772000.0 n = 1931 58.122182037999835 den = 716951250036.0 n = 1932 57.871680116844594 den = 717679081728.0 n = 1933 58.25092167658255 den = 718407267052.0 n = 1934 57.74174610309456 den = 719135805984.0 n = 1935 58.30400560391877 den = 719864698500.0 n = 1936 57.871630348181895 den = 720593944576.0 n = 1937 57.86650712798831 den = 721323544188.0 n = 1938 57.76156047858868 den = 722053497312.0 n = 1939 57.680353584846486 den = 722783803924.0 n = 1940 57.67534904760865 den = 723514464000.0 n = 1941 58.07710907046639 den = 724245477516.0 n = 1942 57.956058059019384 den = 724976844448.0 n = 1943 58.462755943075756 den = 725708564772.0 n = 1944 58.065050010659014 den = 726440638464.0 n = 1945 57.79331697686119 den = 727173065500.0 n = 1946 57.714266251674054 den = 727905845856.0 n = 1947 58.004518181725714 den = 728638979508.0 n = 1948 57.858182281695136 den = 729372466432.0 n = 1949 58.04438578139321 den = 730106306604.0 n = 1950 57.94547054688046 den = 730840500000.0 n = 1951 57.54614395323953 den = 731575046596.0 n = 1952 58.158402396276685 den = 732309946368.0 n = 1953 58.09791248436168 den = 733045199292.0 n = 1954 57.344857109871505 den = 733780805344.0 n = 1955 58.34820049080062 den = 734516764500.0 n = 1956 57.65269745991965 den = 735253076736.0 n = 1957 57.93098563058252 den = 735989742028.0 n = 1958 57.82028304881533 den = 736726760352.0 n = 1959 58.18934184474988 den = 737464131684.0 n = 1960 57.654740833133054 den = 738201856000.0 n = 1961 58.05348076126214 den = 738939933276.0 n = 1962 58.448280249006295 den = 739678363488.0 n = 1963 58.00474682287226 den = 740417146612.0 n = 1964 57.783171295105994 den = 741156282624.0 n = 1965 58.15177475406877 den = 741895771500.0 n = 1966 58.30112999750501 den = 742635613216.0 n = 1967 58.18419442133297 den = 743375807748.0 n = 1968 57.70715015384644 den = 744116355072.0 n = 1969 57.902282633235416 den = 744857255164.0 n = 1970 58.146862318746905 den = 745598508000.0 n = 1971 57.96288223383036 den = 746340113556.0 n = 1972 57.75561155511211 den = 747082071808.0 n = 1973 57.57176768600834 den = 747824382732.0 n = 1974 57.52138079770124 den = 748567046304.0 n = 1975 57.93332180682597 den = 749310062500.0 n = 1976 58.06582333680388 den = 750053431296.0 n = 1977 57.82846687292171 den = 750797152668.0 n = 1978 57.74710556468984 den = 751541226592.0 n = 1979 58.068803635774685 den = 752285653044.0 n = 1980 57.73673651381877 den = 753030432000.0 n = 1981 57.55157299554742 den = 753775563436.0 n = 1982 57.91614818209109 den = 754521047328.0 n = 1983 57.73974411778222 den = 755266883652.0 n = 1984 57.56430029354281 den = 756013072384.0 n = 1985 57.66153906357418 den = 756759613500.0 n = 1986 57.748121745038844 den = 757506506976.0 n = 1987 58.08228452024226 den = 758253752788.0 n = 1988 58.20087835530961 den = 759001350912.0 n = 1989 57.91464174482883 den = 759749301324.0 n = 1990 57.732041776007925 den = 760497604000.0 n = 1991 57.916152649004246 den = 761246258916.0 n = 1992 57.683593053634034 den = 761995266048.0 n = 1993 57.438459684470324 den = 762744625372.0 n = 1994 58.321376733271315 den = 763494336864.0 n = 1995 57.90457152904315 den = 764244400500.0 n = 1996 57.835454548279294 den = 764994816256.0 n = 1997 57.69460792408819 den = 765745584108.0 n = 1998 57.92530502840387 den = 766496704032.0 n = 1999 57.33699702458074 den = 767248176004.0 n = 2000 57.86669848374115 den = 768000000000.0 n = 2001 57.79704475713171 den = 768752175996.0 n = 2002 57.462920655800964 den = 769504703968.0 n = 2003 57.73064414169287 den = 770257583892.0 n = 2004 57.624542866578544 den = 771010815744.0 n = 2005 57.94753423532362 den = 771764399500.0 n = 2006 57.78451279017058 den = 772518335136.0 n = 2007 57.90093651231191 den = 773272622628.0 n = 2008 57.6006661341518 den = 774027261952.0 n = 2009 58.15554197205069 den = 774782253084.0 n = 2010 57.6827359643601 den = 775537596000.0 n = 2011 58.14434623906138 den = 776293290676.0 n = 2012 57.87018581873044 den = 777049337088.0 n = 2013 57.984186262163654 den = 777805735212.0 n = 2014 58.104629330448155 den = 778562485024.0 n = 2015 58.32184900856328 den = 779319586500.0 n = 2016 57.952187712273165 den = 780077039616.0 n = 2017 57.45739310323365 den = 780834844348.0 n = 2018 58.34106222813283 den = 781593000672.0 n = 2019 57.34243031970534 den = 782351508564.0 n = 2020 57.5712676952693 den = 783110368000.0 n = 2021 57.98129818939874 den = 783869578956.0 n = 2022 57.75663297100383 den = 784629141408.0 n = 2023 57.90461905157966 den = 785389055332.0 n = 2024 57.7572543503462 den = 786149320704.0 n = 2025 58.01816538956774 den = 786909937500.0 n = 2026 58.33029213785193 den = 787670905696.0 n = 2027 58.16505482163699 den = 788432225268.0 n = 2028 57.56114237349514 den = 789193896192.0 n = 2029 58.101152248017115 den = 789955918444.0 n = 2030 57.65442656806235 den = 790718292000.0 n = 2031 57.513162485681676 den = 791481016836.0 n = 2032 57.65350784124328 den = 792244092928.0 n = 2033 57.67749079643919 den = 793007520252.0 n = 2034 57.91108646048036 den = 793771298784.0 n = 2035 58.06463280752869 den = 794535428500.0 n = 2036 58.00224251966641 den = 795299909376.0 n = 2037 58.18843704983982 den = 796064741388.0 n = 2038 57.65933200527358 den = 796829924512.0 n = 2039 58.066447105031806 den = 797595458724.0 n = 2040 58.209671116929265 den = 798361344000.0 n = 2041 58.23712365105237 den = 799127580316.0 n = 2042 57.787092392113856 den = 799894167648.0 n = 2043 57.63301122875618 den = 800661105972.0 n = 2044 57.51203653385874 den = 801428395264.0 n = 2045 58.27252282674661 den = 802196035500.0 n = 2046 58.36532258483018 den = 802964026656.0 n = 2047 58.2701363657388 den = 803732368708.0 n = 2048 58.394999122371125 den = 804501061632.0 n = 2049 57.84117026424851 den = 805270105404.0 n = 2050 57.98112993688373 den = 806039500000.0 n = 2051 57.63616211940332 den = 806809245396.0 n = 2052 58.290881074817605 den = 807579341568.0 n = 2053 57.93173258200074 den = 808349788492.0 n = 2054 57.64207953664764 den = 809120586144.0 n = 2055 58.16632813168708 den = 809891734500.0 n = 2056 58.164318134955224 den = 810663233536.0 n = 2057 57.564157263319764 den = 811435083228.0 n = 2058 58.29628778437802 den = 812207283552.0 n = 2059 58.14315697811754 den = 812979834484.0 n = 2060 57.815634629855865 den = 813752736000.0 n = 2061 58.15201854827766 den = 814525988076.0 n = 2062 57.86611809284273 den = 815299590688.0 n = 2063 57.36327909662027 den = 816073543812.0 n = 2064 58.00253027077912 den = 816847847424.0 n = 2065 58.075137631334904 den = 817622501500.0 n = 2066 57.68930514098497 den = 818397506016.0 n = 2067 58.020095540915435 den = 819172860948.0 n = 2068 58.09748449880018 den = 819948566272.0 n = 2069 58.04688486633278 den = 820724621964.0 n = 2070 57.94018087333931 den = 821501028000.0 n = 2071 57.390946258701156 den = 822277784356.0 n = 2072 57.485752252877404 den = 823054891008.0 n = 2073 57.75393476447693 den = 823832347932.0 n = 2074 57.75742273205995 den = 824610155104.0 n = 2075 57.6140987973416 den = 825388312500.0 n = 2076 57.48539895708025 den = 826166820096.0 n = 2077 57.52794315427273 den = 826945677868.0 n = 2078 57.9641063370172 den = 827724885792.0 n = 2079 57.697257498556645 den = 828504443844.0 n = 2080 57.665768391999634 den = 829284352000.0 n = 2081 57.48452015597948 den = 830064610236.0 n = 2082 57.96230383772233 den = 830845218528.0 n = 2083 57.73052714755036 den = 831626176852.0 n = 2084 57.40618050810275 den = 832407485184.0 n = 2085 57.64166956470023 den = 833189143500.0 n = 2086 57.173037178964094 den = 833971151776.0 n = 2087 57.786389587162226 den = 834753509988.0 n = 2088 57.74196029189694 den = 835536218112.0 n = 2089 57.83147808476513 den = 836319276124.0 n = 2090 58.03128862277329 den = 837102684000.0 n = 2091 57.01336151061428 den = 837886441716.0 n = 2092 57.57326630590069 den = 838670549248.0 n = 2093 57.50277724772451 den = 839455006572.0 n = 2094 57.327042031002435 den = 840239813664.0 n = 2095 57.65177938543595 den = 841024970500.0 n = 2096 57.83221748794421 den = 841810477056.0 n = 2097 57.767230378712085 den = 842596333308.0 n = 2098 57.77367446794921 den = 843382539232.0 n = 2099 57.956640161417816 den = 844169094804.0 n = 2100 57.76225141105274 den = 844956000000.0 n = 2101 57.86172669768749 den = 845743254796.0 n = 2102 57.92645429262467 den = 846530859168.0 n = 2103 57.60145942477103 den = 847318813092.0 n = 2104 57.64639178278448 den = 848107116544.0 n = 2105 57.64681638002028 den = 848895769500.0 n = 2106 57.315120884575336 den = 849684771936.0 n = 2107 57.67924834326133 den = 850474123828.0 n = 2108 58.03429836625806 den = 851263825152.0 n = 2109 57.99140170241868 den = 852053875884.0 n = 2110 57.724293653082455 den = 852844276000.0 n = 2111 58.153935139855136 den = 853635025476.0 n = 2112 57.947900780267055 den = 854426124288.0 n = 2113 57.432034504738425 den = 855217572412.0 n = 2114 57.69534613527695 den = 856009369824.0 n = 2115 58.02902252679818 den = 856801516500.0 n = 2116 57.609801033156735 den = 857594012416.0 n = 2117 58.14362530727501 den = 858386857548.0 n = 2118 57.85026830053826 den = 859180051872.0 n = 2119 57.47049599870044 den = 859973595364.0 n = 2120 57.34870946316394 den = 860767488000.0 n = 2121 57.68759489250571 den = 861561729756.0 n = 2122 57.848804053343606 den = 862356320608.0 n = 2123 58.0689617416122 den = 863151260532.0 n = 2124 58.101212230845185 den = 863946549504.0 n = 2125 57.47008951732927 den = 864742187500.0 n = 2126 58.01650243424601 den = 865538174496.0 n = 2127 57.81965834613887 den = 866334510468.0 n = 2128 58.04735987617609 den = 867131195392.0 n = 2129 57.930258967100166 den = 867928229244.0 n = 2130 58.07318089937721 den = 868725612000.0 n = 2131 58.17944847282873 den = 869523343636.0 n = 2132 57.419373551617454 den = 870321424128.0 n = 2133 58.28862790833876 den = 871119853452.0 n = 2134 57.54100054418803 den = 871918631584.0 n = 2135 58.05178247521084 den = 872717758500.0 n = 2136 57.42099783842103 den = 873517234176.0 n = 2137 57.69684212295025 den = 874317058588.0 n = 2138 58.13475291095341 den = 875117231712.0 n = 2139 57.45361397104677 den = 875917753524.0 n = 2140 57.86526771856352 den = 876718624000.0 n = 2141 57.37974020061815 den = 877519843116.0 n = 2142 57.62635723653928 den = 878321410848.0 n = 2143 57.5262347413366 den = 879123327172.0 n = 2144 57.80158884087563 den = 879925592064.0 n = 2145 57.818941556349344 den = 880728205500.0 n = 2146 57.61897632885501 den = 881531167456.0 n = 2147 57.628091811492766 den = 882334477908.0 n = 2148 57.4498485465393 den = 883138136832.0 n = 2149 57.53264884099403 den = 883942144204.0 n = 2150 57.76601070934614 den = 884746500000.0 n = 2151 57.670681452503956 den = 885551204196.0 n = 2152 57.48927185385908 den = 886356256768.0 n = 2153 57.61198419549633 den = 887161657692.0 n = 2154 58.017026462472074 den = 887967406944.0 n = 2155 57.96022240906639 den = 888773504500.0 n = 2156 57.69010759747851 den = 889579950336.0 n = 2157 57.64935549613466 den = 890386744428.0 n = 2158 57.84584419757789 den = 891193886752.0 n = 2159 57.5515635736517 den = 892001377284.0 n = 2160 57.826228113344186 den = 892809216000.0 n = 2161 57.54096462260193 den = 893617402876.0 n = 2162 58.01822663172157 den = 894425937888.0 n = 2163 57.68448225190745 den = 895234821012.0 n = 2164 57.834927458481665 den = 896044052224.0 n = 2165 57.73286630274473 den = 896853631500.0 n = 2166 57.430840573776344 den = 897663558816.0 n = 2167 57.59960677041597 den = 898473834148.0 n = 2168 57.811134409437955 den = 899284457472.0 n = 2169 57.83167438654926 den = 900095428764.0 n = 2170 57.396461406675456 den = 900906748000.0 n = 2171 57.58460022376039 den = 901718415156.0 n = 2172 57.60454052446881 den = 902530430208.0 n = 2173 57.89562662856923 den = 903342793132.0 n = 2174 58.104315987349274 den = 904155503904.0 n = 2175 57.08333437105321 den = 904968562500.0 n = 2176 57.45518952904966 den = 905781968896.0 n = 2177 57.77176890817353 den = 906595723068.0 n = 2178 57.62460526644991 den = 907409824992.0 n = 2179 58.27372995871048 den = 908224274644.0 n = 2180 57.779375771944274 den = 909039072000.0 n = 2181 57.731107901979 den = 909854217036.0 n = 2182 57.6955038893237 den = 910669709728.0 n = 2183 57.63526259029913 den = 911485550052.0 n = 2184 57.888996780054924 den = 912301737984.0 n = 2185 57.94643678643379 den = 913118273500.0 n = 2186 57.79400261790524 den = 913935156576.0 n = 2187 57.869599213757205 den = 914752387188.0 n = 2188 57.40963357909774 den = 915569965312.0 n = 2189 57.55629786859017 den = 916387890924.0 n = 2190 57.67070203787481 den = 917206164000.0 n = 2191 57.506382827297145 den = 918024784516.0 n = 2192 57.710654719409945 den = 918843752448.0 n = 2193 57.438462032766225 den = 919663067772.0 n = 2194 57.51072557548279 den = 920482730464.0 n = 2195 57.559198458722015 den = 921302740500.0 n = 2196 57.625638961968654 den = 922123097856.0 n = 2197 57.48971762897954 den = 922943802508.0 n = 2198 57.738196037269454 den = 923764854432.0 n = 2199 57.850705438377396 den = 924586253604.0 n = 2200 58.22701403524104 den = 925408000000.0 n = 2201 57.46161353201493 den = 926230093596.0 n = 2202 57.782829516726714 den = 927052534368.0 n = 2203 57.53640998737684 den = 927875322292.0 n = 2204 58.27667705280888 den = 928698457344.0 n = 2205 57.108980090067135 den = 929521939500.0 n = 2206 57.61592377061045 den = 930345768736.0 n = 2207 57.19875674701449 den = 931169945028.0 n = 2208 57.41126512462911 den = 931994468352.0 n = 2209 58.04690406724555 den = 932819338684.0 n = 2210 57.49893265632569 den = 933644556000.0 n = 2211 57.46712356417328 den = 934470120276.0 n = 2212 57.99911225754376 den = 935296031488.0 n = 2213 57.4757020011964 den = 936122289612.0 n = 2214 57.537334414601034 den = 936948894624.0 n = 2215 57.41293045977938 den = 937775846500.0 n = 2216 57.96372606183771 den = 938603145216.0 n = 2217 57.90330445354165 den = 939430790748.0 n = 2218 57.48565197149879 den = 940258783072.0 n = 2219 57.4748778835606 den = 941087122164.0 n = 2220 57.51721280859848 den = 941915808000.0 n = 2221 57.71297958518661 den = 942744840556.0 n = 2222 57.32373403778215 den = 943574219808.0 n = 2223 57.59690347742524 den = 944403945732.0 n = 2224 57.13651044026097 den = 945234018304.0 n = 2225 58.152464551688304 den = 946064437500.0 n = 2226 57.39507946844929 den = 946895203296.0 n = 2227 57.60067222813228 den = 947726315668.0 n = 2228 57.940965483338566 den = 948557774592.0 n = 2229 57.75085089175953 den = 949389580044.0 n = 2230 57.98352407243158 den = 950221732000.0 n = 2231 57.99193362918409 den = 951054230436.0 n = 2232 57.19144672365376 den = 951887075328.0 n = 2233 57.35454173246084 den = 952720266652.0 n = 2234 57.52573384884638 den = 953553804384.0 n = 2235 57.635352108069654 den = 954387688500.0 n = 2236 57.56901430483445 den = 955221918976.0 n = 2237 57.93022847375693 den = 956056495788.0 n = 2238 57.19055754570951 den = 956891418912.0 n = 2239 57.62173947951196 den = 957726688324.0 n = 2240 57.583038613821365 den = 958562304000.0 n = 2241 57.47507303244209 den = 959398265916.0 n = 2242 57.36159930330857 den = 960234574048.0 n = 2243 57.59153580584248 den = 961071228372.0 n = 2244 57.133566513538725 den = 961908228864.0 n = 2245 57.707276051690506 den = 962745575500.0 n = 2246 57.82362259007431 den = 963583268256.0 n = 2247 57.27046370099612 den = 964421307108.0 n = 2248 56.97522359210949 den = 965259692032.0 n = 2249 57.787354907278726 den = 966098423004.0 n = 2250 57.28137187425532 den = 966937500000.0 n = 2251 57.665356664842434 den = 967776922996.0 n = 2252 57.153632271868666 den = 968616691968.0 n = 2253 57.21102049102082 den = 969456806892.0 n = 2254 57.23024515318829 den = 970297267744.0 n = 2255 57.605881885007655 den = 971138074500.0 n = 2256 57.4979293436403 den = 971979227136.0 n = 2257 57.68640861015747 den = 972820725628.0 n = 2258 57.611038033703714 den = 973662569952.0 n = 2259 57.62773324035614 den = 974504760084.0 n = 2260 57.33307775144772 den = 975347296000.0 n = 2261 57.687370934756885 den = 976190177676.0 n = 2262 57.484011203479064 den = 977033405088.0 n = 2263 57.70628523284323 den = 977876978212.0 n = 2264 57.962736973706185 den = 978720897024.0 n = 2265 57.382779503559775 den = 979565161500.0 n = 2266 57.44295934178165 den = 980409771616.0 n = 2267 57.82684899997098 den = 981254727348.0 n = 2268 57.24962594108154 den = 982100028672.0 n = 2269 57.61294972768827 den = 982945675564.0 n = 2270 57.05091207040355 den = 983791668000.0 n = 2271 57.49006942132702 den = 984638005956.0 n = 2272 57.781739287677695 den = 985484689408.0 n = 2273 58.01290989830576 den = 986331718332.0 n = 2274 58.069749833261305 den = 987179092704.0 n = 2275 57.73580196288235 den = 988026812500.0 n = 2276 57.343506738946296 den = 988874877696.0 n = 2277 57.181972670627914 den = 989723288268.0 n = 2278 57.44182344635397 den = 990572044192.0 n = 2279 57.55156594460102 den = 991421145444.0 n = 2280 57.622487247176515 den = 992270592000.0 n = 2281 57.3549769831138 den = 993120383836.0 n = 2282 57.856261589379365 den = 993970520928.0 n = 2283 57.81566752305838 den = 994821003252.0 n = 2284 57.55142799450874 den = 995671830784.0 n = 2285 57.31364308558468 den = 996523003500.0 n = 2286 57.38952501458497 den = 997374521376.0 n = 2287 58.393111945984145 den = 998226384388.0 n = 2288 57.27769556019688 den = 999078592512.0 n = 2289 57.570509475418625 den = 999931145724.0 n = 2290 57.103396556646906 den = 1000784044000.0 n = 2291 57.572586724974094 den = 1001637287316.0 n = 2292 57.55467752452729 den = 1002490875648.0 n = 2293 57.32683294708634 den = 1003344808972.0 n = 2294 56.96979846650007 den = 1004199087264.0 n = 2295 57.41938196640189 den = 1005053710500.0 n = 2296 57.600787691267485 den = 1005908678656.0 n = 2297 57.42581513677576 den = 1006763991708.0 n = 2298 57.555656016446676 den = 1007619649632.0 n = 2299 57.570691033082 den = 1008475652404.0 n = 2300 57.42648651155884 den = 1009332000000.0 n = 2301 57.83339035001745 den = 1010188692396.0 n = 2302 57.769787985773235 den = 1011045729568.0 n = 2303 57.88144854883217 den = 1011903111492.0 n = 2304 57.854719060456134 den = 1012760838144.0 n = 2305 57.82231740985994 den = 1013618909500.0 n = 2306 57.711236423273355 den = 1014477325536.0 n = 2307 57.735178449843445 den = 1015336086228.0 n = 2308 57.51071493884792 den = 1016195191552.0 n = 2309 57.768268687744644 den = 1017054641484.0 n = 2310 57.56350731997674 den = 1017914436000.0 n = 2311 57.34477930219949 den = 1018774575076.0 n = 2312 57.70798665083099 den = 1019635058688.0 n = 2313 57.693711940344976 den = 1020495886812.0 n = 2314 57.449936832679036 den = 1021357059424.0 n = 2315 57.4391364546877 den = 1022218576500.0 n = 2316 57.700239792847476 den = 1023080438016.0 n = 2317 57.58944701507191 den = 1023942643948.0 n = 2318 57.520048176285655 den = 1024805194272.0 n = 2319 57.337390496580845 den = 1025668088964.0 n = 2320 57.2994327002349 den = 1026531328000.0 n = 2321 57.69643453525908 den = 1027394911356.0 n = 2322 57.52439782286467 den = 1028258839008.0 n = 2323 57.234590188284166 den = 1029123110932.0 n = 2324 57.39551548740561 den = 1029987727104.0 n = 2325 57.231153868273985 den = 1030852687500.0 n = 2326 57.4085501196196 den = 1031717992096.0 n = 2327 57.39212876000862 den = 1032583640868.0 n = 2328 57.35141890909702 den = 1033449633792.0 n = 2329 57.08950601080438 den = 1034315970844.0 n = 2330 57.645898147652964 den = 1035182652000.0 n = 2331 57.87661722924225 den = 1036049677236.0 n = 2332 57.791972917608774 den = 1036917046528.0 n = 2333 57.37537172076977 den = 1037784759852.0 n = 2334 57.46684815788248 den = 1038652817184.0 n = 2335 57.44634943675635 den = 1039521218500.0 n = 2336 57.667033658532105 den = 1040389963776.0 n = 2337 58.03023249585655 den = 1041259052988.0 n = 2338 58.237463313831825 den = 1042128486112.0 n = 2339 57.958971697766614 den = 1042998263124.0 n = 2340 57.649600817033594 den = 1043868384000.0 n = 2341 57.50059935316886 den = 1044738848716.0 n = 2342 57.80748135863742 den = 1045609657248.0 n = 2343 57.25301178833969 den = 1046480809572.0 n = 2344 57.01729096490932 den = 1047352305664.0 n = 2345 57.57987733460439 den = 1048224145500.0 n = 2346 57.26440790988609 den = 1049096329056.0 n = 2347 57.18488247968457 den = 1049968856308.0 n = 2348 58.08320058534505 den = 1050841727232.0 n = 2349 57.48374126184529 den = 1051714941804.0 n = 2350 57.905035897530034 den = 1052588500000.0 n = 2351 57.28864339166566 den = 1053462401796.0 n = 2352 57.29028645229374 den = 1054336647168.0 n = 2353 57.441561195871905 den = 1055211236092.0 n = 2354 57.47387047269562 den = 1056086168544.0 n = 2355 57.79982622897888 den = 1056961444500.0 n = 2356 57.166090727154945 den = 1057837063936.0 n = 2357 57.319980904290254 den = 1058713026828.0 n = 2358 57.46261548024256 den = 1059589333152.0 n = 2359 57.32178244311808 den = 1060465982884.0 n = 2360 57.63616200563048 den = 1061342976000.0 n = 2361 57.52564793305724 den = 1062220312476.0 n = 2362 57.48115537145863 den = 1063097992288.0 n = 2363 57.593746142356 den = 1063976015412.0 n = 2364 57.079395936588334 den = 1064854381824.0 n = 2365 57.37032329971287 den = 1065733091500.0 n = 2366 57.27118152814298 den = 1066612144416.0 n = 2367 57.591962115066345 den = 1067491540548.0 n = 2368 57.742467904420124 den = 1068371279872.0 n = 2369 57.6895631792045 den = 1069251362364.0 n = 2370 57.111469735692104 den = 1070131788000.0 n = 2371 57.13013680490652 den = 1071012556756.0 n = 2372 57.576262326596336 den = 1071893668608.0 n = 2373 57.615164709547315 den = 1072775123532.0 n = 2374 57.81897473509664 den = 1073656921504.0 n = 2375 57.37926470863323 den = 1074539062500.0 n = 2376 57.4383688858367 den = 1075421546496.0 n = 2377 57.57045660889217 den = 1076304373468.0 n = 2378 57.5260812119869 den = 1077187543392.0 n = 2379 57.633860912446806 den = 1078071056244.0 n = 2380 57.54628799971139 den = 1078954912000.0 n = 2381 57.144872276579044 den = 1079839110636.0 n = 2382 57.6370336469906 den = 1080723652128.0 n = 2383 57.52626936730196 den = 1081608536452.0 n = 2384 58.0241893716895 den = 1082493763584.0 n = 2385 57.11522471785669 den = 1083379333500.0 n = 2386 57.21648017044133 den = 1084265246176.0 n = 2387 57.12006459072588 den = 1085151501588.0 n = 2388 57.2087626132335 den = 1086038099712.0 n = 2389 57.364360803595474 den = 1086925040524.0 n = 2390 57.21524255952807 den = 1087812324000.0 n = 2391 57.4021581712534 den = 1088699950116.0 n = 2392 57.22140288760489 den = 1089587918848.0 n = 2393 57.37476516153891 den = 1090476230172.0 n = 2394 57.45541628801793 den = 1091364884064.0 n = 2395 57.35196278057207 den = 1092253880500.0 n = 2396 57.724718603719225 den = 1093143219456.0 n = 2397 57.67051894512344 den = 1094032900908.0 n = 2398 57.56858404419386 den = 1094922924832.0 n = 2399 57.20849057632277 den = 1095813291204.0 n = 2400 57.11256592601664 den = 1096704000000.0 n = 2401 56.974162163045285 den = 1097595051196.0 n = 2402 57.33224561376941 den = 1098486444768.0 n = 2403 57.27963432775057 den = 1099378180692.0 n = 2404 57.52366449431029 den = 1100270258944.0 n = 2405 57.467628856623946 den = 1101162679500.0 n = 2406 57.31744377437792 den = 1102055442336.0 n = 2407 57.39489936315916 den = 1102948547428.0 n = 2408 57.43199012919 den = 1103841994752.0 n = 2409 56.934953911916246 den = 1104735784284.0 n = 2410 57.7258097730019 den = 1105629916000.0 n = 2411 57.46893079459684 den = 1106524389876.0 n = 2412 57.06329028726503 den = 1107419205888.0 n = 2413 57.99810787894388 den = 1108314364012.0 n = 2414 57.203511375691356 den = 1109209864224.0 n = 2415 57.127931207102186 den = 1110105706500.0 n = 2416 57.61509435429543 den = 1111001890816.0 n = 2417 57.44418392255242 den = 1111898417148.0 n = 2418 57.43383761908879 den = 1112795285472.0 n = 2419 57.77966199966074 den = 1113692495764.0 n = 2420 57.02485951805178 den = 1114590048000.0 n = 2421 56.514228495647835 den = 1115487942156.0 n = 2422 57.148588638095106 den = 1116386178208.0 n = 2423 57.55404383822919 den = 1117284756132.0 n = 2424 56.86865678043982 den = 1118183675904.0 n = 2425 57.611588546055025 den = 1119082937500.0 n = 2426 57.317386333353696 den = 1119982540896.0 n = 2427 56.904674571052496 den = 1120882486068.0 n = 2428 57.471612672252014 den = 1121782772992.0 n = 2429 57.23840907961575 den = 1122683401644.0 n = 2430 57.21379197173537 den = 1123584372000.0 n = 2431 57.804863658117 den = 1124485684036.0 n = 2432 57.5318679449974 den = 1125387337728.0 n = 2433 57.69122138077021 den = 1126289333052.0 n = 2434 57.38880689918179 den = 1127191669984.0 n = 2435 57.51766469211765 den = 1128094348500.0 n = 2436 57.341709587160764 den = 1128997368576.0 n = 2437 57.22584044158731 den = 1129900730188.0 n = 2438 57.2985668089264 den = 1130804433312.0 n = 2439 57.96381811471676 den = 1131708477924.0 n = 2440 57.66737257973245 den = 1132612864000.0 n = 2441 57.412871508420395 den = 1133517591516.0 n = 2442 57.236466418928615 den = 1134422660448.0 n = 2443 57.26328061866574 den = 1135328070772.0 n = 2444 57.83740156622348 den = 1136233822464.0 n = 2445 57.079205462175345 den = 1137139915500.0 n = 2446 57.154249906149616 den = 1138046349856.0 n = 2447 57.45680291931263 den = 1138953125508.0 n = 2448 57.55510326094195 den = 1139860242432.0 n = 2449 57.22728946878586 den = 1140767700604.0 n = 2450 57.11051398865416 den = 1141675500000.0 n = 2451 57.3181590807342 den = 1142583640596.0 n = 2452 57.17645511896443 den = 1143492122368.0 n = 2453 57.269286573730184 den = 1144400945292.0 n = 2454 57.09981874582092 den = 1145310109344.0 n = 2455 56.86839112828149 den = 1146219614500.0 n = 2456 57.61989631764682 den = 1147129460736.0 n = 2457 57.47847754883481 den = 1148039648028.0 n = 2458 57.05492834511025 den = 1148950176352.0 n = 2459 57.77622591030118 den = 1149861045684.0 n = 2460 57.41841627265038 den = 1150772256000.0 n = 2461 57.57487508938772 den = 1151683807276.0 n = 2462 57.43643004400198 den = 1152595699488.0 n = 2463 57.400551288147334 den = 1153507932612.0 n = 2464 57.30778607864104 den = 1154420506624.0 n = 2465 57.222276400423716 den = 1155333421500.0 n = 2466 57.62664648656504 den = 1156246677216.0 n = 2467 57.28101605552368 den = 1157160273748.0 n = 2468 57.294740405803516 den = 1158074211072.0 n = 2469 57.25850279663948 den = 1158988489164.0 n = 2470 57.01608359503986 den = 1159903108000.0 n = 2471 57.1031937889763 den = 1160818067556.0 n = 2472 56.794305356858196 den = 1161733367808.0 n = 2473 57.09998589586001 den = 1162649008732.0 n = 2474 57.3896321202717 den = 1163564990304.0 n = 2475 57.68850487021696 den = 1164481312500.0 n = 2476 57.396538312981654 den = 1165397975296.0 n = 2477 57.3842526493517 den = 1166314978668.0 n = 2478 56.8276833105957 den = 1167232322592.0 n = 2479 57.25471021046798 den = 1168150007044.0 n = 2480 57.621478649775625 den = 1169068032000.0 n = 2481 57.048501948087655 den = 1169986397436.0 n = 2482 57.224959178727154 den = 1170905103328.0 n = 2483 57.03515491814162 den = 1171824149652.0 n = 2484 57.243522000883665 den = 1172743536384.0 n = 2485 57.08778031789802 den = 1173663263500.0 n = 2486 57.322329592232755 den = 1174583330976.0 n = 2487 57.579155028630915 den = 1175503738788.0 n = 2488 57.76168174918081 den = 1176424486912.0 n = 2489 57.58971432570992 den = 1177345575324.0 n = 2490 57.16544955300078 den = 1178267004000.0 n = 2491 57.80375961953396 den = 1179188772916.0 n = 2492 57.51154011654207 den = 1180110882048.0 n = 2493 57.14041808002278 den = 1181033331372.0 n = 2494 57.301515226667846 den = 1181956120864.0 n = 2495 57.376073785351046 den = 1182879250500.0 n = 2496 57.11950156971166 den = 1183802720256.0 n = 2497 57.39560331201351 den = 1184726530108.0 n = 2498 57.4721917171919 den = 1185650680032.0 n = 2499 57.32327330312326 den = 1186575170004.0 n = 2500 57.36904046127418 den = 1187500000000.0 n = 2501 57.21387516752155 den = 1188425169996.0 n = 2502 57.459360930883896 den = 1189350679968.0 n = 2503 57.144852499354315 den = 1190276529892.0 n = 2504 57.53813024770422 den = 1191202719744.0 n = 2505 56.8032957565721 den = 1192129249500.0 n = 2506 57.34866676093971 den = 1193056119136.0 n = 2507 56.89455823405476 den = 1193983328628.0 n = 2508 57.37471485441876 den = 1194910877952.0 n = 2509 56.71724034105713 den = 1195838767084.0 n = 2510 57.14358774223906 den = 1196766996000.0 n = 2511 57.63513474304419 den = 1197695564676.0 n = 2512 57.39106521926618 den = 1198624473088.0 n = 2513 57.292995283996945 den = 1199553721212.0 n = 2514 57.026491593164764 den = 1200483309024.0 n = 2515 57.347741984858054 den = 1201413236500.0 n = 2516 57.352292770530504 den = 1202343503616.0 n = 2517 57.02851124175367 den = 1203274110348.0 n = 2518 56.983605612392914 den = 1204205056672.0 n = 2519 57.39590726918627 den = 1205136342564.0 n = 2520 57.55432163177141 den = 1206067968000.0 n = 2521 56.73227158147607 den = 1206999932956.0 n = 2522 57.304982481273804 den = 1207932237408.0 n = 2523 57.24131575086489 den = 1208864881332.0 n = 2524 57.243813225516064 den = 1209797864704.0 n = 2525 57.43822242476698 den = 1210731187500.0 n = 2526 56.93253768131155 den = 1211664849696.0 n = 2527 56.94492910611802 den = 1212598851268.0 n = 2528 57.68641627227917 den = 1213533192192.0 n = 2529 57.45543359111286 den = 1214467872444.0 n = 2530 56.69472039915957 den = 1215402892000.0 n = 2531 57.476683212148984 den = 1216338250836.0 n = 2532 57.34604086146799 den = 1217273948928.0 n = 2533 56.891602954354745 den = 1218209986252.0 n = 2534 57.043800763332605 den = 1219146362784.0 n = 2535 57.541144870654456 den = 1220083078500.0 n = 2536 57.57065472671192 den = 1221020133376.0 n = 2537 57.37739755163069 den = 1221957527388.0 n = 2538 56.83533573519197 den = 1222895260512.0 n = 2539 57.27228292250783 den = 1223833332724.0 n = 2540 57.09662975809709 den = 1224771744000.0 n = 2541 56.6577270950364 den = 1225710494316.0 n = 2542 57.147963832365754 den = 1226649583648.0 n = 2543 57.11160635172047 den = 1227589011972.0 n = 2544 57.19937506992757 den = 1228528779264.0 n = 2545 57.107308395894655 den = 1229468885500.0 n = 2546 57.20876517779899 den = 1230409330656.0 n = 2547 57.56967703300459 den = 1231350114708.0 n = 2548 57.29140062416942 den = 1232291237632.0 n = 2549 57.5281534961946 den = 1233232699404.0 n = 2550 57.34827086045712 den = 1234174500000.0 n = 2551 57.08438888318601 den = 1235116639396.0 n = 2552 57.18709680558684 den = 1236059117568.0 n = 2553 58.01329811098437 den = 1237001934492.0 n = 2554 56.90449585928507 den = 1237945090144.0 n = 2555 57.305834609699644 den = 1238888584500.0 n = 2556 57.35766177010852 den = 1239832417536.0 n = 2557 57.36285448511273 den = 1240776589228.0 n = 2558 57.28502299817219 den = 1241721099552.0 n = 2559 57.34294812957742 den = 1242665948484.0 n = 2560 57.16476026509274 den = 1243611136000.0 n = 2561 57.09559573273949 den = 1244556662076.0 n = 2562 57.19707797985787 den = 1245502526688.0 n = 2563 57.47577123166704 den = 1246448729812.0 n = 2564 57.027002172636635 den = 1247395271424.0 n = 2565 56.90243407577158 den = 1248342151500.0 n = 2566 57.00504343062049 den = 1249289370016.0 n = 2567 57.07568706517805 den = 1250236926948.0 n = 2568 57.486832135424855 den = 1251184822272.0 n = 2569 57.39563342403732 den = 1252133055964.0 n = 2570 57.31429974594358 den = 1253081628000.0 n = 2571 57.205694541598206 den = 1254030538356.0 n = 2572 57.32597894907273 den = 1254979787008.0 n = 2573 57.17373728363608 den = 1255929373932.0 n = 2574 57.00496526835674 den = 1256879299104.0 n = 2575 56.935818071678156 den = 1257829562500.0 n = 2576 57.27265842579755 den = 1258780164096.0 n = 2577 57.216985100658114 den = 1259731103868.0 n = 2578 57.55671990612522 den = 1260682381792.0 n = 2579 57.14107162395 den = 1261633997844.0 n = 2580 57.11780176384365 den = 1262585952000.0 n = 2581 57.25262924190584 den = 1263538244236.0 n = 2582 57.450133294819665 den = 1264490874528.0 n = 2583 57.388647548690344 den = 1265443842852.0 n = 2584 57.35154111130678 den = 1266397149184.0 n = 2585 57.386394280220145 den = 1267350793500.0 n = 2586 56.95145227852381 den = 1268304775776.0 n = 2587 56.87947523723961 den = 1269259095988.0 n = 2588 57.154815512409726 den = 1270213754112.0 n = 2589 57.10025578614004 den = 1271168750124.0 n = 2590 57.03592903461561 den = 1272124084000.0 n = 2591 57.14302426870155 den = 1273079755716.0 n = 2592 57.203155003042184 den = 1274035765248.0 n = 2593 57.104164374015745 den = 1274992112572.0 n = 2594 57.32411998709798 den = 1275948797664.0 n = 2595 56.910153751134295 den = 1276905820500.0 n = 2596 57.119486839495124 den = 1277863181056.0 n = 2597 57.32016265606315 den = 1278820879308.0 n = 2598 57.376002061608126 den = 1279778915232.0 n = 2599 57.0654257993677 den = 1280737288804.0 n = 2600 57.02534175146114 den = 1281696000000.0 n = 2601 56.96704272233559 den = 1282655048796.0 n = 2602 57.0414905568874 den = 1283614435168.0 n = 2603 57.016737466834215 den = 1284574159092.0 n = 2604 57.13943296646954 den = 1285534220544.0 n = 2605 57.416777532473844 den = 1286494619500.0 n = 2606 57.344156109505576 den = 1287455355936.0 n = 2607 57.530863057819204 den = 1288416429828.0 n = 2608 56.77249584379426 den = 1289377841152.0 n = 2609 57.29274346896098 den = 1290339589884.0 n = 2610 57.03969656793044 den = 1291301676000.0 n = 2611 56.97932559184974 den = 1292264099476.0 n = 2612 57.045421843783245 den = 1293226860288.0 n = 2613 57.171693290486 den = 1294189958412.0 n = 2614 57.02412081601594 den = 1295153393824.0 n = 2615 56.83553763536434 den = 1296117166500.0 n = 2616 57.47951083536191 den = 1297081276416.0 n = 2617 57.27344622001022 den = 1298045723548.0 n = 2618 57.00207213730037 den = 1299010507872.0 n = 2619 56.84554450081301 den = 1299975629364.0 n = 2620 56.91300294189433 den = 1300941088000.0 n = 2621 57.37902127301631 den = 1301906883756.0 n = 2622 57.14907342537831 den = 1302873016608.0 n = 2623 56.72721083808578 den = 1303839486532.0 n = 2624 57.067889827924894 den = 1304806293504.0 n = 2625 57.43560036091365 den = 1305773437500.0 n = 2626 56.72124572638332 den = 1306740918496.0 n = 2627 56.88635032316394 den = 1307708736468.0 n = 2628 56.61507895902419 den = 1308676891392.0 n = 2629 57.443910971212496 den = 1309645383244.0 n = 2630 57.38645085575423 den = 1310614212000.0 n = 2631 57.036869907804515 den = 1311583377636.0 n = 2632 57.47001070352027 den = 1312552880128.0 n = 2633 56.92502662056595 den = 1313522719452.0 n = 2634 56.82459924625888 den = 1314492895584.0 n = 2635 56.63216151714574 den = 1315463408500.0 n = 2636 57.02694971015623 den = 1316434258176.0 n = 2637 57.06404398043225 den = 1317405444588.0 n = 2638 57.22509537649939 den = 1318376967712.0 n = 2639 57.27044702085703 den = 1319348827524.0 n = 2640 56.97315299633817 den = 1320321024000.0 n = 2641 57.50447376991992 den = 1321293557116.0 n = 2642 57.21387031575245 den = 1322266426848.0 n = 2643 56.57736222932407 den = 1323239633172.0 n = 2644 57.36359939671029 den = 1324213176064.0 n = 2645 57.0597029819934 den = 1325187055500.0 n = 2646 57.06833742494004 den = 1326161271456.0 n = 2647 57.052487940462505 den = 1327135823908.0 n = 2648 57.62007253397475 den = 1328110712832.0 n = 2649 57.09666736525753 den = 1329085938204.0 n = 2650 56.93322253450636 den = 1330061500000.0 n = 2651 57.05846755868622 den = 1331037398196.0 n = 2652 56.864123674991234 den = 1332013632768.0 n = 2653 57.71887660222364 den = 1332990203692.0 n = 2654 57.60279705018354 den = 1333967110944.0 n = 2655 57.09939125986988 den = 1334944354500.0 n = 2656 57.166196457965185 den = 1335921934336.0 n = 2657 57.37273702524251 den = 1336899850428.0 n = 2658 56.826584042827484 den = 1337878102752.0 n = 2659 57.078779588999495 den = 1338856691284.0 n = 2660 57.16736184501867 den = 1339835616000.0 n = 2661 57.390528028335254 den = 1340814876876.0 n = 2662 56.94393327721756 den = 1341794473888.0 n = 2663 56.80241398939519 den = 1342774407012.0 n = 2664 57.15719785280524 den = 1343754676224.0 n = 2665 57.44074601255971 den = 1344735281500.0 n = 2666 57.379491156970396 den = 1345716222816.0 n = 2667 57.00912835899783 den = 1346697500148.0 n = 2668 57.061584823040675 den = 1347679113472.0 n = 2669 57.03092300789647 den = 1348661062764.0 n = 2670 57.068464477409364 den = 1349643348000.0 n = 2671 57.38294565162877 den = 1350625969156.0 n = 2672 57.35344354080639 den = 1351608926208.0 n = 2673 56.97688150877496 den = 1352592219132.0 n = 2674 56.95376254924805 den = 1353575847904.0 n = 2675 57.022236109601984 den = 1354559812500.0 n = 2676 56.57321053860775 den = 1355544112896.0 n = 2677 57.10976387619962 den = 1356528749068.0 n = 2678 56.845316749314975 den = 1357513720992.0 n = 2679 57.53015415842471 den = 1358499028644.0 n = 2680 57.681999735327956 den = 1359484672000.0 n = 2681 57.0785378648028 den = 1360470651036.0 n = 2682 57.077377553217644 den = 1361456965728.0 n = 2683 56.70997536310192 den = 1362443616052.0 n = 2684 56.89423493900313 den = 1363430601984.0 n = 2685 57.05597152090087 den = 1364417923500.0 n = 2686 57.005019944278445 den = 1365405580576.0 n = 2687 57.06634447982916 den = 1366393573188.0 n = 2688 56.94470538504977 den = 1367381901312.0 n = 2689 56.74421391617639 den = 1368370564924.0 n = 2690 56.75120353241093 den = 1369359564000.0 n = 2691 56.87104223139246 den = 1370348898516.0 n = 2692 56.997963961219305 den = 1371338568448.0 n = 2693 56.99420927504499 den = 1372328573772.0 n = 2694 57.19235291181983 den = 1373318914464.0 n = 2695 57.035267422222596 den = 1374309590500.0 n = 2696 57.528328505309034 den = 1375300601856.0 n = 2697 57.0483631695465 den = 1376291948508.0 n = 2698 57.02474430187898 den = 1377283630432.0 n = 2699 56.55934117006718 den = 1378275647604.0 n = 2700 57.06273795475201 den = 1379268000000.0 n = 2701 56.996650118504405 den = 1380260687596.0 n = 2702 56.98852593271299 den = 1381253710368.0 n = 2703 56.895188088565114 den = 1382247068292.0 n = 2704 56.87738452885399 den = 1383240761344.0 n = 2705 56.6745380609908 den = 1384234789500.0 n = 2706 56.91433368799357 den = 1385229152736.0 n = 2707 56.9278447245864 den = 1386223851028.0 n = 2708 56.72835676393076 den = 1387218884352.0 n = 2709 57.11591327313169 den = 1388214252684.0 n = 2710 56.82735310092814 den = 1389209956000.0 n = 2711 56.80583854708619 den = 1390205994276.0 n = 2712 57.02158368725738 den = 1391202367488.0 n = 2713 57.1222233547788 den = 1392199075612.0 n = 2714 57.238721594802804 den = 1393196118624.0 n = 2715 56.517870357373354 den = 1394193496500.0 n = 2716 57.051803688517275 den = 1395191209216.0 n = 2717 56.84238635353754 den = 1396189256748.0 n = 2718 57.0976018101128 den = 1397187639072.0 n = 2719 57.14804256766559 den = 1398186356164.0 n = 2720 56.76645816231276 den = 1399185408000.0 n = 2721 56.821365703044215 den = 1400184794556.0 n = 2722 56.62389659490364 den = 1401184515808.0 n = 2723 56.80479931220541 den = 1402184571732.0 n = 2724 56.327389801251606 den = 1403184962304.0 n = 2725 57.17151445536323 den = 1404185687500.0 n = 2726 57.211795521040735 den = 1405186747296.0 n = 2727 57.120762627382504 den = 1406188141668.0 n = 2728 57.095674823534175 den = 1407189870592.0 n = 2729 56.83115580700323 den = 1408191934044.0 n = 2730 56.48524012217071 den = 1409194332000.0 n = 2731 57.151742197201415 den = 1410197064436.0 n = 2732 57.067537412142855 den = 1411200131328.0 n = 2733 57.25793423661941 den = 1412203532652.0 n = 2734 57.458310147605864 den = 1413207268384.0 n = 2735 56.87475230933505 den = 1414211338500.0 n = 2736 56.9110003174287 den = 1415215742976.0 n = 2737 56.875400516655084 den = 1416220481788.0 n = 2738 56.985468195329815 den = 1417225554912.0 n = 2739 56.99077410187972 den = 1418230962324.0 n = 2740 56.92700995814402 den = 1419236704000.0 n = 2741 57.23937911111222 den = 1420242779916.0 n = 2742 57.09002828660814 den = 1421249190048.0 n = 2743 57.16959164369625 den = 1422255934372.0 n = 2744 57.296120515565924 den = 1423263012864.0 n = 2745 56.78129564206103 den = 1424270425500.0 n = 2746 56.68806905892389 den = 1425278172256.0 n = 2747 56.72965098823817 den = 1426286253108.0 n = 2748 57.241266774197584 den = 1427294668032.0 n = 2749 56.90565488758056 den = 1428303417004.0 n = 2750 56.75317626553095 den = 1429312500000.0 n = 2751 56.88951130835326 den = 1430321916996.0 n = 2752 56.92058934324165 den = 1431331667968.0 n = 2753 57.21883022879419 den = 1432341752892.0 n = 2754 56.72251706985749 den = 1433352171744.0 n = 2755 56.73408762628269 den = 1434362924500.0 n = 2756 57.098259782989196 den = 1435374011136.0 n = 2757 56.360387958585264 den = 1436385431628.0 n = 2758 56.75997116857878 den = 1437397185952.0 n = 2759 56.57805032006475 den = 1438409274084.0 n = 2760 56.796627440152214 den = 1439421696000.0 n = 2761 57.23081055610801 den = 1440434451676.0 n = 2762 56.87041935778239 den = 1441447541088.0 n = 2763 57.40176214968454 den = 1442460964212.0 n = 2764 57.32498576012015 den = 1443474721024.0 n = 2765 56.90061714302089 den = 1444488811500.0 n = 2766 57.351837898255724 den = 1445503235616.0 n = 2767 56.517960149205685 den = 1446517993348.0 n = 2768 57.05176798533462 den = 1447533084672.0 n = 2769 56.844426442115356 den = 1448548509564.0 n = 2770 56.60390392768355 den = 1449564268000.0 n = 2771 56.834632950584876 den = 1450580359956.0 n = 2772 56.92246034830381 den = 1451596785408.0 n = 2773 56.73033202013021 den = 1452613544332.0 n = 2774 56.76814181866925 den = 1453630636704.0 n = 2775 56.90620741925405 den = 1454648062500.0 n = 2776 56.91549067251379 den = 1455665821696.0 n = 2777 56.72542679149892 den = 1456683914268.0 n = 2778 57.02624209548439 den = 1457702340192.0 n = 2779 57.162052176485275 den = 1458721099444.0 n = 2780 56.831510587996455 den = 1459740192000.0 n = 2781 57.057206315004606 den = 1460759617836.0 n = 2782 56.95401017122639 den = 1461779376928.0 n = 2783 56.94542268512325 den = 1462799469252.0 n = 2784 57.34375906009978 den = 1463819894784.0 n = 2785 57.13541570079795 den = 1464840653500.0 n = 2786 57.29908700265135 den = 1465861745376.0 n = 2787 56.93525376689191 den = 1466883170388.0 n = 2788 56.4719136345307 den = 1467904928512.0 n = 2789 57.719167511626075 den = 1468927019724.0 n = 2790 57.01730473441562 den = 1469949444000.0 n = 2791 57.16920614263637 den = 1470972201316.0 n = 2792 57.18519990326397 den = 1471995291648.0 n = 2793 56.5182477853667 den = 1473018714972.0 n = 2794 56.7915029693598 den = 1474042471264.0 n = 2795 56.65582676574628 den = 1475066560500.0 n = 2796 56.77444823878776 den = 1476090982656.0 n = 2797 56.925006157893954 den = 1477115737708.0 n = 2798 56.979772592006086 den = 1478140825632.0 n = 2799 56.67579524092255 den = 1479166246404.0 n = 2800 57.13261256667553 den = 1480192000000.0 n = 2801 56.59194982370179 den = 1481218086396.0 n = 2802 56.56994661060902 den = 1482244505568.0 n = 2803 57.1444682403051 den = 1483271257492.0 n = 2804 57.24699610416393 den = 1484298342144.0 n = 2805 57.013912333056716 den = 1485325759500.0 n = 2806 56.672525465454825 den = 1486353509536.0 n = 2807 56.6213135931887 den = 1487381592228.0 n = 2808 56.90111819322737 den = 1488410007552.0 n = 2809 57.079510912542425 den = 1489438755484.0 n = 2810 57.00321815745505 den = 1490467836000.0 n = 2811 57.270390054608356 den = 1491497249076.0 n = 2812 56.25452243211121 den = 1492526994688.0 n = 2813 56.94444518897864 den = 1493557072812.0 n = 2814 56.69652260078939 den = 1494587483424.0 n = 2815 57.26681163494839 den = 1495618226500.0 n = 2816 57.05843367371835 den = 1496649302016.0 n = 2817 57.18579150025553 den = 1497680709948.0 n = 2818 56.56538652643128 den = 1498712450272.0 n = 2819 56.71181450287339 den = 1499744522964.0 n = 2820 56.34609235193646 den = 1500776928000.0 n = 2821 57.36347050742868 den = 1501809665356.0 n = 2822 57.3161244241332 den = 1502842735008.0 n = 2823 56.89794726220551 den = 1503876136932.0 n = 2824 57.29627664243215 den = 1504909871104.0 n = 2825 56.29122325588363 den = 1505943937500.0 n = 2826 56.598468082091344 den = 1506978336096.0 n = 2827 57.09297662827609 den = 1508013066868.0 n = 2828 57.00243728003612 den = 1509048129792.0 n = 2829 56.69563580979387 den = 1510083524844.0 n = 2830 57.15937229592163 den = 1511119252000.0 n = 2831 57.094029307679605 den = 1512155311236.0 n = 2832 56.88613804753162 den = 1513191702528.0 n = 2833 57.329847844885464 den = 1514228425852.0 n = 2834 56.914119923709244 den = 1515265481184.0 n = 2835 56.94668235555033 den = 1516302868500.0 n = 2836 56.91843056625415 den = 1517340587776.0 n = 2837 56.586493790208394 den = 1518378638988.0 n = 2838 57.22354634883854 den = 1519417022112.0 n = 2839 56.89712855860922 den = 1520455737124.0 n = 2840 56.88144712695927 den = 1521494784000.0 n = 2841 56.841765623975284 den = 1522534162716.0 n = 2842 56.86173831032514 den = 1523573873248.0 n = 2843 56.81447933081935 den = 1524613915572.0 n = 2844 56.747957505166845 den = 1525654289664.0 n = 2845 56.70483273724332 den = 1526694995500.0 n = 2846 56.91825111543324 den = 1527736033056.0 n = 2847 56.399375185356284 den = 1528777402308.0 n = 2848 57.01644491787883 den = 1529819103232.0 n = 2849 56.48649995073189 den = 1530861135804.0 n = 2850 57.34181944267952 den = 1531903500000.0 n = 2851 56.54096239497735 den = 1532946195796.0 n = 2852 57.12874344644855 den = 1533989223168.0 n = 2853 56.941383566895354 den = 1535032582092.0 n = 2854 56.43719147118447 den = 1536076272544.0 n = 2855 56.85424215787323 den = 1537120294500.0 n = 2856 56.74345313716794 den = 1538164647936.0 n = 2857 57.239907934873166 den = 1539209332828.0 n = 2858 57.41995649885179 den = 1540254349152.0 n = 2859 56.86400025335663 den = 1541299696884.0 n = 2860 56.65761065861855 den = 1542345376000.0 n = 2861 56.487903196617424 den = 1543391386476.0 n = 2862 56.9219050648231 den = 1544437728288.0 n = 2863 56.44004859684154 den = 1545484401412.0 n = 2864 56.7553068990037 den = 1546531405824.0 n = 2865 56.96078259717373 den = 1547578741500.0 n = 2866 57.20419613121718 den = 1548626408416.0 n = 2867 56.54816570908584 den = 1549674406548.0 n = 2868 57.30067050306166 den = 1550722735872.0 n = 2869 56.95931750670519 den = 1551771396364.0 n = 2870 56.77519013764365 den = 1552820388000.0 n = 2871 57.10410404062995 den = 1553869710756.0 n = 2872 57.44208146450174 den = 1554919364608.0 n = 2873 56.62415328883823 den = 1555969349532.0 n = 2874 56.605565698132345 den = 1557019665504.0 n = 2875 57.20460944581544 den = 1558070312500.0 n = 2876 57.004478088094274 den = 1559121290496.0 n = 2877 56.998517271313645 den = 1560172599468.0 n = 2878 56.52865043194414 den = 1561224239392.0 n = 2879 57.08112871807929 den = 1562276210244.0 n = 2880 56.8358906394587 den = 1563328512000.0 n = 2881 57.08844024543678 den = 1564381144636.0 n = 2882 57.31952785058853 den = 1565434108128.0 n = 2883 56.78093553537049 den = 1566487402452.0 n = 2884 57.04555503164617 den = 1567541027584.0 n = 2885 56.92180271462674 den = 1568594983500.0 n = 2886 56.94551723332727 den = 1569649270176.0 n = 2887 56.7796120781588 den = 1570703887588.0 n = 2888 56.89975066021129 den = 1571758835712.0 n = 2889 56.965485533408 den = 1572814114524.0 n = 2890 56.67789157679503 den = 1573869724000.0 n = 2891 56.882245405875985 den = 1574925664116.0 n = 2892 56.97435926163484 den = 1575981934848.0 n = 2893 56.560183692060995 den = 1577038536172.0 n = 2894 56.6871847213579 den = 1578095468064.0 n = 2895 56.51716408022084 den = 1579152730500.0 n = 2896 56.91612984753456 den = 1580210323456.0 n = 2897 56.7768447348763 den = 1581268246908.0 n = 2898 56.77405980405086 den = 1582326500832.0 n = 2899 56.57572871345483 den = 1583385085204.0 n = 2900 56.73198167508166 den = 1584444000000.0 n = 2901 56.5715007416017 den = 1585503245196.0 n = 2902 56.77709966005485 den = 1586562820768.0 n = 2903 56.37931854970689 den = 1587622726692.0 n = 2904 57.06637682300673 den = 1588682962944.0 n = 2905 56.672598984163734 den = 1589743529500.0 n = 2906 57.121247422313246 den = 1590804426336.0 n = 2907 56.82265605297686 den = 1591865653428.0 n = 2908 56.42123240515157 den = 1592927210752.0 n = 2909 57.08539621823017 den = 1593989098284.0 n = 2910 56.89516308832239 den = 1595051316000.0 n = 2911 57.24259272791292 den = 1596113863876.0 n = 2912 56.15686783410762 den = 1597176741888.0 n = 2913 56.92655151401715 den = 1598239950012.0 n = 2914 57.197439723909014 den = 1599303488224.0 n = 2915 56.57818473212542 den = 1600367356500.0 n = 2916 57.057900161891105 den = 1601431554816.0 n = 2917 56.94315205647234 den = 1602496083148.0 n = 2918 56.862718152771286 den = 1603560941472.0 n = 2919 56.80443775556151 den = 1604626129764.0 n = 2920 56.95813375884846 den = 1605691648000.0 n = 2921 56.827525479500665 den = 1606757496156.0 n = 2922 56.97192516400053 den = 1607823674208.0 n = 2923 56.945246386856645 den = 1608890182132.0 n = 2924 56.65738523231837 den = 1609957019904.0 n = 2925 56.269846687798186 den = 1611024187500.0 n = 2926 57.03143810001829 den = 1612091684896.0 n = 2927 57.01556027698704 den = 1613159512068.0 n = 2928 57.19612447322767 den = 1614227668992.0 n = 2929 57.26957146478239 den = 1615296155644.0 n = 2930 56.46564326107676 den = 1616364972000.0 n = 2931 56.309031358961164 den = 1617434118036.0 n = 2932 56.51812311316304 den = 1618503593728.0 n = 2933 56.6887749936811 den = 1619573399052.0 n = 2934 56.562798009947876 den = 1620643533984.0 n = 2935 57.01106120919942 den = 1621713998500.0 n = 2936 56.75825894353112 den = 1622784792576.0 n = 2937 56.750798936793345 den = 1623855916188.0 n = 2938 56.69859091486759 den = 1624927369312.0 n = 2939 56.73025374978489 den = 1625999151924.0 n = 2940 56.585584359394915 den = 1627071264000.0 n = 2941 56.753410515852764 den = 1628143705516.0 n = 2942 56.70405010110635 den = 1629216476448.0 n = 2943 56.70925894763305 den = 1630289576772.0 n = 2944 56.87749333044669 den = 1631363006464.0 n = 2945 56.93457301914568 den = 1632436765500.0 n = 2946 57.1396353390774 den = 1633510853856.0 n = 2947 56.569660541567835 den = 1634585271508.0 n = 2948 56.44938275001807 den = 1635660018432.0 n = 2949 56.78296393269554 den = 1636735094604.0 n = 2950 56.954646288730004 den = 1637810500000.0 n = 2951 56.63366469632294 den = 1638886234596.0 n = 2952 56.636919724632584 den = 1639962298368.0 n = 2953 56.99545674857258 den = 1641038691292.0 n = 2954 56.63884756303022 den = 1642115413344.0 n = 2955 56.597986066481326 den = 1643192464500.0 n = 2956 56.562685371577125 den = 1644269844736.0 n = 2957 56.75138822444266 den = 1645347554028.0 n = 2958 56.28424808662111 den = 1646425592352.0 n = 2959 57.111108411785885 den = 1647503959684.0 n = 2960 56.712442155723565 den = 1648582656000.0 n = 2961 56.5517892855629 den = 1649661681276.0 n = 2962 56.563326243568326 den = 1650741035488.0 n = 2963 56.59679102319003 den = 1651820718612.0 n = 2964 57.05229931141766 den = 1652900730624.0 n = 2965 56.898334098188414 den = 1653981071500.0 n = 2966 56.67708052613828 den = 1655061741216.0 n = 2967 56.96188319707017 den = 1656142739748.0 n = 2968 56.280479724702076 den = 1657224067072.0 n = 2969 56.47954151009143 den = 1658305723164.0 n = 2970 56.70213213855267 den = 1659387708000.0 n = 2971 56.71439166429959 den = 1660470021556.0 n = 2972 56.677625572949765 den = 1661552663808.0 n = 2973 57.20169995172594 den = 1662635634732.0 n = 2974 56.78895085191197 den = 1663718934304.0 n = 2975 56.43303923035 den = 1664802562500.0 n = 2976 56.52097478292122 den = 1665886519296.0 n = 2977 56.34553513975134 den = 1666970804668.0 n = 2978 56.863808073907386 den = 1668055418592.0 n = 2979 56.194579193072975 den = 1669140361044.0 n = 2980 56.81296318240396 den = 1670225632000.0 n = 2981 56.65173164621689 den = 1671311231436.0 n = 2982 56.44394781172365 den = 1672397159328.0 n = 2983 56.44046715727695 den = 1673483415652.0 n = 2984 56.39669229882319 den = 1674570000384.0 n = 2985 56.829340306792794 den = 1675656913500.0 n = 2986 57.13630423544021 den = 1676744154976.0 n = 2987 56.720253056246754 den = 1677831724788.0 n = 2988 56.540022973949334 den = 1678919622912.0 n = 2989 57.28313824637713 den = 1680007849324.0 n = 2990 56.594347153247476 den = 1681096404000.0 n = 2991 56.90512090238976 den = 1682185286916.0 n = 2992 56.67091223668299 den = 1683274498048.0 n = 2993 56.89070241854748 den = 1684364037372.0 n = 2994 56.941836398136644 den = 1685453904864.0 n = 2995 56.532886396370586 den = 1686544100500.0 n = 2996 56.464030230131264 den = 1687634624256.0 n = 2997 56.59111940033318 den = 1688725476108.0 n = 2998 56.89263832574052 den = 1689816656032.0 n = 2999 56.755636743522835 den = 1690908164004.0 n = 3000 56.768464927025896 den = 1692000000000.0 .",
            "url": "https://mdsohelmahmood.github.io/2021/07/02/AVAR.html",
            "relUrl": "/2021/07/02/AVAR.html",
            "date": " • Jul 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Streamlit with SQL and plotly express to make a dashboard",
            "content": "import streamlit as st import pandas as pd import numpy as np import matplotlib.pyplot as plt import plotly.express as px import time comment=&#39;&#39;&#39;Giving title to the page&#39;&#39;&#39; st.set_page_config( layout=&quot;wide&quot;, # Can be &quot;centered&quot; or &quot;wide&quot;. In the future also &quot;dashboard&quot;, etc. initial_sidebar_state=&quot;auto&quot;, # Can be &quot;auto&quot;, &quot;expanded&quot;, &quot;collapsed&quot; page_title=None, # String or None. Strings get appended with &quot;• Streamlit&quot;. page_icon=None, # String, anything supported by st.image, or None. ) row1_1, row1_2 = st.beta_columns((3,2)) with row1_1: st.title(&#39;Dashboard of Company ABC&#39;) with row1_2: st.text(time.strftime(&quot;%Y-%m-%d %H:%M&quot;)) comment=&#39;&#39;&#39;Display the data&#39;&#39;&#39; host=&quot;localhost&quot; port = 5432 database=&quot;sqlda&quot; user=&quot;postgres&quot; password=&quot;abc123&quot; from sqlalchemy import create_engine try: conn = create_engine(&#39;postgresql://{}:{}@{}:{}/{}&#39;.format(user,password,host,port,database)) except (Exception, Error) as error: print(&quot;Error while connecting to PostgreSQL&quot;, error) all_customers = pd.read_sql_query(&#39;select * from customers&#39;, conn) sales_people = pd.read_sql_query(&#39;select * from salespeople&#39;, conn) sql_query = &quot;&quot;&quot;select * from sales inner join dealerships on sales.dealership_id = dealerships.dealership_id order by 1&quot;&quot;&quot; sales_dealers = pd.read_sql_query(sql_query, conn) latest_data = all_customers.tail(50) st.write(&quot;Total number of Customers :&quot;, all_customers.shape[0]) st.write(&quot;Total Sales :&quot;, sales_dealers[&#39;sales_amount&#39;].sum(), &quot;$&quot;) comment=&#39;&#39;&#39;Create sidebar&#39;&#39;&#39; st.sidebar.title(&quot;Filter data&quot;) state_temp = all_customers[all_customers[&#39;state&#39;].notna()] city_temp = all_customers[all_customers[&#39;city&#39;].notna()] comment=&#39;&#39;&#39;Sidebar dropdown mutiselection&#39;&#39;&#39; state_list = st.sidebar.multiselect(&quot;Select State&quot;, state_temp[&#39;state&#39;].unique()) city_list = st.sidebar.multiselect(&quot;Select City&quot;, city_temp[&#39;city&#39;].unique()) if state_list!=[]: df_filtered = all_customers[(all_customers[&#39;state&#39;].isin(state_list))] st.write(df_filtered) if city_list!=[]: df_filtered = all_customers[(all_customers[&#39;city&#39;].isin(city_list))] st.write(df_filtered) def plot_value_counts_over_time(df,col,color): data = df[col].value_counts() data = pd.DataFrame(data) fig, ax = plt.subplots(figsize=(15, 8)) ax.bar(data.index.values, data[col], color=color) fsize = 16 plt.xlabel(&quot;Time&quot;,fontsize = fsize) plt.ylabel(&quot;Count of Customers&quot;,fontsize = fsize) plt.title(&quot;Customer Counts over Time&quot;,fontsize = fsize) st.write(fig) def plot_bar_over_variable(df,col,people,color): data = df[col].value_counts() data = pd.DataFrame(data).head(20) fig, ax = plt.subplots(figsize=(15, 8)) ax.bar(data.index.values, data[col], color=color) fsize = 16 plt.xlabel(&quot;{}&quot;.format(col),fontsize = fsize) plt.ylabel(&quot;Count of {}&quot;.format(people),fontsize = fsize) plt.title(&quot;{} Counts by {}&quot;.format(people,col),fontsize = fsize) st.write(fig) def plot_pie_over_variable(df,col,labels,people): data = df[col].value_counts() data = pd.DataFrame(data) fig, ax = plt.subplots(figsize=(4, 4)) ax.pie(data[col],labels=labels, autopct=&#39;%1.1f%%&#39;, shadow=True, startangle=90) fsize = 16 plt.xlabel(&quot;{}&quot;.format(col),fontsize = fsize) plt.title(&quot;{} by {}&quot;.format(people,col),fontsize = fsize) st.write(fig) def pivot_count(df,col): data = df[col].value_counts() data = pd.DataFrame(data) return data state_df = pivot_count(all_customers,&#39;state&#39;) state_df.columns = [&#39;Customer Count&#39;] row2_1, row2_2 = st.beta_columns((1,1)) with row2_1: plot_value_counts_over_time(all_customers,&#39;date_added&#39;,&#39;purple&#39;) with row2_2: fig, ax = plt.subplots(figsize=(15, 8)) fig = px.choropleth(state_df, # Input Pandas DataFrame locations=state_df.index, # DataFrame column with locations color=&quot;Customer Count&quot;, # DataFrame column with color values hover_name=&quot;Customer Count&quot;, # DataFrame column hover info locationmode = &#39;USA-states&#39;) # Set to plot as US States fig.update_layout( title_text = &#39;State Rankings by Customer Count&#39;, # Create a Title geo_scope=&#39;usa&#39;, # Plot only the USA instead of globe ) st.write(fig) row3_1, row3_2 = st.beta_columns((1,1)) labels = &quot;Female&quot;, &quot;Male&quot; with row3_1: # plot_pie_over_variable(all_customers,&#39;gender&#39;,labels, &#39;Customer&#39;) plot_bar_over_variable(all_customers,&#39;city&#39;, &#39;Customer&#39;, &#39;indigo&#39;) sales_df = pd.DataFrame(sales_dealers.groupby(&#39;state&#39;).sum()[&#39;sales_amount&#39;]) with row3_2: fig, ax = plt.subplots(figsize=(15, 8)) fig = px.choropleth(sales_df, # Input Pandas DataFrame locations=sales_df.index, # DataFrame column with locations color=&quot;sales_amount&quot;, # DataFrame column with color values hover_name=&quot;sales_amount&quot;, # DataFrame column hover info locationmode = &#39;USA-states&#39;) # Set to plot as US States fig.update_layout( title_text = &#39;State Rankings by Sales Amount&#39;, # Create a Title geo_scope=&#39;usa&#39;, # Plot only the USA instead of globe ) st.write(fig) row4_1, row4_2, row4_3 = st.beta_columns((1,1,1)) sql_query = &quot;&quot;&quot;select * from salespeople inner join dealerships on salespeople.dealership_id = dealerships.dealership_id where dealerships.state=&#39;CA&#39; order by 1&quot;&quot;&quot; CA_dealers = pd.read_sql_query(sql_query, conn) with row4_1: plot_pie_over_variable(all_customers,&#39;gender&#39;,labels, &#39;Customer&#39;) with row4_2: plot_pie_over_variable(sales_people,&#39;gender&#39;,labels, &#39;Salespeople&#39;) labels = &quot;LA&quot;, &quot;San Mateo&quot; with row4_3: plot_pie_over_variable(CA_dealers,&#39;city&#39;,labels, &#39;California&#39;) .",
            "url": "https://mdsohelmahmood.github.io/2021/06/29/Streamlit-01.html",
            "relUrl": "/2021/06/29/Streamlit-01.html",
            "date": " • Jun 29, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Feature Selection and Elimination",
            "content": "import pandas as pd from category_encoders import OrdinalEncoder from lightgbm import LGBMRegressor from sklearn.model_selection import train_test_split . from shapash.data.data_loader import data_loading house_df, house_dict = data_loading(&#39;house_prices&#39;) y_df=house_df[&#39;SalePrice&#39;].to_frame() X_df=house_df[house_df.columns.difference([&#39;SalePrice&#39;])] . house_dict . {&#39;MSSubClass&#39;: &#39;Building Class&#39;, &#39;MSZoning&#39;: &#39;General zoning classification&#39;, &#39;LotArea&#39;: &#39;Lot size square feet&#39;, &#39;Street&#39;: &#39;Type of road access&#39;, &#39;LotShape&#39;: &#39;General shape of property&#39;, &#39;LandContour&#39;: &#39;Flatness of the property&#39;, &#39;Utilities&#39;: &#39;Type of utilities available&#39;, &#39;LotConfig&#39;: &#39;Lot configuration&#39;, &#39;LandSlope&#39;: &#39;Slope of property&#39;, &#39;Neighborhood&#39;: &#39;Physical locations within Ames city limits&#39;, &#39;Condition1&#39;: &#39;Proximity to various conditions&#39;, &#39;Condition2&#39;: &#39;Proximity to other various conditions&#39;, &#39;BldgType&#39;: &#39;Type of dwelling&#39;, &#39;HouseStyle&#39;: &#39;Style of dwelling&#39;, &#39;OverallQual&#39;: &#39;Overall material and finish of the house&#39;, &#39;OverallCond&#39;: &#39;Overall condition of the house&#39;, &#39;YearBuilt&#39;: &#39;Original construction date&#39;, &#39;YearRemodAdd&#39;: &#39;Remodel date&#39;, &#39;RoofStyle&#39;: &#39;Type of roof&#39;, &#39;RoofMatl&#39;: &#39;Roof material&#39;, &#39;Exterior1st&#39;: &#39;Exterior covering on house&#39;, &#39;Exterior2nd&#39;: &#39;Other exterior covering on house&#39;, &#39;MasVnrType&#39;: &#39;Masonry veneer type&#39;, &#39;MasVnrArea&#39;: &#39;Masonry veneer area in square feet&#39;, &#39;ExterQual&#39;: &#34;Exterior materials&#39; quality&#34;, &#39;ExterCond&#39;: &#34;Exterior materials&#39; condition&#34;, &#39;Foundation&#39;: &#39;Type of foundation&#39;, &#39;BsmtQual&#39;: &#39;Height of the basement&#39;, &#39;BsmtCond&#39;: &#39;General condition of the basement&#39;, &#39;BsmtExposure&#39;: &#39;Refers to walkout or garden level walls&#39;, &#39;BsmtFinType1&#39;: &#39;Rating of basement finished area&#39;, &#39;BsmtFinSF1&#39;: &#39;Type 1 finished square feet&#39;, &#39;BsmtFinType2&#39;: &#39;Rating of basement finished area (if present)&#39;, &#39;BsmtFinSF2&#39;: &#39;Type 2 finished square feet&#39;, &#39;BsmtUnfSF&#39;: &#39;Unfinished square feet of basement area&#39;, &#39;TotalBsmtSF&#39;: &#39;Total square feet of basement area&#39;, &#39;Heating&#39;: &#39;Type of heating&#39;, &#39;HeatingQC&#39;: &#39;Heating quality and condition&#39;, &#39;CentralAir&#39;: &#39;Central air conditioning&#39;, &#39;Electrical&#39;: &#39;Electrical system&#39;, &#39;1stFlrSF&#39;: &#39;First Floor square feet&#39;, &#39;2ndFlrSF&#39;: &#39;Second floor square feet&#39;, &#39;LowQualFinSF&#39;: &#39;Low quality finished square feet&#39;, &#39;GrLivArea&#39;: &#39;Ground living area square feet&#39;, &#39;BsmtFullBath&#39;: &#39;Basement full bathrooms&#39;, &#39;BsmtHalfBath&#39;: &#39;Basement half bathrooms&#39;, &#39;FullBath&#39;: &#39;Full bathrooms above grade&#39;, &#39;HalfBath&#39;: &#39;Half baths above grade&#39;, &#39;BedroomAbvGr&#39;: &#39;Bedrooms above grade&#39;, &#39;KitchenAbvGr&#39;: &#39;Kitchens above grade&#39;, &#39;KitchenQual&#39;: &#39;Kitchen quality&#39;, &#39;TotRmsAbvGrd&#39;: &#39;Total rooms above grade&#39;, &#39;Functional&#39;: &#39;Home functionality&#39;, &#39;Fireplaces&#39;: &#39;Number of fireplaces&#39;, &#39;GarageType&#39;: &#39;Garage location&#39;, &#39;GarageYrBlt&#39;: &#39;Year garage was built&#39;, &#39;GarageFinish&#39;: &#39;Interior finish of the garage?&#39;, &#39;GarageArea&#39;: &#39;Size of garage in square feet&#39;, &#39;GarageQual&#39;: &#39;Garage quality&#39;, &#39;GarageCond&#39;: &#39;Garage condition&#39;, &#39;PavedDrive&#39;: &#39;Paved driveway&#39;, &#39;WoodDeckSF&#39;: &#39;Wood deck area in square feet&#39;, &#39;OpenPorchSF&#39;: &#39;Open porch area in square feet&#39;, &#39;EnclosedPorch&#39;: &#39;Enclosed porch area in square feet&#39;, &#39;3SsnPorch&#39;: &#39;Three season porch area in square feet&#39;, &#39;ScreenPorch&#39;: &#39;Screen porch area in square feet&#39;, &#39;PoolArea&#39;: &#39;Pool area in square feet&#39;, &#39;MiscVal&#39;: &#39;$Value of miscellaneous feature&#39;, &#39;MoSold&#39;: &#39;Month Sold&#39;, &#39;YrSold&#39;: &#39;Year Sold&#39;, &#39;SaleType&#39;: &#39;Type of sale&#39;, &#39;SaleCondition&#39;: &#39;Condition of sale&#39;} . Encoding categorical features . from category_encoders import OrdinalEncoder X_df=house_df[house_df.columns.difference([&#39;SalePrice&#39;])] categorical_features = [col for col in X_df.columns if X_df[col].dtype == &#39;object&#39;] encoder = OrdinalEncoder( cols=categorical_features, handle_unknown=&#39;ignore&#39;, return_df=True).fit(X_df) X_df=encoder.transform(X_df) . C: Users adnan anaconda3 lib site-packages category_encoders utils.py:21: FutureWarning: is_categorical is deprecated and will be removed in a future version. Use is_categorical_dtype instead . Xtrain, Xtest, ytrain, ytest = train_test_split(X_df, y_df, train_size=0.75, random_state=1) regressor = LGBMRegressor(n_estimators=200).fit(Xtrain,ytrain) y_pred = pd.DataFrame(regressor.predict(Xtest),columns=[&#39;pred&#39;],index=Xtest.index) . Initiate smart explainer . from shapash.explainer.smart_explainer import SmartExplainer xpl = SmartExplainer(features_dict=house_dict) xpl.compile( x=Xtest, model=regressor, preprocessing=encoder, # Optional: compile step can use inverse_transform method y_pred=y_pred # Optional ) . Backend: Shap TreeExplainer . xpl.plot.features_importance() . xpl.plot.contribution_plot(&quot;OverallQual&quot;) . xpl.plot.contribution_plot(&quot;GrLivArea&quot;) . xpl.plot.contribution_plot(&quot;HouseStyle&quot;) . Converting features and target to numpy array . arr_features = X_df.to_numpy() arr_target = house[&#39;SalePrice&#39;].to_numpy() . from sklearn.feature_selection import RFE clf = LGBMRegressor(n_estimators=200) clf.fit(arr_features, arr_target) # rfe = RFE(estimator=LGBMRegressor(n_estimators=200)) # rfe.fit(arr_features, arr_target) . LGBMRegressor(n_estimators=200) . Get True/False for column selection . rfe.support_ . array([ True, True, False, True, False, False, True, True, False, True, False, True, False, True, True, False, False, False, False, False, False, False, True, True, True, False, False, False, True, False, True, False, False, True, True, False, False, True, True, False, False, False, False, True, True, True, False, True, False, True, False, False, True, True, True, True, True, False, False, False, True, True, False, False, False, True, True, False, True, True, True, True]) . These columns were selected . house_full.columns[rfe.support_] . Index([&#39;1stFlrSF&#39;, &#39;2ndFlrSF&#39;, &#39;BedroomAbvGr&#39;, &#39;BsmtExposure&#39;, &#39;BsmtFinSF1&#39;, &#39;BsmtFinType1&#39;, &#39;BsmtFullBath&#39;, &#39;BsmtQual&#39;, &#39;BsmtUnfSF&#39;, &#39;Exterior1st&#39;, &#39;Exterior2nd&#39;, &#39;Fireplaces&#39;, &#39;GarageArea&#39;, &#39;GarageFinish&#39;, &#39;GarageYrBlt&#39;, &#39;GrLivArea&#39;, &#39;HeatingQC&#39;, &#39;HouseStyle&#39;, &#39;LotArea&#39;, &#39;LotConfig&#39;, &#39;LotShape&#39;, &#39;MSSubClass&#39;, &#39;MasVnrArea&#39;, &#39;MoSold&#39;, &#39;Neighborhood&#39;, &#39;OpenPorchSF&#39;, &#39;OverallCond&#39;, &#39;OverallQual&#39;, &#39;RoofStyle&#39;, &#39;SaleCondition&#39;, &#39;TotRmsAbvGrd&#39;, &#39;TotalBsmtSF&#39;, &#39;WoodDeckSF&#39;, &#39;YearBuilt&#39;, &#39;YearRemodAdd&#39;, &#39;YrSold&#39;], dtype=&#39;object&#39;) . rfe.ranking_ . array([ 1, 1, 23, 1, 7, 10, 1, 1, 17, 1, 19, 1, 26, 1, 1, 27, 8, 28, 14, 11, 5, 16, 1, 1, 1, 6, 22, 21, 1, 29, 1, 25, 4, 1, 1, 9, 32, 1, 1, 31, 12, 20, 15, 1, 1, 1, 35, 1, 3, 1, 2, 30, 1, 1, 1, 1, 1, 18, 36, 34, 1, 1, 13, 24, 33, 1, 1, 37, 1, 1, 1, 1]) . for i in range(house_full.shape[1]): # if rfe.ranking_[i] ==1: print(&#39;Column: {}, {} Selected: {}, Rank: {}&#39;.format(i, house_full.columns[i], rfe.support_[i], rfe.ranking_[i])) . Column: 0, 1stFlrSF Selected: True, Rank: 1 Column: 1, 2ndFlrSF Selected: True, Rank: 1 Column: 2, 3SsnPorch Selected: False, Rank: 23 Column: 3, BedroomAbvGr Selected: True, Rank: 1 Column: 4, BldgType Selected: False, Rank: 7 Column: 5, BsmtCond Selected: False, Rank: 10 Column: 6, BsmtExposure Selected: True, Rank: 1 Column: 7, BsmtFinSF1 Selected: True, Rank: 1 Column: 8, BsmtFinSF2 Selected: False, Rank: 17 Column: 9, BsmtFinType1 Selected: True, Rank: 1 Column: 10, BsmtFinType2 Selected: False, Rank: 19 Column: 11, BsmtFullBath Selected: True, Rank: 1 Column: 12, BsmtHalfBath Selected: False, Rank: 26 Column: 13, BsmtQual Selected: True, Rank: 1 Column: 14, BsmtUnfSF Selected: True, Rank: 1 Column: 15, CentralAir Selected: False, Rank: 27 Column: 16, Condition1 Selected: False, Rank: 8 Column: 17, Condition2 Selected: False, Rank: 28 Column: 18, Electrical Selected: False, Rank: 14 Column: 19, EnclosedPorch Selected: False, Rank: 11 Column: 20, ExterCond Selected: False, Rank: 5 Column: 21, ExterQual Selected: False, Rank: 16 Column: 22, Exterior1st Selected: True, Rank: 1 Column: 23, Exterior2nd Selected: True, Rank: 1 Column: 24, Fireplaces Selected: True, Rank: 1 Column: 25, Foundation Selected: False, Rank: 6 Column: 26, FullBath Selected: False, Rank: 22 Column: 27, Functional Selected: False, Rank: 21 Column: 28, GarageArea Selected: True, Rank: 1 Column: 29, GarageCond Selected: False, Rank: 29 Column: 30, GarageFinish Selected: True, Rank: 1 Column: 31, GarageQual Selected: False, Rank: 25 Column: 32, GarageType Selected: False, Rank: 4 Column: 33, GarageYrBlt Selected: True, Rank: 1 Column: 34, GrLivArea Selected: True, Rank: 1 Column: 35, HalfBath Selected: False, Rank: 9 Column: 36, Heating Selected: False, Rank: 32 Column: 37, HeatingQC Selected: True, Rank: 1 Column: 38, HouseStyle Selected: True, Rank: 1 Column: 39, KitchenAbvGr Selected: False, Rank: 31 Column: 40, KitchenQual Selected: False, Rank: 12 Column: 41, LandContour Selected: False, Rank: 20 Column: 42, LandSlope Selected: False, Rank: 15 Column: 43, LotArea Selected: True, Rank: 1 Column: 44, LotConfig Selected: True, Rank: 1 Column: 45, LotShape Selected: True, Rank: 1 Column: 46, LowQualFinSF Selected: False, Rank: 35 Column: 47, MSSubClass Selected: True, Rank: 1 Column: 48, MSZoning Selected: False, Rank: 3 Column: 49, MasVnrArea Selected: True, Rank: 1 Column: 50, MasVnrType Selected: False, Rank: 2 Column: 51, MiscVal Selected: False, Rank: 30 Column: 52, MoSold Selected: True, Rank: 1 Column: 53, Neighborhood Selected: True, Rank: 1 Column: 54, OpenPorchSF Selected: True, Rank: 1 Column: 55, OverallCond Selected: True, Rank: 1 Column: 56, OverallQual Selected: True, Rank: 1 Column: 57, PavedDrive Selected: False, Rank: 18 Column: 58, PoolArea Selected: False, Rank: 36 Column: 59, RoofMatl Selected: False, Rank: 34 Column: 60, RoofStyle Selected: True, Rank: 1 Column: 61, SaleCondition Selected: True, Rank: 1 Column: 62, SaleType Selected: False, Rank: 13 Column: 63, ScreenPorch Selected: False, Rank: 24 Column: 64, Street Selected: False, Rank: 33 Column: 65, TotRmsAbvGrd Selected: True, Rank: 1 Column: 66, TotalBsmtSF Selected: True, Rank: 1 Column: 67, Utilities Selected: False, Rank: 37 Column: 68, WoodDeckSF Selected: True, Rank: 1 Column: 69, YearBuilt Selected: True, Rank: 1 Column: 70, YearRemodAdd Selected: True, Rank: 1 Column: 71, YrSold Selected: True, Rank: 1 . Get coefficient when rfe is not used and only the estimator is used . clf = LGBMRegressor(n_estimators=200) . clf.fit(arr_features, arr_target) --&gt; . rfe = RFE(estimator=LGBMRegressor(n_estimators=200)) . rfe.fit(arr_features, arr_target) . import numpy as np coeff = np.absolute(clf.feature_importances_) coeff . array([391, 190, 7, 32, 3, 11, 50, 360, 32, 39, 11, 21, 7, 33, 248, 19, 46, 0, 8, 55, 8, 41, 86, 62, 35, 12, 31, 21, 343, 5, 40, 4, 28, 179, 455, 16, 2, 20, 24, 10, 44, 39, 5, 466, 34, 26, 8, 45, 43, 227, 25, 0, 141, 163, 290, 96, 166, 15, 0, 12, 14, 67, 18, 28, 0, 86, 416, 0, 153, 139, 148, 101]) . Use of Scikit-Learn in iris data . from sklearn.datasets import load_iris from sklearn.feature_selection import SelectKBest from sklearn.feature_selection import chi2, SelectPercentile X, y = load_iris(return_X_y=True) X.shape . (150, 4) . X = pd.DataFrame(X) y = pd.DataFrame(y) X.columns = [&#39;sepal length&#39;,&#39;sepal width&#39;,&#39;petal length&#39;,&#39;petal width&#39;] y.columns = [&#39;target&#39;] . X_new = SelectKBest(chi2, k=2).fit(X, y) feature_ids = X_new.get_support(indices=True) feature_names = X.columns[feature_ids] feature_names . Index([&#39;petal length&#39;, &#39;petal width&#39;], dtype=&#39;object&#39;) . X.describe() . sepal length sepal width petal length petal width . count 150.000000 | 150.000000 | 150.000000 | 150.000000 | . mean 5.843333 | 3.057333 | 3.758000 | 1.199333 | . std 0.828066 | 0.435866 | 1.765298 | 0.762238 | . min 4.300000 | 2.000000 | 1.000000 | 0.100000 | . 25% 5.100000 | 2.800000 | 1.600000 | 0.300000 | . 50% 5.800000 | 3.000000 | 4.350000 | 1.300000 | . 75% 6.400000 | 3.300000 | 5.100000 | 1.800000 | . max 7.900000 | 4.400000 | 6.900000 | 2.500000 | . Housing data . X_new = SelectKBest(chi2, k=10).fit(X_df, y_df) feature_ids = X_new.get_support(indices=True) feature_names = X_df.columns[feature_ids] feature_names . Index([&#39;2ndFlrSF&#39;, &#39;BsmtFinSF1&#39;, &#39;BsmtFinSF2&#39;, &#39;BsmtUnfSF&#39;, &#39;GrLivArea&#39;, &#39;LotArea&#39;, &#39;LowQualFinSF&#39;, &#39;MasVnrArea&#39;, &#39;MiscVal&#39;, &#39;PoolArea&#39;], dtype=&#39;object&#39;) . Use of Shapash . Xtrain, Xtest, ytrain, ytest = train_test_split(X, y, train_size=0.75, random_state=1) regressor = LGBMRegressor(n_estimators=200).fit(Xtrain,ytrain) y_pred = pd.DataFrame(regressor.predict(Xtest),columns=[&#39;pred&#39;],index=Xtest.index) . from shapash.explainer.smart_explainer import SmartExplainer xpl = SmartExplainer() xpl.compile( x=Xtest, model=regressor, # preprocessing=encoder, # Optional: compile step can use inverse_transform method y_pred=y_pred # Optional ) xpl.plot.features_importance() . Backend: Shap TreeExplainer . xpl.plot.contribution_plot(&quot;petal length&quot;) . y_pred . pred . 14 -0.016183 | . 98 0.798744 | . 75 1.096621 | . 16 0.027792 | . 131 1.973971 | . 56 0.983864 | . 141 1.894806 | . 44 0.334409 | . 29 -0.063523 | . 120 1.973971 | . 94 1.107046 | . 5 -0.026993 | . 102 2.070524 | . 51 0.971351 | . 78 1.087391 | . 42 -0.031257 | . 92 0.952524 | . 66 1.121446 | . 31 0.027792 | . 35 -0.031257 | . 90 1.111508 | . 84 1.125908 | . 77 2.041527 | . 40 -0.032111 | . 125 2.012844 | . 99 1.071896 | . 33 -0.004964 | . 19 -0.018945 | . 73 1.082060 | . 146 2.017822 | . 91 1.206572 | . 135 2.070524 | . 69 1.014615 | . 128 2.053094 | . 114 2.053115 | . 48 -0.004964 | . 53 1.035325 | . 28 -0.004964 | . xpl.plot.local_plot(index=128) . xpl.plot.local_plot(index=146) .",
            "url": "https://mdsohelmahmood.github.io/2021/06/27/Shapash-and-Scikit-Learn-for-Feature-Selection.html",
            "relUrl": "/2021/06/27/Shapash-and-Scikit-Learn-for-Feature-Selection.html",
            "date": " • Jun 27, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Spam email classification using Naive Bayes, SVC and Random Forest",
            "content": "import numpy as np import pandas as pd import nltk from nltk.corpus import stopwords import matplotlib.pyplot as plt from wordcloud import WordCloud, ImageColorGenerator from PIL import Image import re from nltk.tokenize import word_tokenize as wt from nltk.stem.porter import PorterStemmer from nltk.stem import WordNetLemmatizer . spam = pd.read_csv(&#39;spam.csv&#39;, encoding=&#39;latin-1&#39;) spam.head(10) . v1 v2 Unnamed: 2 Unnamed: 3 Unnamed: 4 . 0 ham | Go until jurong point, crazy.. Available only ... | NaN | NaN | NaN | . 1 ham | Ok lar... Joking wif u oni... | NaN | NaN | NaN | . 2 spam | Free entry in 2 a wkly comp to win FA Cup fina... | NaN | NaN | NaN | . 3 ham | U dun say so early hor... U c already then say... | NaN | NaN | NaN | . 4 ham | Nah I don&#39;t think he goes to usf, he lives aro... | NaN | NaN | NaN | . 5 spam | FreeMsg Hey there darling it&#39;s been 3 week&#39;s n... | NaN | NaN | NaN | . 6 ham | Even my brother is not like to speak with me. ... | NaN | NaN | NaN | . 7 ham | As per your request &#39;Melle Melle (Oru Minnamin... | NaN | NaN | NaN | . 8 spam | WINNER!! As a valued network customer you have... | NaN | NaN | NaN | . 9 spam | Had your mobile 11 months or more? U R entitle... | NaN | NaN | NaN | . spam = spam.filter([&#39;v1&#39;,&#39;v2&#39;], axis=1) spam.columns = [&#39;label&#39;, &#39;text&#39;] spam . label text . 0 ham | Go until jurong point, crazy.. Available only ... | . 1 ham | Ok lar... Joking wif u oni... | . 2 spam | Free entry in 2 a wkly comp to win FA Cup fina... | . 3 ham | U dun say so early hor... U c already then say... | . 4 ham | Nah I don&#39;t think he goes to usf, he lives aro... | . ... ... | ... | . 5567 spam | This is the 2nd time we have tried 2 contact u... | . 5568 ham | Will Ì_ b going to esplanade fr home? | . 5569 ham | Pity, * was in mood for that. So...any other s... | . 5570 ham | The guy did some bitching but I acted like i&#39;d... | . 5571 ham | Rofl. Its true to its name | . 5572 rows × 2 columns . spam_data = spam[spam[&#39;label&#39;] == &#39;spam&#39;] real_data = spam[spam[&#39;label&#39;] == &#39;ham&#39;] . Let&#39;s stem and then lemmatize the bag of words. According to Stanford NLP Group, . &quot;Stemming usually refers to a crude heuristic process that chops off the ends of . words in the hope of achieving this goal correctly most of the time, and often includes . the removal of derivational affixes. Lemmatization usually refers to doing things . properly with the use of a vocabulary and morphological analysis of words, normally . aiming to remove inflectional endings only and to return the base or dictionary . form of a word, which is known as the lemma.&quot; . Here the stemming is applied to all data, spam data and real data separately . all_data_stem = [] spam_data_stem = [] real_data_stem = [] stemmer = PorterStemmer() for i in range(spam.shape[0]): sms = spam.iloc[i, 1] sms = re.sub(&#39;[^A-Za-z]&#39;, &#39; &#39;, sms) sms = sms.lower() tokenized_sms = wt(sms) sms_processed = [] for word in tokenized_sms: if word not in set(stopwords.words(&#39;english&#39;)): sms_processed.append(stemmer.stem(word)) sms_text = &quot; &quot;.join(sms_processed) all_data_stem.append(sms_text) for i in range(spam_data.shape[0]): sms = spam_data.iloc[i, 1] sms = re.sub(&#39;[^A-Za-z]&#39;, &#39; &#39;, sms) sms = sms.lower() tokenized_sms = wt(sms) sms_processed = [] for word in tokenized_sms: if word not in set(stopwords.words(&#39;english&#39;)): sms_processed.append(stemmer.stem(word)) sms_text = &quot; &quot;.join(sms_processed) spam_data_stem.append(sms_text) for i in range(real_data.shape[0]): sms = real_data.iloc[i, 1] sms = re.sub(&#39;[^A-Za-z]&#39;, &#39; &#39;, sms) sms = sms.lower() tokenized_sms = wt(sms) sms_processed = [] for word in tokenized_sms: if word not in set(stopwords.words(&#39;english&#39;)): sms_processed.append(stemmer.stem(word)) sms_text = &quot; &quot;.join(sms_processed) real_data_stem.append(sms_text) all_data_stem[0] . &#39;go jurong point crazi avail bugi n great world la e buffet cine got amor wat&#39; . Here the lemmatizer is applied to all data, spam data and real data separately . all_data_lemma = [] spam_data_lemma = [] real_data_lemma = [] lemmatizer = WordNetLemmatizer() for i in range(spam.shape[0]): sms = spam.iloc[i, 1] sms = re.sub(&#39;[^A-Za-z]&#39;, &#39; &#39;, sms) sms = sms.lower() tokenized_sms = wt(sms) sms_processed = [] for word in tokenized_sms: if word not in set(stopwords.words(&#39;english&#39;)): sms_processed.append(lemmatizer.lemmatize(word)) sms_text = &quot; &quot;.join(sms_processed) all_data_lemma.append(sms_text) for i in range(spam_data.shape[0]): sms = spam_data.iloc[i, 1] sms = re.sub(&#39;[^A-Za-z]&#39;, &#39; &#39;, sms) sms = sms.lower() tokenized_sms = wt(sms) sms_processed = [] for word in tokenized_sms: if word not in set(stopwords.words(&#39;english&#39;)): sms_processed.append(lemmatizer.lemmatize(word)) sms_text = &quot; &quot;.join(sms_processed) spam_data_lemma.append(sms_text) for i in range(real_data.shape[0]): sms = real_data.iloc[i, 1] sms = re.sub(&#39;[^A-Za-z]&#39;, &#39; &#39;, sms) sms = sms.lower() tokenized_sms = wt(sms) sms_processed = [] for word in tokenized_sms: if word not in set(stopwords.words(&#39;english&#39;)): sms_processed.append(lemmatizer.lemmatize(word)) sms_text = &quot; &quot;.join(sms_processed) real_data_lemma.append(sms_text) all_data_lemma[0] . &#39;go jurong point crazy available bugis n great world la e buffet cine got amore wat&#39; . As it is obvious from the first data that stem and lemma works in different ways. For example, the word &quot;availability&quot; has stem of &quot;avail&quot; but lemma of &quot;available&quot; . spam.drop_duplicates(inplace = True) spam . label text . 0 ham | Go until jurong point, crazy.. Available only ... | . 1 ham | Ok lar... Joking wif u oni... | . 2 spam | Free entry in 2 a wkly comp to win FA Cup fina... | . 3 ham | U dun say so early hor... U c already then say... | . 4 ham | Nah I don&#39;t think he goes to usf, he lives aro... | . ... ... | ... | . 5567 spam | This is the 2nd time we have tried 2 contact u... | . 5568 ham | Will Ì_ b going to esplanade fr home? | . 5569 ham | Pity, * was in mood for that. So...any other s... | . 5570 ham | The guy did some bitching but I acted like i&#39;d... | . 5571 ham | Rofl. Its true to its name | . 5169 rows × 2 columns . spam.isnull().sum() . label 0 text 0 dtype: int64 . Label with numerical values . spam[&#39;num_label&#39;] = spam[&#39;label&#39;].map({&#39;ham&#39;: 0, &#39;spam&#39;: 1}) spam.head() . label text num_label . 0 ham | Go until jurong point, crazy.. Available only ... | 0 | . 1 ham | Ok lar... Joking wif u oni... | 0 | . 2 spam | Free entry in 2 a wkly comp to win FA Cup fina... | 1 | . 3 ham | U dun say so early hor... U c already then say... | 0 | . 4 ham | Nah I don&#39;t think he goes to usf, he lives aro... | 0 | . Let&#39;s create wordcloud to see the most frequent words . spam_words = &#39; &#39;.join(list(spam[spam[&#39;num_label&#39;] == 1][&#39;text&#39;])) spam_wc = WordCloud(width = 600,height = 512).generate(spam_words) plt.figure(figsize = (12, 8), facecolor = &#39;k&#39;) plt.imshow(spam_wc) plt.axis(&#39;off&#39;) plt.tight_layout(pad = 0) plt.show() . real_words = &#39; &#39;.join(list(spam[spam[&#39;num_label&#39;] == 0][&#39;text&#39;])) real_wc = WordCloud(width = 600,height = 512).generate(real_words) plt.figure(figsize = (12, 8), facecolor = &#39;k&#39;) plt.imshow(real_wc) plt.axis(&#39;off&#39;) plt.tight_layout(pad = 0) plt.show() . from nltk import FreqDist spam_token = nltk.tokenize.word_tokenize(spam_words) spam_freq = FreqDist(spam_token) spam_freq . FreqDist({&#39;.&#39;: 1004, &#39;to&#39;: 608, &#39;!&#39;: 542, &#39;,&#39;: 371, &#39;a&#39;: 358, &#39;you&#39;: 189, &#39;call&#39;: 187, &#39;your&#39;: 187, &#39;or&#39;: 185, &#39;&amp;&#39;: 178, ...}) . spam_freq.most_common(5) . [(&#39;.&#39;, 1004), (&#39;to&#39;, 608), (&#39;!&#39;, 542), (&#39;,&#39;, 371), (&#39;a&#39;, 358)] . most common parts in the spam emails . FreqDist(spam_data_lemma).most_common(5) . [(&#39;private account statement show un redeemed point call identifier code expires&#39;, 9), (&#39;u secret admirer looking make contact u find r reveal think ur special call&#39;, 6), (&#39;urgent trying contact u today draw show prize guaranteed call land line claim valid hr&#39;, 5), (&#39;please call customer service representative freephone pm guaranteed cash prize&#39;, 4), (&#39;free st week nokia tone ur mob every week txt nokia get txting tell ur mate www getzed co uk pobox w wq norm p tone&#39;, 4)] . most common parts in the real emails . FreqDist(real_data_lemma).most_common(5) . [(&#39;sorry call later&#39;, 30), (&#39;ok&#39;, 20), (&#39;cant pick phone right pls send message&#39;, 12), (&#39;&#39;, 8), (&#39;okie&#39;, 7)] . Pass the tokenized words to obtain a dispersion plot in the text . text1 = nltk.Text(spam_token) text1.dispersion_plot([&#39;free&#39;,&#39;private&#39;,&#39;account&#39;,&#39;contact&#39;]) . create a model for the ML . from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split matrix = CountVectorizer(max_features=1000) X = matrix.fit_transform(all_data_lemma).toarray() y = spam.iloc[:, 0] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) . Let&#39;s try Naive Bayes Classifier . from sklearn.naive_bayes import GaussianNB classifier = GaussianNB() classifier.fit(X_train, y_train) . GaussianNB() . from sklearn.metrics import confusion_matrix, classification_report, accuracy_score y_pred = classifier.predict(X_test) cm = confusion_matrix(y_test, y_pred) rep = classification_report(y_test, y_pred) . The report shows that the model is performing well on detecting hams but bad on spams. . The precision for spams is ~0.38 indicating lots of false positives obtained from the model. . Although the model accuracy is 0.79, it might be misleading, . The recall for spam is high whereas the precision is low. This indicates that the model . is biased towards spams. It is able to correctly identify all spams but also wrongly identified . some hams as spams . print(rep) . precision recall f1-score support ham 0.98 0.77 0.86 968 spam 0.38 0.92 0.53 147 accuracy 0.79 1115 macro avg 0.68 0.84 0.70 1115 weighted avg 0.90 0.79 0.82 1115 . The confusion matrix also shows the similar scenario. The diagonal line does not have the . highest numbers. This means that the performance is not good enough for Naive Bayes. . cm . array([[744, 224], [ 12, 135]], dtype=int64) . Let&#39;s try Support Vector Classification . from sklearn.svm import SVC classifier = SVC() classifier.fit(X_train, y_train) . SVC() . y_pred = classifier.predict(X_test) cm = confusion_matrix(y_test, y_pred) rep = classification_report(y_test, y_pred) . The model performance is good. Precision and recall for both ham and spam is high . print(rep) . precision recall f1-score support ham 0.98 1.00 0.99 968 spam 0.98 0.86 0.92 147 accuracy 0.98 1115 macro avg 0.98 0.93 0.95 1115 weighted avg 0.98 0.98 0.98 1115 . Let&#39;s try Random Forest Classifier . from sklearn.ensemble import RandomForestClassifier classifier = RandomForestClassifier() classifier.fit(X_train, y_train) . RandomForestClassifier() . y_pred = classifier.predict(X_test) cm = confusion_matrix(y_test, y_pred) rep = classification_report(y_test, y_pred) . The model performance is also good. Precision and rcall for both ham and spam is high . print(rep) . precision recall f1-score support ham 0.98 1.00 0.99 968 spam 1.00 0.90 0.95 147 accuracy 0.99 1115 macro avg 0.99 0.95 0.97 1115 weighted avg 0.99 0.99 0.99 1115 .",
            "url": "https://mdsohelmahmood.github.io/2021/06/23/Spam-email-classification-using-NB-SVC-Random-Forest.html",
            "relUrl": "/2021/06/23/Spam-email-classification-using-NB-SVC-Random-Forest.html",
            "date": " • Jun 23, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Spam email classification in Tensorflow",
            "content": "import numpy as np import pandas as pd import tensorflow as tf from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences . Define the hyperparameters . vocab_size = 1000 embedding_dim = 64 max_length = 120 trunc_type=&#39;post&#39; padding_type=&#39;post&#39; oov_tok = &quot;&lt;OOV&gt;&quot; . spam = pd.read_csv(&#39;spam.csv&#39;, encoding=&#39;latin-1&#39;) spam = spam.filter([&#39;v1&#39;,&#39;v2&#39;], axis=1) spam.columns = [&#39;label&#39;, &#39;text&#39;] spam . label text . 0 ham | Go until jurong point, crazy.. Available only ... | . 1 ham | Ok lar... Joking wif u oni... | . 2 spam | Free entry in 2 a wkly comp to win FA Cup fina... | . 3 ham | U dun say so early hor... U c already then say... | . 4 ham | Nah I don&#39;t think he goes to usf, he lives aro... | . ... ... | ... | . 5567 spam | This is the 2nd time we have tried 2 contact u... | . 5568 ham | Will Ì_ b going to esplanade fr home? | . 5569 ham | Pity, * was in mood for that. So...any other s... | . 5570 ham | The guy did some bitching but I acted like i&#39;d... | . 5571 ham | Rofl. Its true to its name | . 5572 rows × 2 columns . First distinguish between the labels and the text . sentences = [] labels = [] for i in range(0,spam.shape[0],1): sentences.append(spam[&#39;text&#39;][i]) labels.append(spam[&#39;label&#39;][i]) . Allocate 80% of the data for training . training_size = int(spam.shape[0]*0.8) training_sentences = sentences[0:training_size] testing_sentences = sentences[training_size:] training_labels_str = labels[0:training_size] testing_labels_str = labels[training_size:] . Encoding the string labels to 0 and 1 (1 for real email and 0 for spam) . training_labels = [0] * len(training_labels_str) for ind,item in enumerate(training_labels_str): if item == &#39;ham&#39;: training_labels[ind] = 1 else: training_labels[ind] = 0 testing_labels = [0] * len(testing_labels_str) for ind,item in enumerate(testing_labels_str): if item == &#39;ham&#39;: testing_labels[ind] = 1 else: testing_labels[ind] = 0 . Converting texts and labels to numpy array to feed into the model . training_padded = np.array(training_padded) testing_padded = np.array(testing_padded) training_labels = np.array(training_labels) testing_labels = np.array(testing_labels) . Start tokenizing the text of the data . tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_tok) tokenizer.fit_on_texts(training_sentences) word_index = tokenizer.word_index . Pad the data to make all data have equal length . training_sequences = tokenizer.texts_to_sequences(training_sentences) training_padded = pad_sequences(training_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type) testing_sequences = tokenizer.texts_to_sequences(testing_sentences) testing_padded = pad_sequences(testing_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type) . Define the RNN model with bidirectional LSTM algorithm. . model = tf.keras.Sequential([ tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length), tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)), tf.keras.layers.Dense(24, activation=&#39;relu&#39;), tf.keras.layers.Dropout(0.25), tf.keras.layers.Dense(1, activation=&#39;sigmoid&#39;) ]) . adam = tf.keras.optimizers.Adam(learning_rate=0.0001, beta_1=0.9, beta_2=0.999, amsgrad=False) model.compile(loss=&#39;binary_crossentropy&#39;,optimizer=adam,metrics=[&#39;accuracy&#39;]) model.summary() . Model: &#34;sequential_2&#34; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= embedding_2 (Embedding) (None, 120, 64) 64000 _________________________________________________________________ bidirectional_2 (Bidirection (None, 64) 24832 _________________________________________________________________ dense_4 (Dense) (None, 24) 1560 _________________________________________________________________ dropout_2 (Dropout) (None, 24) 0 _________________________________________________________________ dense_5 (Dense) (None, 1) 25 ================================================================= Total params: 90,417 Trainable params: 90,417 Non-trainable params: 0 _________________________________________________________________ . num_epochs = 20 history = model.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels), verbose=1) . Epoch 1/20 140/140 [==============================] - 10s 46ms/step - loss: 0.5698 - accuracy: 0.8275 - val_loss: 0.3547 - val_accuracy: 0.8700 Epoch 2/20 140/140 [==============================] - 6s 41ms/step - loss: 0.3358 - accuracy: 0.8652 - val_loss: 0.2574 - val_accuracy: 0.8700 Epoch 3/20 140/140 [==============================] - 6s 41ms/step - loss: 0.2310 - accuracy: 0.8912 - val_loss: 0.1612 - val_accuracy: 0.9641 Epoch 4/20 140/140 [==============================] - 7s 49ms/step - loss: 0.1463 - accuracy: 0.9654 - val_loss: 0.1035 - val_accuracy: 0.9722 Epoch 5/20 140/140 [==============================] - 6s 46ms/step - loss: 0.1003 - accuracy: 0.9749 - val_loss: 0.0720 - val_accuracy: 0.9785 Epoch 6/20 140/140 [==============================] - 7s 49ms/step - loss: 0.0720 - accuracy: 0.9841 - val_loss: 0.0579 - val_accuracy: 0.9803 Epoch 7/20 140/140 [==============================] - 7s 48ms/step - loss: 0.0598 - accuracy: 0.9865 - val_loss: 0.0525 - val_accuracy: 0.9830 Epoch 8/20 140/140 [==============================] - 7s 49ms/step - loss: 0.0515 - accuracy: 0.9890 - val_loss: 0.0519 - val_accuracy: 0.9830 Epoch 9/20 140/140 [==============================] - 7s 48ms/step - loss: 0.0418 - accuracy: 0.9904 - val_loss: 0.0506 - val_accuracy: 0.9839 Epoch 10/20 140/140 [==============================] - 7s 48ms/step - loss: 0.0404 - accuracy: 0.9901 - val_loss: 0.0518 - val_accuracy: 0.9839 Epoch 11/20 140/140 [==============================] - 7s 48ms/step - loss: 0.0336 - accuracy: 0.9910 - val_loss: 0.0537 - val_accuracy: 0.9848 Epoch 12/20 140/140 [==============================] - 6s 44ms/step - loss: 0.0320 - accuracy: 0.9926 - val_loss: 0.0539 - val_accuracy: 0.9839 Epoch 13/20 140/140 [==============================] - 6s 46ms/step - loss: 0.0282 - accuracy: 0.9944 - val_loss: 0.0547 - val_accuracy: 0.9839 Epoch 14/20 140/140 [==============================] - 7s 51ms/step - loss: 0.0261 - accuracy: 0.9953 - val_loss: 0.0570 - val_accuracy: 0.9839 Epoch 15/20 140/140 [==============================] - 7s 48ms/step - loss: 0.0220 - accuracy: 0.9953 - val_loss: 0.0602 - val_accuracy: 0.9830 Epoch 16/20 140/140 [==============================] - 7s 49ms/step - loss: 0.0221 - accuracy: 0.9951 - val_loss: 0.0593 - val_accuracy: 0.9839 Epoch 17/20 140/140 [==============================] - 7s 49ms/step - loss: 0.0196 - accuracy: 0.9953 - val_loss: 0.0574 - val_accuracy: 0.9830 Epoch 18/20 140/140 [==============================] - 7s 48ms/step - loss: 0.0185 - accuracy: 0.9960 - val_loss: 0.0607 - val_accuracy: 0.9839 Epoch 19/20 140/140 [==============================] - 7s 48ms/step - loss: 0.0166 - accuracy: 0.9962 - val_loss: 0.0615 - val_accuracy: 0.9839 Epoch 20/20 140/140 [==============================] - 7s 49ms/step - loss: 0.0158 - accuracy: 0.9969 - val_loss: 0.0633 - val_accuracy: 0.9821 . import matplotlib.pyplot as plt def plot_graphs(history, string): plt.plot(history.history[string]) plt.plot(history.history[&#39;val_&#39;+string]) plt.xlabel(&quot;Epochs&quot;) plt.ylabel(string) plt.legend([string, &#39;val_&#39;+string]) plt.show() plot_graphs(history, &#39;accuracy&#39;) plot_graphs(history, &#39;loss&#39;) . X_train = training_padded X_test = testing_padded y_train = training_labels y_test = testing_labels . from sklearn.metrics import confusion_matrix, classification_report, accuracy_score y_pred = model.predict(X_test) # Convert predicted values to either 0 or 1 y_prediction = [0] * y_pred.shape[0] for ind,item in enumerate(y_pred): if item &gt; 0.5: y_prediction[ind] = 1 else: y_prediction[ind] = 0 rep = classification_report(y_test, y_prediction) . print(rep) . precision recall f1-score support 0 0.94 0.92 0.93 145 1 0.99 0.99 0.99 970 accuracy 0.98 1115 macro avg 0.97 0.95 0.96 1115 weighted avg 0.98 0.98 0.98 1115 . Check a random text . sample_text = [&quot;Winner!!! Darling please click the link to claim your free prize&quot;] sample_text_tokenized = tokenizer.texts_to_sequences(sample_text) sample_text_tokenized_padded = pad_sequences(sample_text_tokenized, maxlen=max_length, padding=padding_type, truncating=trunc_type) # 0 for spam and 1 for real pred = float(model.predict(sample_text_tokenized_padded)) if (pred&gt;0.5): print (&quot;This is a real email&quot;) else: print(&quot;This is a spam&quot;) . This is a spam .",
            "url": "https://mdsohelmahmood.github.io/2021/06/23/Spam-email-classification-Part2-Tensorflow.html",
            "relUrl": "/2021/06/23/Spam-email-classification-Part2-Tensorflow.html",
            "date": " • Jun 23, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Asian Restaurants",
            "content": "import numpy as np import pandas as pd import os for dirname, _, filenames in os.walk(&#39;/kaggle/input&#39;): for filename in filenames: print(os.path.join(dirname, filename)) . data = pd.read_csv(&quot;../input/asian-restaurants/asia.csv&quot;) data . case restaurant price gReviews gRating ddReviews ddRating ddFee yReviews yRating latitude longitude town . 0 2 | Sun Shui | 2 | 324 | 4.5 | 0 | 0.0 | 0.00 | 154 | 4.0 | 42.919826 | -71.461006 | Bedford | . 1 4 | Chen Yang Li B | 2 | 468 | 4.2 | 0 | 0.0 | 0.00 | 83 | 3.0 | 43.170056 | -71.535558 | Bow | . 2 6 | Dragon Star | 2 | 126 | 4.2 | 0 | 0.0 | 0.00 | 28 | 3.5 | 43.200392 | -71.532658 | Concord | . 3 11 | Siam Orchid Thai | 2 | 417 | 4.2 | 0 | 0.0 | 0.00 | 80 | 3.5 | 43.204658 | -71.535469 | Concord | . 4 12 | Splendid Sushi | 2 | 135 | 4.9 | 0 | 0.0 | 0.00 | 8 | 4.5 | 43.204005 | -71.536732 | Concord | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 98 85 | Wok N Roll | 2 | 107 | 4.3 | 2900 | 4.6 | 0.99 | 27 | 4.0 | 42.753885 | -71.462696 | Nashua | . 99 61 | Thousand Crane | 2 | 176 | 3.5 | 3700 | 4.6 | 1.99 | 99 | 3.0 | 42.992559 | -71.463695 | Manchester | . 100 50 | Kisaki Japanese | 2 | 590 | 4.4 | 3800 | 4.7 | 1.99 | 112 | 4.0 | 42.987353 | -71.462839 | Manchester | . 101 41 | Cheng Du Kitchen | 2 | 31 | 4.5 | 5900 | 4.7 | 3.99 | 41 | 3.5 | 43.016959 | -71.449888 | Manchester | . 102 103 | Jade Garden | 2 | 96 | 4.2 | 0 | 0.0 | 0.00 | 26 | 4.0 | 43.048281 | -71.434783 | Hooksett | . 103 rows × 13 columns . I have separated the numerical columns from the whole dataframes . numerics = [&#39;int16&#39;, &#39;int32&#39;, &#39;int64&#39;, &#39;float16&#39;, &#39;float32&#39;, &#39;float64&#39;] numeric_df = data.select_dtypes(include=numerics) numeric_df . case price gReviews gRating ddReviews ddRating ddFee yReviews yRating latitude longitude . 0 2 | 2 | 324 | 4.5 | 0 | 0.0 | 0.00 | 154 | 4.0 | 42.919826 | -71.461006 | . 1 4 | 2 | 468 | 4.2 | 0 | 0.0 | 0.00 | 83 | 3.0 | 43.170056 | -71.535558 | . 2 6 | 2 | 126 | 4.2 | 0 | 0.0 | 0.00 | 28 | 3.5 | 43.200392 | -71.532658 | . 3 11 | 2 | 417 | 4.2 | 0 | 0.0 | 0.00 | 80 | 3.5 | 43.204658 | -71.535469 | . 4 12 | 2 | 135 | 4.9 | 0 | 0.0 | 0.00 | 8 | 4.5 | 43.204005 | -71.536732 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 98 85 | 2 | 107 | 4.3 | 2900 | 4.6 | 0.99 | 27 | 4.0 | 42.753885 | -71.462696 | . 99 61 | 2 | 176 | 3.5 | 3700 | 4.6 | 1.99 | 99 | 3.0 | 42.992559 | -71.463695 | . 100 50 | 2 | 590 | 4.4 | 3800 | 4.7 | 1.99 | 112 | 4.0 | 42.987353 | -71.462839 | . 101 41 | 2 | 31 | 4.5 | 5900 | 4.7 | 3.99 | 41 | 3.5 | 43.016959 | -71.449888 | . 102 103 | 2 | 96 | 4.2 | 0 | 0.0 | 0.00 | 26 | 4.0 | 43.048281 | -71.434783 | . 103 rows × 11 columns . The boxplots for all the numerical columns are plotted . import matplotlib.pyplot as plt for col in numeric_df.columns: plt.title(&#39;Boxplot of {}&#39;.format(col)) plt.boxplot(data[col]) plt.show() . The initial distributions are plotted for all the numerical columns . for col in numeric_df.columns: plt.title(&#39;Boxplot of {}&#39;.format(col)) plt.hist(data[col]) plt.show() . Checking to see which town has the most ratings . pivot = data.pivot_table(index=[&#39;town&#39;], values=[&#39;yRating&#39;], aggfunc=&#39;count&#39;) print (pivot) . yRating town Bedford 3 Bow 1 Concord 10 Derry 6 East Hampstead 1 Epsom 1 Hampstead 1 Hooksett 2 Hudson 4 Londonderry 5 Manchester 31 Merrimack 5 Nashua 18 Pembroke 1 Penacook 1 Plaistow 2 Salem 9 Windham 2 . Basemap for plotting the map . from mpl_toolkits.basemap import Basemap plt.figure(figsize=(8, 8)) m = Basemap(projection=&#39;ortho&#39;, resolution=None, lat_0=1.35, lon_0=103) m.bluemarble(scale=0.5); . Getting the unique dataframe of all the towns . town_uni = data.drop_duplicates(subset = [&quot;town&quot;]) town_uni.reset_index(inplace=True) town_uni . index case restaurant price gReviews gRating ddReviews ddRating ddFee yReviews yRating latitude longitude town . 0 0 | 2 | Sun Shui | 2 | 324 | 4.5 | 0 | 0.0 | 0.0 | 154 | 4.0 | 42.919826 | -71.461006 | Bedford | . 1 1 | 4 | Chen Yang Li B | 2 | 468 | 4.2 | 0 | 0.0 | 0.0 | 83 | 3.0 | 43.170056 | -71.535558 | Bow | . 2 2 | 6 | Dragon Star | 2 | 126 | 4.2 | 0 | 0.0 | 0.0 | 28 | 3.5 | 43.200392 | -71.532658 | Concord | . 3 7 | 15 | China Garden | 1 | 144 | 3.9 | 0 | 0.0 | 0.0 | 74 | 3.5 | 42.898300 | -71.335473 | Derry | . 4 9 | 21 | Golden Leaf | 2 | 78 | 3.8 | 0 | 0.0 | 0.0 | 21 | 3.0 | 42.891259 | -71.139307 | East Hampstead | . 5 10 | 22 | Happy Family | 2 | 291 | 4.3 | 0 | 0.0 | 0.0 | 23 | 3.0 | 43.230217 | -71.361415 | Epsom | . 6 11 | 23 | Osaka | 2 | 192 | 4.0 | 0 | 0.0 | 0.0 | 50 | 3.0 | 42.887691 | -71.149027 | Hampstead | . 7 12 | 24 | Asian Breeze | 2 | 386 | 4.4 | 0 | 0.0 | 0.0 | 87 | 4.0 | 43.053215 | -71.442233 | Hooksett | . 8 13 | 25 | Dynamite Sushi | 2 | 249 | 4.4 | 0 | 0.0 | 0.0 | 150 | 4.0 | 42.759067 | -71.430858 | Hudson | . 9 14 | 30 | Bangkok Thai Food | 2 | 192 | 4.7 | 0 | 0.0 | 0.0 | 111 | 4.5 | 42.866402 | -71.349207 | Londonderry | . 10 17 | 34 | Aloha Restaurant | 2 | 481 | 4.2 | 0 | 0.0 | 0.0 | 85 | 3.0 | 42.986402 | -71.426531 | Manchester | . 11 33 | 67 | Hana Japanese | 3 | 82 | 4.8 | 0 | 0.0 | 0.0 | 39 | 4.5 | 42.837345 | -71.499091 | Merrimack | . 12 36 | 73 | Lilac Blossom | 2 | 591 | 4.3 | 0 | 0.0 | 0.0 | 103 | 3.5 | 42.707436 | -71.467752 | Nashua | . 13 41 | 88 | Mei&#39;s | 2 | 116 | 3.7 | 0 | 0.0 | 0.0 | 46 | 3.5 | 43.130859 | -71.452656 | Pembroke | . 14 42 | 89 | Asian Taste | 1 | 76 | 4.4 | 0 | 0.0 | 0.0 | 21 | 4.0 | 43.267225 | -71.587472 | Penacook | . 15 43 | 90 | Chang Long | 1 | 93 | 4.1 | 0 | 0.0 | 0.0 | 51 | 4.0 | 42.849543 | -71.104977 | Plaistow | . 16 45 | 92 | Lucky Dragon | 1 | 231 | 3.9 | 0 | 0.0 | 0.0 | 37 | 2.5 | 42.754452 | -71.207800 | Salem | . 17 50 | 102 | Li&#39;s Asian Gourmet | 2 | 40 | 4.2 | 0 | 0.0 | 0.0 | 25 | 2.5 | 42.792473 | -71.304759 | Windham | . Install the full package . conda install -c conda-forge basemap-data-hires . for i,j in enumerate(town_uni[&#39;town&#39;]): fig = plt.figure(figsize=(8, 8)) m = Basemap(projection=&#39;lcc&#39;, resolution=None, width=8E6, height=8E6, lat_0=town_uni[&#39;latitude&#39;][i], lon_0=town_uni[&#39;longitude&#39;][i]) m.etopo(scale=0.5, alpha=0.5) x, y = m(town_uni[&#39;longitude&#39;][i], town_uni[&#39;latitude&#39;][i]) plt.plot(x, y, &#39;ok&#39;, markersize=5) plt.text(x, y, town_uni[&#39;town&#39;][i], fontsize=12); plt.show() . Plotting a zoomed map . fig = plt.figure(figsize=(8, 8)) m = Basemap(projection=&#39;lcc&#39;, resolution=None, width=4E5, height=4E5, lat_0=data[&#39;latitude&#39;][0], lon_0=data[&#39;longitude&#39;][0]) m.etopo(scale=7, alpha=0.5) x, y = m(data[&#39;longitude&#39;][0], data[&#39;latitude&#39;][0]) plt.plot(x, y, &#39;ok&#39;, markersize=5) plt.text(x, y, data[&#39;town&#39;][0], fontsize=12); .",
            "url": "https://mdsohelmahmood.github.io/2021/06/21/asian-restaurants-msm.html",
            "relUrl": "/2021/06/21/asian-restaurants-msm.html",
            "date": " • Jun 21, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "X-ray image classification",
            "content": "import os import tensorflow as tf from tensorflow.keras import regularizers from tensorflow.keras import layers from tensorflow.keras import Model from tensorflow import keras import matplotlib.pyplot as plt . base_dir = &#39;chest_xray/reduced size/&#39; train_dir = os.path.join(base_dir, &#39;train&#39;) validation_dir = os.path.join(base_dir, &#39;test&#39;) train_NORMAL_dir = os.path.join(train_dir, &#39;NORMAL&#39;) train_PNEUMONIA_dir = os.path.join(train_dir, &#39;PNEUMONIA&#39;) validation_NORMAL_dir = os.path.join(validation_dir, &#39;NORMAL&#39;) validation_PNEUMONIA_dir = os.path.join(validation_dir, &#39;PNEUMONIA&#39;) train_NORMAL_fnames = os.listdir( train_NORMAL_dir ) train_PNEUMONIA_fnames = os.listdir( train_PNEUMONIA_dir ) print(train_NORMAL_fnames[:10]) print(train_PNEUMONIA_fnames[:10]) print(&#39;total training NORMAL images :&#39;, len(os.listdir( train_NORMAL_dir ) )) print(&#39;total training PNEUMONIA images :&#39;, len(os.listdir( train_PNEUMONIA_dir ) )) print(&#39;total validation NORMAL images :&#39;, len(os.listdir( validation_NORMAL_dir ) )) print(&#39;total validation PNEUMONIA images :&#39;, len(os.listdir( validation_PNEUMONIA_dir ) )) . [&#39;IM-0115-0001.jpeg&#39;, &#39;IM-0117-0001.jpeg&#39;, &#39;IM-0119-0001.jpeg&#39;, &#39;IM-0122-0001.jpeg&#39;, &#39;IM-0125-0001.jpeg&#39;, &#39;IM-0127-0001.jpeg&#39;, &#39;IM-0128-0001.jpeg&#39;, &#39;IM-0129-0001.jpeg&#39;, &#39;IM-0131-0001.jpeg&#39;, &#39;IM-0133-0001.jpeg&#39;] [&#39;person100_virus_184.jpeg&#39;, &#39;person101_virus_187.jpeg&#39;, &#39;person101_virus_188.jpeg&#39;, &#39;person102_virus_189.jpeg&#39;, &#39;person103_virus_190.jpeg&#39;, &#39;person104_virus_191.jpeg&#39;, &#39;person105_virus_192.jpeg&#39;, &#39;person105_virus_193.jpeg&#39;, &#39;person106_virus_194.jpeg&#39;, &#39;person107_virus_197.jpeg&#39;] total training NORMAL images : 1000 total training PNEUMONIA images : 1000 total validation NORMAL images : 100 total validation PNEUMONIA images : 100 . import matplotlib.image as mpimg import matplotlib.pyplot as plt # Parameters for our graph; we&#39;ll output images in a 4x4 configuration nrows = 4 ncols = 4 pic_index = 0 # Index for iterating over images # Set up matplotlib fig, and size it to fit 4x4 pics fig = plt.gcf() fig.set_size_inches(ncols*4, nrows*4) pic_index+=8 next_NORMAL_pix = [os.path.join(train_NORMAL_dir, fname) for fname in train_NORMAL_fnames[ pic_index-8:pic_index] ] next_PNEUMONIA_pix = [os.path.join(train_PNEUMONIA_dir, fname) for fname in train_PNEUMONIA_fnames[ pic_index-8:pic_index] ] for i, img_path in enumerate(next_NORMAL_pix+next_PNEUMONIA_pix): sp = plt.subplot(nrows, ncols, i + 1) sp.axis(&#39;Off&#39;) img = mpimg.imread(img_path) plt.imshow(img) . class Conv(tf.keras.Model): def __init__(self, filters, kernel_size): super(Conv, self).__init__() self.conv = tf.keras.layers.Conv2D(filters=filters, kernel_size=kernel_size) self.bn = tf.keras.layers.BatchNormalization() self.relu = tf.keras.layers.ReLU() self.pool = tf.keras.layers.MaxPool2D(pool_size=(2, 2)) def call(self, inputs, training=True): x = self.conv(inputs) x = self.bn(x, training=training) x = self.relu(x) x = self.pool(x) return x model = tf.keras.Sequential(name=&#39;X-ray_CNN&#39;) model.add(Conv(filters=32, kernel_size=(3, 3))) model.add(Conv(filters=64, kernel_size=(3, 3))) model.add(Conv(filters=128, kernel_size=(3, 3))) model.add(Conv(filters=128, kernel_size=(3, 3))) model.add(tf.keras.layers.Flatten()) model.add(tf.keras.layers.Dense(units=512, activation=tf.keras.activations.relu)) model.add(tf.keras.layers.Dense(units=2, activation=tf.keras.activations.softmax)) model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4), loss=tf.keras.losses.SparseCategoricalCrossentropy(), metrics=[&#39;accuracy&#39;]) from glob import glob base_dir = &#39;chest_xray/reduced size/&#39; train_len = len(glob(os.path.join(base_dir, &#39;train&#39;, &#39;NORMAL&#39;, &#39;*.jpeg&#39;))) * 2 val_len = len(glob(os.path.join(base_dir, &#39;val&#39;, &#39;NORMAL&#39;, &#39;*.jpeg&#39;))) * 2 test_len = len(glob(os.path.join(base_dir, &#39;test&#39;, &#39;NORMAL&#39;, &#39;*.jpeg&#39;))) * 2 train_len . 2000 . from tensorflow.keras.optimizers import RMSprop from tensorflow.keras.optimizers import SGD from tensorflow.keras.preprocessing.image import ImageDataGenerator train_datagen = ImageDataGenerator( rescale = 1.0/255, rotation_range=40, width_shift_range=0.2, height_shift_range=0.2, shear_range=0.2, zoom_range=0.2, horizontal_flip=True, fill_mode=&#39;nearest&#39; ) validation_datagen = ImageDataGenerator( rescale = 1.0/255, rotation_range=40, width_shift_range=0.2, height_shift_range=0.2, shear_range=0.2, zoom_range=0.2, horizontal_flip=True, fill_mode=&#39;nearest&#39; ) . # -- train_generator = train_datagen.flow_from_directory(train_dir, batch_size=20, class_mode=&#39;binary&#39;, target_size=(150, 150)) # -- # Flow validation images in batches of 20 using test_datagen generator # -- validation_generator = validation_datagen.flow_from_directory(validation_dir, batch_size=20, class_mode = &#39;binary&#39;, target_size = (150, 150)) checkpoint_path = &quot;training_1/cp.ckpt&quot; checkpoint_dir = os.path.dirname(checkpoint_path) # Create a callback that saves the model&#39;s weights callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path, save_best_only=True, save_weights_only=False, verbose=1) . Found 2000 images belonging to 2 classes. Found 200 images belonging to 2 classes. . import numpy as np def load(f, label): # load the file into tensor image = tf.io.read_file(f) # Decode it to JPEG format image = tf.image.decode_jpeg(image) # Convert it to tf.float32 image = tf.cast(image, tf.float32) return image, label def resize(input_image, size): return tf.image.resize(input_image, size) def random_crop(input_image): return tf.image.random_crop(input_image, size=[150, 150, 1]) def central_crop(input_image): image = resize(input_image, [176, 176]) return tf.image.central_crop(image, central_fraction=0.84) def random_rotation(input_image): angles = np.random.randint(0, 3, 1) return tf.image.rot90(input_image, k=angles[0]) def random_jitter(input_image): # Resize it to 176 x 176 x 3 image = resize(input_image, [176, 176]) # Randomly Crop to 150 x 150 x 3 image = random_crop(image) # Randomly rotation image = random_rotation(image) # Randomly mirroring image = tf.image.random_flip_left_right(image) return image def normalize(input_image): mid = (tf.reduce_max(input_image) + tf.reduce_min(input_image)) / 2 input_image = input_image / mid - 1 return input_image def load_image_train(image_file, label): image, label = load(image_file, label) image = random_jitter(image) image = normalize(image) return image, label def load_image_val(image_file, label): image, label = load(image_file, label) image = central_crop(image) image = normalize(image) return image, label . temp_ds = tf.data.Dataset.list_files(os.path.join(&quot;chest_xray/reduced size&quot;, &#39;train&#39;, &#39;NORMAL&#39;, &#39;*.jpeg&#39;)) temp_ds = temp_ds.map(lambda x: (x, 0)) temp2_ds = tf.data.Dataset.list_files(os.path.join(&quot;chest_xray/reduced size&quot;, &#39;train&#39;, &#39;PNEUMONIA&#39;, &#39;*.jpeg&#39;)) temp2_ds = temp2_ds.map(lambda x: (x, 1)) train_ds = temp_ds.concatenate(temp2_ds) buffer_size = tf.data.experimental.cardinality(train_ds).numpy() train_ds = train_ds.shuffle(buffer_size) .map(load_image_train, num_parallel_calls=16) .batch(20) .repeat() temp_ds = tf.data.Dataset.list_files(os.path.join(&quot;chest_xray/reduced size&quot;, &#39;val&#39;, &#39;NORMAL&#39;, &#39;*.jpeg&#39;)) temp_ds = temp_ds.map(lambda x: (x, 0)) temp2_ds = tf.data.Dataset.list_files(os.path.join(&quot;chest_xray/reduced size&quot;, &#39;val&#39;, &#39;PNEUMONIA&#39;, &#39;*.jpeg&#39;)) temp2_ds = temp2_ds.map(lambda x: (x, 1)) val_ds = temp_ds.concatenate(temp2_ds) val_ds = val_ds.map(load_image_val, num_parallel_calls=16) .batch(20) .repeat() temp_ds = tf.data.Dataset.list_files(os.path.join(&quot;chest_xray/reduced size&quot;, &#39;test&#39;, &#39;NORMAL&#39;, &#39;*.jpeg&#39;)) temp_ds = temp_ds.map(lambda x: (x, 0)) temp2_ds = tf.data.Dataset.list_files(os.path.join(&quot;chest_xray/reduced size&quot;, &#39;test&#39;, &#39;PNEUMONIA&#39;, &#39;*.jpeg&#39;)) temp2_ds = temp2_ds.map(lambda x: (x, 1)) test_ds = temp_ds.concatenate(temp2_ds) batch_size = 10 test_ds = test_ds.map(load_image_val, num_parallel_calls=16) .batch(batch_size) .repeat() for images, labels in train_ds.take(1): fig, ax = plt.subplots(1, 10, figsize=(20, 6)) for j in range(10): image = images[j].numpy() image = image / np.amax(image) image = np.clip(image, 0, 1) ax[j].imshow(image) ax[j].set_title(labels[j].numpy()) plt.show() . checkpoint_path = &quot;./train/x-ray/cp-{epoch:04d}.ckpt&quot; checkpoint_dir = os.path.dirname(checkpoint_path) cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_path, save_best_only=True, save_weights_only=True, verbose=1) . base_dir = &quot;chest_xray/reduced size/&quot; train_len = len(glob(os.path.join(base_dir, &#39;train&#39;, &#39;NORMAL&#39;, &#39;*.jpeg&#39;))) * 2 val_len = len(glob(os.path.join(base_dir, &#39;val&#39;, &#39;NORMAL&#39;, &#39;*.jpeg&#39;))) * 2 test_len = len(glob(os.path.join(base_dir, &#39;test&#39;, &#39;NORMAL&#39;, &#39;*.jpeg&#39;))) * 2 train_len . 2000 . history = model.fit(train_ds, steps_per_epoch=train_len/20, validation_data=val_ds, validation_steps=val_len/20, epochs=50, verbose=1, callbacks=[cp_callback] ) . Epoch 1/50 100/100 [==============================] - 87s 861ms/step - loss: 0.3496 - accuracy: 0.8715 - val_loss: 2.2965 - val_accuracy: 0.5000 Epoch 00001: val_loss improved from inf to 2.29648, saving model to ./train/x-ray cp-0001.ckpt Epoch 2/50 100/100 [==============================] - 90s 892ms/step - loss: 0.1919 - accuracy: 0.9310 - val_loss: 2.8285 - val_accuracy: 0.5000 Epoch 00002: val_loss did not improve from 2.29648 Epoch 3/50 100/100 [==============================] - 89s 885ms/step - loss: 0.1472 - accuracy: 0.9465 - val_loss: 3.3786 - val_accuracy: 0.5000 Epoch 00003: val_loss did not improve from 2.29648 Epoch 4/50 100/100 [==============================] - 90s 902ms/step - loss: 0.1542 - accuracy: 0.9470 - val_loss: 3.1765 - val_accuracy: 0.5000 Epoch 00004: val_loss did not improve from 2.29648 Epoch 5/50 100/100 [==============================] - 89s 889ms/step - loss: 0.1220 - accuracy: 0.9575 - val_loss: 3.1865 - val_accuracy: 0.5000 Epoch 00005: val_loss did not improve from 2.29648 Epoch 6/50 100/100 [==============================] - 104s 1s/step - loss: 0.1135 - accuracy: 0.9535 - val_loss: 2.5589 - val_accuracy: 0.5200 Epoch 00006: val_loss did not improve from 2.29648 Epoch 7/50 100/100 [==============================] - 107s 1s/step - loss: 0.1260 - accuracy: 0.9485 - val_loss: 2.1608 - val_accuracy: 0.5500 Epoch 00007: val_loss improved from 2.29648 to 2.16084, saving model to ./train/x-ray cp-0007.ckpt Epoch 8/50 100/100 [==============================] - 109s 1s/step - loss: 0.1193 - accuracy: 0.9590 - val_loss: 0.9770 - val_accuracy: 0.6750 Epoch 00008: val_loss improved from 2.16084 to 0.97696, saving model to ./train/x-ray cp-0008.ckpt Epoch 9/50 100/100 [==============================] - 110s 1s/step - loss: 0.1155 - accuracy: 0.9565 - val_loss: 2.2169 - val_accuracy: 0.5750 Epoch 00009: val_loss did not improve from 0.97696 Epoch 10/50 100/100 [==============================] - 107s 1s/step - loss: 0.1043 - accuracy: 0.9650 - val_loss: 1.9094 - val_accuracy: 0.6100 Epoch 00010: val_loss did not improve from 0.97696 Epoch 11/50 100/100 [==============================] - 105s 1s/step - loss: 0.1095 - accuracy: 0.9585 - val_loss: 2.1666 - val_accuracy: 0.5850 Epoch 00011: val_loss did not improve from 0.97696 Epoch 12/50 100/100 [==============================] - 85s 845ms/step - loss: 0.1155 - accuracy: 0.9545 - val_loss: 0.7729 - val_accuracy: 0.7650 Epoch 00012: val_loss improved from 0.97696 to 0.77294, saving model to ./train/x-ray cp-0012.ckpt Epoch 13/50 100/100 [==============================] - 84s 837ms/step - loss: 0.0800 - accuracy: 0.9735 - val_loss: 0.9975 - val_accuracy: 0.6950 Epoch 00013: val_loss did not improve from 0.77294 Epoch 14/50 100/100 [==============================] - 85s 848ms/step - loss: 0.0758 - accuracy: 0.9725 - val_loss: 2.3209 - val_accuracy: 0.6150 Epoch 00014: val_loss did not improve from 0.77294 Epoch 15/50 100/100 [==============================] - 86s 854ms/step - loss: 0.0912 - accuracy: 0.9645 - val_loss: 1.2139 - val_accuracy: 0.6350 Epoch 00015: val_loss did not improve from 0.77294 Epoch 16/50 100/100 [==============================] - 86s 852ms/step - loss: 0.0764 - accuracy: 0.9720 - val_loss: 1.4312 - val_accuracy: 0.6500 Epoch 00016: val_loss did not improve from 0.77294 Epoch 17/50 100/100 [==============================] - 85s 850ms/step - loss: 0.0807 - accuracy: 0.9675 - val_loss: 3.3588 - val_accuracy: 0.5300 Epoch 00017: val_loss did not improve from 0.77294 Epoch 18/50 100/100 [==============================] - 85s 845ms/step - loss: 0.0813 - accuracy: 0.9715 - val_loss: 0.8275 - val_accuracy: 0.7300 Epoch 00018: val_loss did not improve from 0.77294 Epoch 19/50 100/100 [==============================] - 85s 848ms/step - loss: 0.0810 - accuracy: 0.9680 - val_loss: 1.3656 - val_accuracy: 0.6500 Epoch 00019: val_loss did not improve from 0.77294 Epoch 20/50 100/100 [==============================] - 100s 996ms/step - loss: 0.0676 - accuracy: 0.9775 - val_loss: 1.9736 - val_accuracy: 0.6200 Epoch 00020: val_loss did not improve from 0.77294 Epoch 21/50 100/100 [==============================] - 106s 1s/step - loss: 0.0744 - accuracy: 0.9725 - val_loss: 0.9104 - val_accuracy: 0.7250 Epoch 00021: val_loss did not improve from 0.77294 Epoch 22/50 100/100 [==============================] - 108s 1s/step - loss: 0.0563 - accuracy: 0.9820 - val_loss: 1.5101 - val_accuracy: 0.6550 Epoch 00022: val_loss did not improve from 0.77294 Epoch 23/50 100/100 [==============================] - 105s 1s/step - loss: 0.0644 - accuracy: 0.9770 - val_loss: 1.8021 - val_accuracy: 0.6250 Epoch 00023: val_loss did not improve from 0.77294 Epoch 24/50 100/100 [==============================] - 108s 1s/step - loss: 0.0839 - accuracy: 0.9655 - val_loss: 0.9646 - val_accuracy: 0.7100 Epoch 00024: val_loss did not improve from 0.77294 Epoch 25/50 100/100 [==============================] - 109s 1s/step - loss: 0.0726 - accuracy: 0.9680 - val_loss: 2.0138 - val_accuracy: 0.6400 Epoch 00025: val_loss did not improve from 0.77294 Epoch 26/50 100/100 [==============================] - 90s 894ms/step - loss: 0.0601 - accuracy: 0.9780 - val_loss: 1.2048 - val_accuracy: 0.6900 Epoch 00026: val_loss did not improve from 0.77294 Epoch 27/50 100/100 [==============================] - 86s 860ms/step - loss: 0.0655 - accuracy: 0.9740 - val_loss: 1.2675 - val_accuracy: 0.6950 Epoch 00027: val_loss did not improve from 0.77294 Epoch 28/50 100/100 [==============================] - 86s 853ms/step - loss: 0.0496 - accuracy: 0.9805 - val_loss: 1.4657 - val_accuracy: 0.6700 Epoch 00028: val_loss did not improve from 0.77294 Epoch 29/50 100/100 [==============================] - 85s 846ms/step - loss: 0.0565 - accuracy: 0.9770 - val_loss: 1.8231 - val_accuracy: 0.6400 Epoch 00029: val_loss did not improve from 0.77294 Epoch 30/50 100/100 [==============================] - 85s 846ms/step - loss: 0.0573 - accuracy: 0.9790 - val_loss: 2.2683 - val_accuracy: 0.6200 Epoch 00030: val_loss did not improve from 0.77294 Epoch 31/50 100/100 [==============================] - 85s 847ms/step - loss: 0.0561 - accuracy: 0.9810 - val_loss: 1.2069 - val_accuracy: 0.6850 Epoch 00031: val_loss did not improve from 0.77294 Epoch 32/50 100/100 [==============================] - 85s 849ms/step - loss: 0.0686 - accuracy: 0.9765 - val_loss: 1.1702 - val_accuracy: 0.7000 Epoch 00032: val_loss did not improve from 0.77294 Epoch 33/50 100/100 [==============================] - 85s 848ms/step - loss: 0.0517 - accuracy: 0.9835 - val_loss: 1.3022 - val_accuracy: 0.6950 Epoch 00033: val_loss did not improve from 0.77294 Epoch 34/50 100/100 [==============================] - 86s 860ms/step - loss: 0.0606 - accuracy: 0.9775 - val_loss: 0.5868 - val_accuracy: 0.7500 Epoch 00034: val_loss improved from 0.77294 to 0.58676, saving model to ./train/x-ray cp-0034.ckpt Epoch 35/50 100/100 [==============================] - 85s 849ms/step - loss: 0.0559 - accuracy: 0.9825 - val_loss: 1.5848 - val_accuracy: 0.6600 Epoch 00035: val_loss did not improve from 0.58676 Epoch 36/50 100/100 [==============================] - 85s 847ms/step - loss: 0.0418 - accuracy: 0.9830 - val_loss: 1.0125 - val_accuracy: 0.7200 Epoch 00036: val_loss did not improve from 0.58676 Epoch 37/50 100/100 [==============================] - 85s 848ms/step - loss: 0.0603 - accuracy: 0.9745 - val_loss: 1.2868 - val_accuracy: 0.7050 Epoch 00037: val_loss did not improve from 0.58676 Epoch 38/50 100/100 [==============================] - 85s 848ms/step - loss: 0.0506 - accuracy: 0.9815 - val_loss: 1.8795 - val_accuracy: 0.6450 Epoch 00038: val_loss did not improve from 0.58676 Epoch 39/50 100/100 [==============================] - 85s 844ms/step - loss: 0.0599 - accuracy: 0.9765 - val_loss: 0.9368 - val_accuracy: 0.7400 Epoch 00039: val_loss did not improve from 0.58676 Epoch 40/50 100/100 [==============================] - 85s 847ms/step - loss: 0.0452 - accuracy: 0.9825 - val_loss: 2.4980 - val_accuracy: 0.6500 Epoch 00040: val_loss did not improve from 0.58676 Epoch 41/50 100/100 [==============================] - 84s 835ms/step - loss: 0.0404 - accuracy: 0.9835 - val_loss: 1.2629 - val_accuracy: 0.7100 Epoch 00041: val_loss did not improve from 0.58676 Epoch 42/50 100/100 [==============================] - 86s 852ms/step - loss: 0.0493 - accuracy: 0.9805 - val_loss: 1.6048 - val_accuracy: 0.6450 Epoch 00042: val_loss did not improve from 0.58676 Epoch 43/50 100/100 [==============================] - 96s 955ms/step - loss: 0.0443 - accuracy: 0.9820 - val_loss: 2.6243 - val_accuracy: 0.6400 Epoch 00043: val_loss did not improve from 0.58676 Epoch 44/50 100/100 [==============================] - 105s 1s/step - loss: 0.0480 - accuracy: 0.9830 - val_loss: 2.7355 - val_accuracy: 0.5800 Epoch 00044: val_loss did not improve from 0.58676 Epoch 45/50 100/100 [==============================] - 106s 1s/step - loss: 0.0397 - accuracy: 0.9865 - val_loss: 1.8251 - val_accuracy: 0.6400 Epoch 00045: val_loss did not improve from 0.58676 Epoch 46/50 100/100 [==============================] - 105s 1s/step - loss: 0.0445 - accuracy: 0.9850 - val_loss: 0.9322 - val_accuracy: 0.7250 Epoch 00046: val_loss did not improve from 0.58676 Epoch 47/50 100/100 [==============================] - 108s 1s/step - loss: 0.0409 - accuracy: 0.9830 - val_loss: 1.3058 - val_accuracy: 0.7000 Epoch 00047: val_loss did not improve from 0.58676 Epoch 48/50 100/100 [==============================] - 108s 1s/step - loss: 0.0422 - accuracy: 0.9835 - val_loss: 2.7299 - val_accuracy: 0.5900 Epoch 00048: val_loss did not improve from 0.58676 Epoch 49/50 100/100 [==============================] - 105s 1s/step - loss: 0.0475 - accuracy: 0.9805 - val_loss: 0.9925 - val_accuracy: 0.7850 Epoch 00049: val_loss did not improve from 0.58676 Epoch 50/50 100/100 [==============================] - 81s 809ms/step - loss: 0.0427 - accuracy: 0.9845 - val_loss: 0.6244 - val_accuracy: 0.7850 Epoch 00050: val_loss did not improve from 0.58676 . from matplotlib.pyplot import figure colors = plt.rcParams[&#39;axes.prop_cycle&#39;].by_key()[&#39;color&#39;] def plot_metrics(history): metrics = [&#39;loss&#39;, &#39;accuracy&#39;] for n, metric in enumerate(metrics): name = metric.replace(&quot;_&quot;,&quot; &quot;).capitalize() figure(figsize=(20, 8)) plt.subplot(1,2,n+1) plt.plot(history.epoch, history.history[metric], color=colors[0], label=&#39;Train&#39;) plt.plot(history.epoch, history.history[&#39;val_&#39;+metric], color=colors[0], linestyle=&quot;--&quot;, label=&#39;Val&#39;) plt.xlabel(&#39;Epoch&#39;) plt.ylabel(name) if metric == &#39;loss&#39;: plt.ylim([0, plt.ylim()[1]]) elif metric == &#39;auc&#39;: plt.ylim([0.8,1]) else: plt.ylim([0,1]) plt.legend() plot_metrics(history) . model.summary() . Model: &#34;Cat_Dog_CNN&#34; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= conv (Conv) (None, None, None, 32) 448 _________________________________________________________________ conv_1 (Conv) (None, None, None, 64) 18752 _________________________________________________________________ conv_2 (Conv) (None, None, None, 128) 74368 _________________________________________________________________ conv_3 (Conv) (None, None, None, 128) 148096 _________________________________________________________________ flatten (Flatten) (None, None) 0 _________________________________________________________________ dense (Dense) (None, 512) 3211776 _________________________________________________________________ dense_1 (Dense) (None, 2) 1026 ================================================================= Total params: 3,454,466 Trainable params: 3,453,762 Non-trainable params: 704 _________________________________________________________________ . test_ds . &lt;RepeatDataset shapes: ((None, 148, 148, None), (None,)), types: (tf.float32, tf.int32)&gt; . model.evaluate(test_ds, steps=int(test_len/batch_size)) . 20/20 [==============================] - 2s 112ms/step - loss: 0.2884 - accuracy: 0.8950 . [0.2883862555027008, 0.8949999809265137] . test_len . 200 . &quot;&quot;&quot; Steps should be equal to total samples (including both of the folders inside test folder) divided by batch size&quot;&quot;&quot; batch_size = 10 predictions = model.predict(test_ds, steps=int(test_len/batch_size)) predictions . array([[9.85657334e-01, 1.43426713e-02], [9.99776781e-01, 2.23287541e-04], [8.64409924e-01, 1.35590136e-01], [9.99276578e-01, 7.23473204e-04], [9.91437137e-01, 8.56289174e-03], [4.97444481e-01, 5.02555490e-01], [9.86491621e-01, 1.35083832e-02], [9.99639750e-01, 3.60298000e-04], [9.93371844e-01, 6.62815524e-03], [9.93454635e-01, 6.54536439e-03], [9.99535680e-01, 4.64307755e-04], [9.86793697e-01, 1.32063385e-02], [9.98911142e-01, 1.08882831e-03], [7.32735872e-01, 2.67264098e-01], [9.74538684e-01, 2.54613403e-02], [9.60229278e-01, 3.97707224e-02], [9.66539204e-01, 3.34607884e-02], [9.86298084e-01, 1.37019679e-02], [9.99833584e-01, 1.66425540e-04], [7.65602887e-01, 2.34397158e-01], [6.70023382e-01, 3.29976588e-01], [9.95202422e-01, 4.79759090e-03], [9.55268025e-01, 4.47319858e-02], [9.08097625e-01, 9.19024050e-02], [8.19931269e-01, 1.80068731e-01], [9.99431670e-01, 5.68260264e-04], [9.99796569e-01, 2.03445801e-04], [9.99282300e-01, 7.17661052e-04], [9.99994278e-01, 5.68568203e-06], [7.48119056e-01, 2.51881003e-01], [9.83032346e-01, 1.69676840e-02], [9.99669790e-01, 3.30263254e-04], [8.51692975e-01, 1.48306996e-01], [9.23557878e-01, 7.64420778e-02], [9.05704498e-01, 9.42955092e-02], [9.99992371e-01, 7.66991616e-06], [9.94957745e-01, 5.04231080e-03], [9.19523537e-01, 8.04765150e-02], [2.39147276e-01, 7.60852695e-01], [9.99994993e-01, 4.98324152e-06], [9.99448359e-01, 5.51683363e-04], [7.54624188e-01, 2.45375797e-01], [1.13067344e-01, 8.86932611e-01], [9.74270821e-01, 2.57292371e-02], [8.35689604e-01, 1.64310351e-01], [9.67578530e-01, 3.24214920e-02], [8.55771184e-01, 1.44228816e-01], [9.96430874e-01, 3.56906885e-03], [9.94876444e-01, 5.12352493e-03], [9.99932289e-01, 6.77012649e-05], [9.70197856e-01, 2.98021659e-02], [9.99202430e-01, 7.97536224e-04], [9.14013460e-02, 9.08598661e-01], [9.81141210e-01, 1.88587606e-02], [1.12472055e-02, 9.88752723e-01], [9.97602046e-01, 2.39792606e-03], [9.99979377e-01, 2.06440855e-05], [9.99268353e-01, 7.31674198e-04], [9.99997854e-01, 2.13386556e-06], [9.70610023e-01, 2.93899346e-02], [7.94489443e-01, 2.05510542e-01], [7.33211543e-03, 9.92667854e-01], [9.75319624e-01, 2.46804170e-02], [1.97908074e-01, 8.02091956e-01], [8.84383380e-01, 1.15616612e-01], [9.99961138e-01, 3.88987137e-05], [9.91863012e-01, 8.13699979e-03], [9.99801457e-01, 1.98573107e-04], [6.90290034e-01, 3.09709996e-01], [9.99935389e-01, 6.45479959e-05], [9.48556125e-01, 5.14439307e-02], [9.76195812e-01, 2.38042045e-02], [9.99999523e-01, 5.08934647e-07], [8.19931269e-01, 1.80068731e-01], [9.98999894e-01, 1.00009795e-03], [6.26317561e-01, 3.73682439e-01], [9.79074776e-01, 2.09252276e-02], [9.99930382e-01, 6.96428106e-05], [9.99850988e-01, 1.48991836e-04], [2.74874060e-03, 9.97251213e-01], [4.57723022e-01, 5.42276978e-01], [9.99959469e-01, 4.05785177e-05], [8.28060329e-01, 1.71939671e-01], [9.99933839e-01, 6.61413360e-05], [9.98803616e-01, 1.19643949e-03], [9.84709024e-01, 1.52909458e-02], [6.26547456e-01, 3.73452604e-01], [9.99979734e-01, 2.03010804e-05], [9.99873400e-01, 1.26630621e-04], [4.78458375e-01, 5.21541536e-01], [9.96844172e-01, 3.15584964e-03], [9.99795258e-01, 2.04735581e-04], [4.71913606e-01, 5.28086483e-01], [9.94498432e-01, 5.50155155e-03], [9.90329504e-01, 9.67049971e-03], [9.99999762e-01, 2.64577835e-07], [9.40155387e-01, 5.98445721e-02], [9.96164680e-01, 3.83532280e-03], [9.64362323e-01, 3.56376134e-02], [8.73457611e-01, 1.26542464e-01], [1.69541419e-03, 9.98304605e-01], [5.51110588e-06, 9.99994516e-01], [8.85826796e-02, 9.11417246e-01], [1.32892319e-05, 9.99986768e-01], [6.64665131e-05, 9.99933481e-01], [4.88702790e-04, 9.99511242e-01], [8.98612976e-01, 1.01387009e-01], [7.13682398e-02, 9.28631723e-01], [9.86585259e-01, 1.34147303e-02], [1.39485730e-03, 9.98605192e-01], [2.63140917e-01, 7.36859083e-01], [1.76326407e-03, 9.98236775e-01], [3.41288105e-05, 9.99965906e-01], [1.20350353e-01, 8.79649639e-01], [2.79125234e-04, 9.99720871e-01], [9.89445616e-05, 9.99901056e-01], [4.43055853e-03, 9.95569408e-01], [1.01792524e-02, 9.89820719e-01], [3.83035233e-03, 9.96169627e-01], [2.98472762e-04, 9.99701440e-01], [3.84452264e-03, 9.96155441e-01], [1.38619207e-02, 9.86138046e-01], [2.12187283e-02, 9.78781283e-01], [7.06023071e-03, 9.92939711e-01], [9.60930288e-01, 3.90697718e-02], [9.44973342e-03, 9.90550280e-01], [5.40239096e-01, 4.59760875e-01], [1.16611621e-03, 9.98833835e-01], [7.99014833e-06, 9.99992013e-01], [1.02940416e-04, 9.99897003e-01], [3.85035586e-04, 9.99614954e-01], [7.17576081e-03, 9.92824197e-01], [7.48903573e-01, 2.51096487e-01], [4.76671085e-02, 9.52332854e-01], [4.58785553e-06, 9.99995470e-01], [4.24756181e-05, 9.99957561e-01], [1.46502256e-01, 8.53497803e-01], [1.72045966e-05, 9.99982834e-01], [6.45562774e-03, 9.93544340e-01], [6.80038799e-03, 9.93199646e-01], [9.02544853e-05, 9.99909759e-01], [1.08804239e-03, 9.98911977e-01], [7.08077908e-01, 2.91922122e-01], [7.97863235e-04, 9.99202192e-01], [3.54133570e-03, 9.96458709e-01], [8.83329570e-01, 1.16670460e-01], [5.36343083e-04, 9.99463618e-01], [8.08406528e-03, 9.91915882e-01], [7.92855339e-04, 9.99207199e-01], [1.05939853e-05, 9.99989390e-01], [1.25802336e-02, 9.87419784e-01], [6.50432259e-02, 9.34956789e-01], [1.50379464e-01, 8.49620581e-01], [9.07501671e-04, 9.99092460e-01], [9.93537344e-03, 9.90064681e-01], [7.35002477e-03, 9.92649972e-01], [5.62144350e-03, 9.94378507e-01], [2.56918956e-05, 9.99974251e-01], [9.05568339e-03, 9.90944266e-01], [1.48160500e-04, 9.99851823e-01], [1.49371290e-05, 9.99985099e-01], [3.99887422e-03, 9.96001065e-01], [1.59233436e-01, 8.40766549e-01], [1.36563471e-02, 9.86343622e-01], [1.01777585e-02, 9.89822268e-01], [1.26898989e-01, 8.73101056e-01], [2.93411734e-03, 9.97065842e-01], [1.42731369e-04, 9.99857306e-01], [4.03385711e-05, 9.99959707e-01], [2.93119811e-04, 9.99706805e-01], [2.30396073e-03, 9.97695982e-01], [1.83795422e-01, 8.16204607e-01], [1.48447510e-03, 9.98515546e-01], [5.91264688e-04, 9.99408722e-01], [4.48765677e-05, 9.99955177e-01], [1.52140425e-03, 9.98478591e-01], [2.15825916e-04, 9.99784172e-01], [3.09880115e-02, 9.69012022e-01], [3.01997602e-01, 6.98002398e-01], [6.44010652e-06, 9.99993563e-01], [6.29856065e-02, 9.37014341e-01], [3.50856334e-02, 9.64914322e-01], [9.15549994e-01, 8.44499767e-02], [1.54254362e-02, 9.84574616e-01], [3.65524925e-02, 9.63447452e-01], [1.11409612e-02, 9.88859057e-01], [1.91820621e-01, 8.08179379e-01], [1.21757970e-03, 9.98782456e-01], [6.78364770e-04, 9.99321699e-01], [3.66500437e-01, 6.33499503e-01], [6.23298824e-01, 3.76701176e-01], [6.47320509e-01, 3.52679491e-01], [1.66842653e-06, 9.99998331e-01], [8.69961455e-02, 9.13003862e-01], [3.86185795e-01, 6.13814294e-01], [1.19015481e-03, 9.98809814e-01], [7.51811713e-02, 9.24818814e-01], [6.69739366e-01, 3.30260664e-01], [1.10908980e-02, 9.88909066e-01], [1.37867119e-05, 9.99986172e-01]], dtype=float32) . predictions.shape . (200, 2) . Need to convert the predictions to binaries to get classification report . pred = [0]*predictions.shape[0] for i in range(predictions.shape[0]): if float(predictions[i][0]) &gt; float(predictions[i][1]): pred[i] = 0 else: pred[i] = 1 pred . [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1] . # predictions . i=0 p = [] &quot;&quot;&quot;test_ds.take method takes samles from the test_ds n times when n is the number provided as argument. When all the samples are taken, it starts repaeating from the first position&quot;&quot;&quot; for images, labels in test_ds.take(int(test_len/batch_size)): i+=1 predictions = model(images) p.append(predictions) fig, ax = plt.subplots(1, batch_size, figsize=(20, 6)) &quot;&quot;&quot;Here the second argument in plt.subplots is different from the test_ds.take method&#39;s argument plt.plot&#39;s second argument should be equalto the batch size whereas test_ds&#39;s argument indicates how many times the script will enter test_ds&quot;&quot;&quot; for j in range(batch_size): &quot;&quot;&quot;This argument is for loop is also equal to batch size&quot;&quot;&quot; image = images[j].numpy() image = image / np.amax(image) image = np.clip(image, 0, 1) ax[j].imshow(image) normal_prob = predictions[j][0] normal_prob = round(float(normal_prob),2) pneumonia_prob = predictions[j][1] pneumonia_prob = round(float(pneumonia_prob),2) ax[j].set_title(&quot; gnd = {}, n n = {}, n p = {}&quot;.format(labels[j].numpy(), normal_prob,pneumonia_prob)) # ax[j].set_title(labels[j].numpy()) plt.show() predictions . &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[4.37334005e-04, 9.99562681e-01], [3.00131738e-02, 9.69986796e-01], [3.81141878e-03, 9.96188581e-01], [2.03762911e-02, 9.79623735e-01], [1.32271822e-03, 9.98677313e-01], [1.20561704e-01, 8.79438281e-01], [6.62317143e-06, 9.99993324e-01], [3.21331390e-05, 9.99967813e-01], [2.24176901e-07, 9.99999762e-01], [1.15374448e-02, 9.88462508e-01]], dtype=float32)&gt; . p . [&lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[9.9997640e-01, 2.3611767e-05], [9.9460572e-01, 5.3943270e-03], [1.9056603e-02, 9.8094338e-01], [9.9662638e-01, 3.3736371e-03], [3.6160144e-01, 6.3839853e-01], [9.8269629e-01, 1.7303696e-02], [9.9989533e-01, 1.0463434e-04], [9.9222624e-01, 7.7737737e-03], [9.9708241e-01, 2.9175165e-03], [9.3685031e-01, 6.3149773e-02]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[2.07020372e-01, 7.92979658e-01], [8.77992570e-01, 1.22007392e-01], [9.98836935e-01, 1.16312108e-03], [2.96648383e-01, 7.03351617e-01], [9.99999046e-01, 9.17801970e-07], [9.99280870e-01, 7.19166943e-04], [9.99985695e-01, 1.42726085e-05], [1.91694841e-01, 8.08305144e-01], [9.87044752e-01, 1.29553061e-02], [7.77511252e-03, 9.92224932e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[9.99583781e-01, 4.16221999e-04], [2.32120156e-02, 9.76787925e-01], [1.71785976e-03, 9.98282194e-01], [8.23590040e-01, 1.76409945e-01], [9.99817908e-01, 1.82167278e-04], [1.18535578e-01, 8.81464422e-01], [4.92661744e-02, 9.50733840e-01], [9.89264965e-01, 1.07350005e-02], [9.99361217e-01, 6.38783094e-04], [2.18322512e-05, 9.99978185e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[9.5074439e-01, 4.9255610e-02], [1.9186202e-02, 9.8081380e-01], [9.5544562e-02, 9.0445542e-01], [7.9370022e-01, 2.0629981e-01], [9.0158397e-01, 9.8416001e-02], [9.9509758e-01, 4.9023991e-03], [9.9992764e-01, 7.2373368e-05], [8.8502324e-01, 1.1497678e-01], [7.1819514e-01, 2.8180492e-01], [4.8267615e-01, 5.1732391e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[9.9998116e-01, 1.8830309e-05], [7.0943815e-01, 2.9056183e-01], [9.9975425e-01, 2.4571409e-04], [8.3195549e-01, 1.6804454e-01], [9.9665976e-01, 3.3402327e-03], [9.7706670e-01, 2.2933310e-02], [4.8827454e-03, 9.9511731e-01], [2.9929075e-01, 7.0070922e-01], [1.4642225e-01, 8.5357773e-01], [8.6713964e-01, 1.3286045e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[5.7048064e-02, 9.4295192e-01], [6.8188381e-01, 3.1811628e-01], [9.9993467e-01, 6.5311811e-05], [9.9801946e-01, 1.9805981e-03], [9.9940062e-01, 5.9934362e-04], [4.8240823e-01, 5.1759177e-01], [9.9987769e-01, 1.2231751e-04], [7.5315982e-01, 2.4684025e-01], [9.9860138e-01, 1.3986370e-03], [1.4008899e-04, 9.9985993e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[9.7329539e-01, 2.6704585e-02], [9.9953806e-01, 4.6195605e-04], [2.5956589e-01, 7.4043417e-01], [9.6730834e-01, 3.2691710e-02], [9.9542809e-01, 4.5719543e-03], [9.9979073e-01, 2.0929299e-04], [2.2868372e-01, 7.7131623e-01], [7.2618510e-04, 9.9927384e-01], [3.1125569e-01, 6.8874431e-01], [9.5836413e-01, 4.1635927e-02]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[0.13144295, 0.86855704], [0.36679748, 0.6332025 ], [0.8150542 , 0.18494579], [0.20597757, 0.79402244], [0.87983507, 0.12016494], [0.41560125, 0.58439875], [0.9981335 , 0.0018666 ], [0.56172115, 0.43827885], [0.99794143, 0.00205855], [0.80389744, 0.19610254]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[1.6033353e-02, 9.8396665e-01], [9.9982208e-01, 1.7793862e-04], [9.6246356e-01, 3.7536424e-02], [1.3810484e-03, 9.9861896e-01], [8.7185383e-02, 9.1281468e-01], [9.6629500e-01, 3.3704951e-02], [9.9177599e-01, 8.2239853e-03], [2.3377632e-01, 7.6622373e-01], [9.9936086e-01, 6.3911802e-04], [4.1348359e-01, 5.8651638e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[3.1530213e-02, 9.6846974e-01], [9.4895828e-01, 5.1041774e-02], [2.8660566e-01, 7.1339428e-01], [2.7487752e-01, 7.2512245e-01], [7.2765017e-01, 2.7234983e-01], [1.0000000e+00, 5.1669875e-08], [7.1596634e-01, 2.8403369e-01], [7.4264830e-01, 2.5735161e-01], [4.4818640e-01, 5.5181354e-01], [9.2353189e-01, 7.6468110e-02]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[5.1465398e-03, 9.9485344e-01], [1.9237743e-03, 9.9807620e-01], [7.3257961e-06, 9.9999273e-01], [1.8967977e-08, 1.0000000e+00], [1.8141576e-07, 9.9999976e-01], [1.7709215e-04, 9.9982291e-01], [1.2723017e-05, 9.9998724e-01], [1.7405267e-05, 9.9998260e-01], [6.4199250e-03, 9.9358010e-01], [5.5756314e-05, 9.9994421e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[2.7713349e-07, 9.9999976e-01], [4.6796207e-03, 9.9532038e-01], [6.0605096e-05, 9.9993944e-01], [1.1060315e-06, 9.9999893e-01], [1.4968660e-04, 9.9985027e-01], [9.7200825e-07, 9.9999905e-01], [4.2236229e-06, 9.9999583e-01], [1.9549063e-06, 9.9999809e-01], [3.3796155e-07, 9.9999964e-01], [2.2908565e-04, 9.9977094e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[6.3038719e-01, 3.6961281e-01], [1.2336066e-02, 9.8766392e-01], [9.2167949e-04, 9.9907827e-01], [1.9604218e-01, 8.0395788e-01], [7.6305028e-03, 9.9236953e-01], [8.2812592e-05, 9.9991715e-01], [6.0462626e-05, 9.9993956e-01], [7.5546541e-04, 9.9924457e-01], [1.4876950e-01, 8.5123056e-01], [3.3262427e-04, 9.9966741e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[1.6045369e-03, 9.9839550e-01], [2.3169729e-05, 9.9997687e-01], [1.8939108e-03, 9.9810612e-01], [2.6002672e-04, 9.9973994e-01], [2.9599574e-05, 9.9997044e-01], [3.2343855e-03, 9.9676561e-01], [1.2464504e-04, 9.9987531e-01], [9.8485441e-04, 9.9901509e-01], [6.0801220e-05, 9.9993920e-01], [9.4231637e-03, 9.9057686e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[7.9513824e-01, 2.0486182e-01], [4.1434990e-04, 9.9958569e-01], [8.1938019e-08, 9.9999988e-01], [2.1870263e-05, 9.9997818e-01], [3.5994139e-02, 9.6400583e-01], [1.1750820e-05, 9.9998820e-01], [6.5872036e-06, 9.9999344e-01], [5.3617905e-04, 9.9946386e-01], [1.4401111e-04, 9.9985600e-01], [5.0544418e-06, 9.9999499e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[2.0332830e-03, 9.9796677e-01], [8.5219639e-05, 9.9991477e-01], [5.1000100e-01, 4.8999900e-01], [2.2640487e-03, 9.9773598e-01], [6.6506600e-06, 9.9999332e-01], [6.1609391e-02, 9.3839061e-01], [4.4349380e-04, 9.9955648e-01], [2.3848681e-06, 9.9999762e-01], [2.9000235e-03, 9.9710000e-01], [2.4177107e-01, 7.5822890e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[9.62878287e-01, 3.71217169e-02], [8.94213021e-01, 1.05786964e-01], [7.93836892e-01, 2.06163108e-01], [9.61671321e-05, 9.99903798e-01], [2.14240972e-05, 9.99978542e-01], [2.11853534e-03, 9.97881472e-01], [5.28566912e-03, 9.94714320e-01], [1.83256459e-04, 9.99816716e-01], [8.69176220e-05, 9.99913096e-01], [1.58263668e-02, 9.84173656e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[1.3441809e-04, 9.9986553e-01], [2.6691348e-06, 9.9999738e-01], [9.3518935e-02, 9.0648103e-01], [1.1311603e-03, 9.9886876e-01], [1.3115118e-01, 8.6884886e-01], [7.9298043e-05, 9.9992073e-01], [3.5523926e-04, 9.9964476e-01], [1.0311117e-04, 9.9989688e-01], [2.9476205e-04, 9.9970526e-01], [2.1862721e-03, 9.9781370e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[2.1129787e-05, 9.9997890e-01], [6.4583614e-06, 9.9999356e-01], [2.2637751e-03, 9.9773622e-01], [5.2859301e-05, 9.9994719e-01], [5.4847723e-04, 9.9945158e-01], [1.3405080e-08, 1.0000000e+00], [2.5200158e-02, 9.7479987e-01], [1.1127055e-07, 9.9999988e-01], [2.7627090e-04, 9.9972373e-01], [9.0521586e-04, 9.9909484e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(10, 2), dtype=float32, numpy= array([[4.37334005e-04, 9.99562681e-01], [3.00131738e-02, 9.69986796e-01], [3.81141878e-03, 9.96188581e-01], [2.03762911e-02, 9.79623735e-01], [1.32271822e-03, 9.98677313e-01], [1.20561704e-01, 8.79438281e-01], [6.62317143e-06, 9.99993324e-01], [3.21331390e-05, 9.99967813e-01], [2.24176901e-07, 9.99999762e-01], [1.15374448e-02, 9.88462508e-01]], dtype=float32)&gt;] . len(p) . 20 . p[9].shape . TensorShape([10, 2]) .",
            "url": "https://mdsohelmahmood.github.io/2021/06/21/X-ray-image-classification.html",
            "relUrl": "/2021/06/21/X-ray-image-classification.html",
            "date": " • Jun 21, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mdsohelmahmood.github.io/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mdsohelmahmood.github.io/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mdsohelmahmood.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mdsohelmahmood.github.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}